
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d50  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08007f14  08007f14  00008f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008680  08008680  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008680  08008680  00009680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008684  08008684  00009684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008688  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003294  20000074  080086fc  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003308  080086fc  0000a308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f348  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  000193ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001bb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a31  00000000  00000000  0001c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fee  00000000  00000000  0001d2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000137af  00000000  00000000  000402d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbdc8  00000000  00000000  00053a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f84e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ac  00000000  00000000  0011f894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00123040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007efc 	.word	0x08007efc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08007efc 	.word	0x08007efc

08000204 <strcmp>:
 8000204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800020c:	2a01      	cmp	r2, #1
 800020e:	bf28      	it	cs
 8000210:	429a      	cmpcs	r2, r3
 8000212:	d0f7      	beq.n	8000204 <strcmp>
 8000214:	1ad0      	subs	r0, r2, r3
 8000216:	4770      	bx	lr

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b96a 	b.w	8000514 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	460c      	mov	r4, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14e      	bne.n	8000302 <__udivmoddi4+0xaa>
 8000264:	4694      	mov	ip, r2
 8000266:	458c      	cmp	ip, r1
 8000268:	4686      	mov	lr, r0
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	d962      	bls.n	8000336 <__udivmoddi4+0xde>
 8000270:	b14a      	cbz	r2, 8000286 <__udivmoddi4+0x2e>
 8000272:	f1c2 0320 	rsb	r3, r2, #32
 8000276:	4091      	lsls	r1, r2
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	4319      	orrs	r1, r3
 8000282:	fa00 fe02 	lsl.w	lr, r0, r2
 8000286:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028a:	fa1f f68c 	uxth.w	r6, ip
 800028e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029e:	fb04 f106 	mul.w	r1, r4, r6
 80002a2:	4299      	cmp	r1, r3
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x64>
 80002a6:	eb1c 0303 	adds.w	r3, ip, r3
 80002aa:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ae:	f080 8112 	bcs.w	80004d6 <__udivmoddi4+0x27e>
 80002b2:	4299      	cmp	r1, r3
 80002b4:	f240 810f 	bls.w	80004d6 <__udivmoddi4+0x27e>
 80002b8:	3c02      	subs	r4, #2
 80002ba:	4463      	add	r3, ip
 80002bc:	1a59      	subs	r1, r3, r1
 80002be:	fa1f f38e 	uxth.w	r3, lr
 80002c2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002c6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	429e      	cmp	r6, r3
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x94>
 80002d6:	eb1c 0303 	adds.w	r3, ip, r3
 80002da:	f100 31ff 	add.w	r1, r0, #4294967295
 80002de:	f080 80fc 	bcs.w	80004da <__udivmoddi4+0x282>
 80002e2:	429e      	cmp	r6, r3
 80002e4:	f240 80f9 	bls.w	80004da <__udivmoddi4+0x282>
 80002e8:	4463      	add	r3, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	1b9b      	subs	r3, r3, r6
 80002ee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0xa6>
 80002f6:	40d3      	lsrs	r3, r2
 80002f8:	2200      	movs	r2, #0
 80002fa:	e9c5 3200 	strd	r3, r2, [r5]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d905      	bls.n	8000312 <__udivmoddi4+0xba>
 8000306:	b10d      	cbz	r5, 800030c <__udivmoddi4+0xb4>
 8000308:	e9c5 0100 	strd	r0, r1, [r5]
 800030c:	2100      	movs	r1, #0
 800030e:	4608      	mov	r0, r1
 8000310:	e7f5      	b.n	80002fe <__udivmoddi4+0xa6>
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d146      	bne.n	80003a8 <__udivmoddi4+0x150>
 800031a:	42a3      	cmp	r3, r4
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xcc>
 800031e:	4290      	cmp	r0, r2
 8000320:	f0c0 80f0 	bcc.w	8000504 <__udivmoddi4+0x2ac>
 8000324:	1a86      	subs	r6, r0, r2
 8000326:	eb64 0303 	sbc.w	r3, r4, r3
 800032a:	2001      	movs	r0, #1
 800032c:	2d00      	cmp	r5, #0
 800032e:	d0e6      	beq.n	80002fe <__udivmoddi4+0xa6>
 8000330:	e9c5 6300 	strd	r6, r3, [r5]
 8000334:	e7e3      	b.n	80002fe <__udivmoddi4+0xa6>
 8000336:	2a00      	cmp	r2, #0
 8000338:	f040 8090 	bne.w	800045c <__udivmoddi4+0x204>
 800033c:	eba1 040c 	sub.w	r4, r1, ip
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	fa1f f78c 	uxth.w	r7, ip
 8000348:	2101      	movs	r1, #1
 800034a:	fbb4 f6f8 	udiv	r6, r4, r8
 800034e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000352:	fb08 4416 	mls	r4, r8, r6, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	4298      	cmp	r0, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x11c>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f106 34ff 	add.w	r4, r6, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x11a>
 800036c:	4298      	cmp	r0, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2b4>
 8000372:	4626      	mov	r6, r4
 8000374:	1a1c      	subs	r4, r3, r0
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb4 f0f8 	udiv	r0, r4, r8
 800037e:	fb08 4410 	mls	r4, r8, r0, r4
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	429f      	cmp	r7, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x148>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 34ff 	add.w	r4, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x146>
 8000398:	429f      	cmp	r7, r3
 800039a:	f200 80b0 	bhi.w	80004fe <__udivmoddi4+0x2a6>
 800039e:	4620      	mov	r0, r4
 80003a0:	1bdb      	subs	r3, r3, r7
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	e7a5      	b.n	80002f4 <__udivmoddi4+0x9c>
 80003a8:	f1c1 0620 	rsb	r6, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 f706 	lsr.w	r7, r2, r6
 80003b2:	431f      	orrs	r7, r3
 80003b4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b8:	fa04 f301 	lsl.w	r3, r4, r1
 80003bc:	ea43 030c 	orr.w	r3, r3, ip
 80003c0:	40f4      	lsrs	r4, r6
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	0c38      	lsrs	r0, r7, #16
 80003c8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003cc:	fbb4 fef0 	udiv	lr, r4, r0
 80003d0:	fa1f fc87 	uxth.w	ip, r7
 80003d4:	fb00 441e 	mls	r4, r0, lr, r4
 80003d8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003dc:	fb0e f90c 	mul.w	r9, lr, ip
 80003e0:	45a1      	cmp	r9, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90a      	bls.n	80003fe <__udivmoddi4+0x1a6>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ee:	f080 8084 	bcs.w	80004fa <__udivmoddi4+0x2a2>
 80003f2:	45a1      	cmp	r9, r4
 80003f4:	f240 8081 	bls.w	80004fa <__udivmoddi4+0x2a2>
 80003f8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	eba4 0409 	sub.w	r4, r4, r9
 8000402:	fa1f f983 	uxth.w	r9, r3
 8000406:	fbb4 f3f0 	udiv	r3, r4, r0
 800040a:	fb00 4413 	mls	r4, r0, r3, r4
 800040e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000412:	fb03 fc0c 	mul.w	ip, r3, ip
 8000416:	45a4      	cmp	ip, r4
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1d2>
 800041a:	193c      	adds	r4, r7, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000420:	d267      	bcs.n	80004f2 <__udivmoddi4+0x29a>
 8000422:	45a4      	cmp	ip, r4
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0x29a>
 8000426:	3b02      	subs	r3, #2
 8000428:	443c      	add	r4, r7
 800042a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800042e:	fba0 9302 	umull	r9, r3, r0, r2
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	429c      	cmp	r4, r3
 8000438:	46ce      	mov	lr, r9
 800043a:	469c      	mov	ip, r3
 800043c:	d351      	bcc.n	80004e2 <__udivmoddi4+0x28a>
 800043e:	d04e      	beq.n	80004de <__udivmoddi4+0x286>
 8000440:	b155      	cbz	r5, 8000458 <__udivmoddi4+0x200>
 8000442:	ebb8 030e 	subs.w	r3, r8, lr
 8000446:	eb64 040c 	sbc.w	r4, r4, ip
 800044a:	fa04 f606 	lsl.w	r6, r4, r6
 800044e:	40cb      	lsrs	r3, r1
 8000450:	431e      	orrs	r6, r3
 8000452:	40cc      	lsrs	r4, r1
 8000454:	e9c5 6400 	strd	r6, r4, [r5]
 8000458:	2100      	movs	r1, #0
 800045a:	e750      	b.n	80002fe <__udivmoddi4+0xa6>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f103 	lsr.w	r1, r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa24 f303 	lsr.w	r3, r4, r3
 800046c:	4094      	lsls	r4, r2
 800046e:	430c      	orrs	r4, r1
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000480:	fb08 3110 	mls	r1, r8, r0, r3
 8000484:	0c23      	lsrs	r3, r4, #16
 8000486:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048a:	fb00 f107 	mul.w	r1, r0, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x24c>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 36ff 	add.w	r6, r0, #4294967295
 800049a:	d22c      	bcs.n	80004f6 <__udivmoddi4+0x29e>
 800049c:	4299      	cmp	r1, r3
 800049e:	d92a      	bls.n	80004f6 <__udivmoddi4+0x29e>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ac:	fb08 3311 	mls	r3, r8, r1, r3
 80004b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b4:	fb01 f307 	mul.w	r3, r1, r7
 80004b8:	42a3      	cmp	r3, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x276>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c4:	d213      	bcs.n	80004ee <__udivmoddi4+0x296>
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d911      	bls.n	80004ee <__udivmoddi4+0x296>
 80004ca:	3902      	subs	r1, #2
 80004cc:	4464      	add	r4, ip
 80004ce:	1ae4      	subs	r4, r4, r3
 80004d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d4:	e739      	b.n	800034a <__udivmoddi4+0xf2>
 80004d6:	4604      	mov	r4, r0
 80004d8:	e6f0      	b.n	80002bc <__udivmoddi4+0x64>
 80004da:	4608      	mov	r0, r1
 80004dc:	e706      	b.n	80002ec <__udivmoddi4+0x94>
 80004de:	45c8      	cmp	r8, r9
 80004e0:	d2ae      	bcs.n	8000440 <__udivmoddi4+0x1e8>
 80004e2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004e6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7a8      	b.n	8000440 <__udivmoddi4+0x1e8>
 80004ee:	4631      	mov	r1, r6
 80004f0:	e7ed      	b.n	80004ce <__udivmoddi4+0x276>
 80004f2:	4603      	mov	r3, r0
 80004f4:	e799      	b.n	800042a <__udivmoddi4+0x1d2>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e7d4      	b.n	80004a4 <__udivmoddi4+0x24c>
 80004fa:	46d6      	mov	lr, sl
 80004fc:	e77f      	b.n	80003fe <__udivmoddi4+0x1a6>
 80004fe:	4463      	add	r3, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e74d      	b.n	80003a0 <__udivmoddi4+0x148>
 8000504:	4606      	mov	r6, r0
 8000506:	4623      	mov	r3, r4
 8000508:	4608      	mov	r0, r1
 800050a:	e70f      	b.n	800032c <__udivmoddi4+0xd4>
 800050c:	3e02      	subs	r6, #2
 800050e:	4463      	add	r3, ip
 8000510:	e730      	b.n	8000374 <__udivmoddi4+0x11c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	@ 0x40
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <SELECT+0x18>)
 8000522:	f001 fd5b 	bl	8001fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f001 f9f0 	bl	800190c <HAL_Delay>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40020400 	.word	0x40020400

08000534 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2140      	movs	r1, #64	@ 0x40
 800053c:	4803      	ldr	r0, [pc, #12]	@ (800054c <DESELECT+0x18>)
 800053e:	f001 fd4d 	bl	8001fdc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 f9e2 	bl	800190c <HAL_Delay>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40020400 	.word	0x40020400

08000550 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800055a:	bf00      	nop
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <SPI_TxByte+0x30>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	2b02      	cmp	r3, #2
 8000568:	d1f8      	bne.n	800055c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800056a:	1df9      	adds	r1, r7, #7
 800056c:	2364      	movs	r3, #100	@ 0x64
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <SPI_TxByte+0x30>)
 8000572:	f002 fb38 	bl	8002be6 <HAL_SPI_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000098 	.word	0x20000098

08000584 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000590:	bf00      	nop
 8000592:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <SPI_TxBuffer+0x30>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	2b02      	cmp	r3, #2
 800059e:	d1f8      	bne.n	8000592 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005a0:	887a      	ldrh	r2, [r7, #2]
 80005a2:	2364      	movs	r3, #100	@ 0x64
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <SPI_TxBuffer+0x30>)
 80005a8:	f002 fb1d 	bl	8002be6 <HAL_SPI_Transmit>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000098 	.word	0x20000098

080005b8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005be:	23ff      	movs	r3, #255	@ 0xff
 80005c0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005c2:	bf00      	nop
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <SPI_RxByte+0x34>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d1f8      	bne.n	80005c4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005d2:	1dba      	adds	r2, r7, #6
 80005d4:	1df9      	adds	r1, r7, #7
 80005d6:	2364      	movs	r3, #100	@ 0x64
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <SPI_RxByte+0x34>)
 80005de:	f002 fc46 	bl	8002e6e <HAL_SPI_TransmitReceive>

	return data;
 80005e2:	79bb      	ldrb	r3, [r7, #6]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000098 	.word	0x20000098

080005f0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005f8:	f7ff ffde 	bl	80005b8 <SPI_RxByte>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	701a      	strb	r2, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <SD_ReadyWait+0x30>)
 8000614:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000618:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800061a:	f7ff ffcd 	bl	80005b8 <SPI_RxByte>
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2bff      	cmp	r3, #255	@ 0xff
 8000626:	d003      	beq.n	8000630 <SD_ReadyWait+0x24>
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <SD_ReadyWait+0x30>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f4      	bne.n	800061a <SD_ReadyWait+0xe>

	return res;
 8000630:	79fb      	ldrb	r3, [r7, #7]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000092 	.word	0x20000092

08000640 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000646:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800064a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800064c:	f7ff ff72 	bl	8000534 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	e005      	b.n	8000662 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000656:	20ff      	movs	r0, #255	@ 0xff
 8000658:	f7ff ff7a 	bl	8000550 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3301      	adds	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2b09      	cmp	r3, #9
 8000666:	ddf6      	ble.n	8000656 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000668:	f7ff ff56 	bl	8000518 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800066c:	2340      	movs	r3, #64	@ 0x40
 800066e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000680:	2395      	movs	r3, #149	@ 0x95
 8000682:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000684:	463b      	mov	r3, r7
 8000686:	2106      	movs	r1, #6
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff7b 	bl	8000584 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800068e:	e002      	b.n	8000696 <SD_PowerOn+0x56>
	{
		cnt--;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3b01      	subs	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000696:	f7ff ff8f 	bl	80005b8 <SPI_RxByte>
 800069a:	4603      	mov	r3, r0
 800069c:	2b01      	cmp	r3, #1
 800069e:	d002      	beq.n	80006a6 <SD_PowerOn+0x66>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f4      	bne.n	8000690 <SD_PowerOn+0x50>
	}

	DESELECT();
 80006a6:	f7ff ff45 	bl	8000534 <DESELECT>
	SPI_TxByte(0XFF);
 80006aa:	20ff      	movs	r0, #255	@ 0xff
 80006ac:	f7ff ff50 	bl	8000550 <SPI_TxByte>

	PowerFlag = 1;
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <SD_PowerOn+0x80>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000095 	.word	0x20000095

080006c4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <SD_PowerOff+0x14>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000095 	.word	0x20000095

080006dc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <SD_CheckPower+0x14>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000095 	.word	0x20000095

080006f4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <SD_RxDataBlock+0x58>)
 8000700:	22c8      	movs	r2, #200	@ 0xc8
 8000702:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000704:	f7ff ff58 	bl	80005b8 <SPI_RxByte>
 8000708:	4603      	mov	r3, r0
 800070a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2bff      	cmp	r3, #255	@ 0xff
 8000710:	d103      	bne.n	800071a <SD_RxDataBlock+0x26>
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <SD_RxDataBlock+0x58>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f4      	bne.n	8000704 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	2bfe      	cmp	r3, #254	@ 0xfe
 800071e:	d001      	beq.n	8000724 <SD_RxDataBlock+0x30>
 8000720:	2300      	movs	r3, #0
 8000722:	e00f      	b.n	8000744 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	607a      	str	r2, [r7, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff60 	bl	80005f0 <SPI_RxBytePtr>
	} while(len--);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	603a      	str	r2, [r7, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f4      	bne.n	8000724 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800073a:	f7ff ff3d 	bl	80005b8 <SPI_RxByte>
	SPI_RxByte();
 800073e:	f7ff ff3b 	bl	80005b8 <SPI_RxByte>

	return TRUE;
 8000742:	2301      	movs	r3, #1
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000090 	.word	0x20000090

08000750 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000760:	f7ff ff54 	bl	800060c <SD_ReadyWait>
 8000764:	4603      	mov	r3, r0
 8000766:	2bff      	cmp	r3, #255	@ 0xff
 8000768:	d001      	beq.n	800076e <SD_TxDataBlock+0x1e>
 800076a:	2300      	movs	r3, #0
 800076c:	e02f      	b.n	80007ce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff feed 	bl	8000550 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2bfd      	cmp	r3, #253	@ 0xfd
 800077a:	d020      	beq.n	80007be <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800077c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff feff 	bl	8000584 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000786:	f7ff ff17 	bl	80005b8 <SPI_RxByte>
		SPI_RxByte();
 800078a:	f7ff ff15 	bl	80005b8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800078e:	e00b      	b.n	80007a8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000790:	f7ff ff12 	bl	80005b8 <SPI_RxByte>
 8000794:	4603      	mov	r3, r0
 8000796:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d006      	beq.n	80007b0 <SD_TxDataBlock+0x60>
			i++;
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	3301      	adds	r3, #1
 80007a6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	2b40      	cmp	r3, #64	@ 0x40
 80007ac:	d9f0      	bls.n	8000790 <SD_TxDataBlock+0x40>
 80007ae:	e000      	b.n	80007b2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80007b0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80007b2:	bf00      	nop
 80007b4:	f7ff ff00 	bl	80005b8 <SPI_RxByte>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d0fa      	beq.n	80007b4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	f003 031f 	and.w	r3, r3, #31
 80007c4:	2b05      	cmp	r3, #5
 80007c6:	d101      	bne.n	80007cc <SD_TxDataBlock+0x7c>
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <SD_TxDataBlock+0x7e>

	return FALSE;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	6039      	str	r1, [r7, #0]
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007e2:	f7ff ff13 	bl	800060c <SD_ReadyWait>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d001      	beq.n	80007f0 <SD_SendCmd+0x1a>
 80007ec:	23ff      	movs	r3, #255	@ 0xff
 80007ee:	e042      	b.n	8000876 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff feac 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	0e1b      	lsrs	r3, r3, #24
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fea6 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fea0 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe9a 	bl	8000550 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe95 	bl	8000550 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b40      	cmp	r3, #64	@ 0x40
 800082a:	d102      	bne.n	8000832 <SD_SendCmd+0x5c>
 800082c:	2395      	movs	r3, #149	@ 0x95
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e007      	b.n	8000842 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b48      	cmp	r3, #72	@ 0x48
 8000836:	d102      	bne.n	800083e <SD_SendCmd+0x68>
 8000838:	2387      	movs	r3, #135	@ 0x87
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e001      	b.n	8000842 <SD_SendCmd+0x6c>
	else crc = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fe83 	bl	8000550 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b4c      	cmp	r3, #76	@ 0x4c
 800084e:	d101      	bne.n	8000854 <SD_SendCmd+0x7e>
 8000850:	f7ff feb2 	bl	80005b8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000854:	230a      	movs	r3, #10
 8000856:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000858:	f7ff feae 	bl	80005b8 <SPI_RxByte>
 800085c:	4603      	mov	r3, r0
 800085e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000860:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000864:	2b00      	cmp	r3, #0
 8000866:	da05      	bge.n	8000874 <SD_SendCmd+0x9e>
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	3b01      	subs	r3, #1
 800086c:	73bb      	strb	r3, [r7, #14]
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1f1      	bne.n	8000858 <SD_SendCmd+0x82>

	return res;
 8000874:	7b7b      	ldrb	r3, [r7, #13]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SD_disk_initialize+0x14>
 8000890:	2301      	movs	r3, #1
 8000892:	e0d1      	b.n	8000a38 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000894:	4b6a      	ldr	r3, [pc, #424]	@ (8000a40 <SD_disk_initialize+0x1c0>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <SD_disk_initialize+0x2a>
 80008a2:	4b67      	ldr	r3, [pc, #412]	@ (8000a40 <SD_disk_initialize+0x1c0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	e0c6      	b.n	8000a38 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008aa:	f7ff fec9 	bl	8000640 <SD_PowerOn>

	/* slave select */
	SELECT();
 80008ae:	f7ff fe33 	bl	8000518 <SELECT>

	/* check disk type */
	type = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008b6:	2100      	movs	r1, #0
 80008b8:	2040      	movs	r0, #64	@ 0x40
 80008ba:	f7ff ff8c 	bl	80007d6 <SD_SendCmd>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	f040 80a1 	bne.w	8000a08 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a44 <SD_disk_initialize+0x1c4>)
 80008c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008cc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008ce:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008d2:	2048      	movs	r0, #72	@ 0x48
 80008d4:	f7ff ff7f 	bl	80007d6 <SD_SendCmd>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d155      	bne.n	800098a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e00c      	b.n	80008fe <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008e4:	7bfc      	ldrb	r4, [r7, #15]
 80008e6:	f7ff fe67 	bl	80005b8 <SPI_RxByte>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	f104 0310 	add.w	r3, r4, #16
 80008f2:	443b      	add	r3, r7
 80008f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	3301      	adds	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	2b03      	cmp	r3, #3
 8000902:	d9ef      	bls.n	80008e4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000904:	7abb      	ldrb	r3, [r7, #10]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d17e      	bne.n	8000a08 <SD_disk_initialize+0x188>
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	2baa      	cmp	r3, #170	@ 0xaa
 800090e:	d17b      	bne.n	8000a08 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000910:	2100      	movs	r1, #0
 8000912:	2077      	movs	r0, #119	@ 0x77
 8000914:	f7ff ff5f 	bl	80007d6 <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d807      	bhi.n	800092e <SD_disk_initialize+0xae>
 800091e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000922:	2069      	movs	r0, #105	@ 0x69
 8000924:	f7ff ff57 	bl	80007d6 <SD_SendCmd>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800092e:	4b45      	ldr	r3, [pc, #276]	@ (8000a44 <SD_disk_initialize+0x1c4>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1ec      	bne.n	8000910 <SD_disk_initialize+0x90>
 8000936:	e000      	b.n	800093a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000938:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800093a:	4b42      	ldr	r3, [pc, #264]	@ (8000a44 <SD_disk_initialize+0x1c4>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d062      	beq.n	8000a08 <SD_disk_initialize+0x188>
 8000942:	2100      	movs	r1, #0
 8000944:	207a      	movs	r0, #122	@ 0x7a
 8000946:	f7ff ff46 	bl	80007d6 <SD_SendCmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d15b      	bne.n	8000a08 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e00c      	b.n	8000970 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000956:	7bfc      	ldrb	r4, [r7, #15]
 8000958:	f7ff fe2e 	bl	80005b8 <SPI_RxByte>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	f104 0310 	add.w	r3, r4, #16
 8000964:	443b      	add	r3, r7
 8000966:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3301      	adds	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d9ef      	bls.n	8000956 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SD_disk_initialize+0x104>
 8000980:	230c      	movs	r3, #12
 8000982:	e000      	b.n	8000986 <SD_disk_initialize+0x106>
 8000984:	2304      	movs	r3, #4
 8000986:	73bb      	strb	r3, [r7, #14]
 8000988:	e03e      	b.n	8000a08 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800098a:	2100      	movs	r1, #0
 800098c:	2077      	movs	r0, #119	@ 0x77
 800098e:	f7ff ff22 	bl	80007d6 <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d808      	bhi.n	80009aa <SD_disk_initialize+0x12a>
 8000998:	2100      	movs	r1, #0
 800099a:	2069      	movs	r0, #105	@ 0x69
 800099c:	f7ff ff1b 	bl	80007d6 <SD_SendCmd>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d801      	bhi.n	80009aa <SD_disk_initialize+0x12a>
 80009a6:	2302      	movs	r3, #2
 80009a8:	e000      	b.n	80009ac <SD_disk_initialize+0x12c>
 80009aa:	2301      	movs	r3, #1
 80009ac:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d10e      	bne.n	80009d2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009b4:	2100      	movs	r1, #0
 80009b6:	2077      	movs	r0, #119	@ 0x77
 80009b8:	f7ff ff0d 	bl	80007d6 <SD_SendCmd>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d80e      	bhi.n	80009e0 <SD_disk_initialize+0x160>
 80009c2:	2100      	movs	r1, #0
 80009c4:	2069      	movs	r0, #105	@ 0x69
 80009c6:	f7ff ff06 	bl	80007d6 <SD_SendCmd>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <SD_disk_initialize+0x160>
 80009d0:	e00c      	b.n	80009ec <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d2:	2100      	movs	r1, #0
 80009d4:	2041      	movs	r0, #65	@ 0x41
 80009d6:	f7ff fefe 	bl	80007d6 <SD_SendCmd>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d004      	beq.n	80009ea <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <SD_disk_initialize+0x1c4>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e2      	bne.n	80009ae <SD_disk_initialize+0x12e>
 80009e8:	e000      	b.n	80009ec <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <SD_disk_initialize+0x1c4>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <SD_disk_initialize+0x184>
 80009f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f8:	2050      	movs	r0, #80	@ 0x50
 80009fa:	f7ff feec 	bl	80007d6 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SD_disk_initialize+0x188>
 8000a04:	2300      	movs	r3, #0
 8000a06:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a08:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <SD_disk_initialize+0x1c8>)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a0e:	f7ff fd91 	bl	8000534 <DESELECT>
	SPI_RxByte();
 8000a12:	f7ff fdd1 	bl	80005b8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d008      	beq.n	8000a2e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <SD_disk_initialize+0x1c0>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f023 0301 	bic.w	r3, r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <SD_disk_initialize+0x1c0>)
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e001      	b.n	8000a32 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a2e:	f7ff fe49 	bl	80006c4 <SD_PowerOff>
	}

	return Stat;
 8000a32:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <SD_disk_initialize+0x1c0>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000090 	.word	0x20000090
 8000a48:	20000094 	.word	0x20000094

08000a4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SD_disk_status+0x14>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e002      	b.n	8000a66 <SD_disk_status+0x1a>
	return Stat;
 8000a60:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <SD_disk_status+0x28>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b2db      	uxtb	r3, r3
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000

08000a78 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d102      	bne.n	8000a94 <SD_disk_read+0x1c>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <SD_disk_read+0x20>
 8000a94:	2304      	movs	r3, #4
 8000a96:	e051      	b.n	8000b3c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <SD_disk_read+0xcc>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SD_disk_read+0x32>
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	e048      	b.n	8000b3c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000aaa:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <SD_disk_read+0xd0>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_read+0x44>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	025b      	lsls	r3, r3, #9
 8000aba:	607b      	str	r3, [r7, #4]

	SELECT();
 8000abc:	f7ff fd2c 	bl	8000518 <SELECT>

	if (count == 1)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d111      	bne.n	8000aea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	2051      	movs	r0, #81	@ 0x51
 8000aca:	f7ff fe84 	bl	80007d6 <SD_SendCmd>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d129      	bne.n	8000b28 <SD_disk_read+0xb0>
 8000ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f7ff fe0b 	bl	80006f4 <SD_RxDataBlock>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d021      	beq.n	8000b28 <SD_disk_read+0xb0>
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	e01e      	b.n	8000b28 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2052      	movs	r0, #82	@ 0x52
 8000aee:	f7ff fe72 	bl	80007d6 <SD_SendCmd>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d117      	bne.n	8000b28 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000afc:	68b8      	ldr	r0, [r7, #8]
 8000afe:	f7ff fdf9 	bl	80006f4 <SD_RxDataBlock>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00a      	beq.n	8000b1e <SD_disk_read+0xa6>
				buff += 512;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000b0e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ed      	bne.n	8000af8 <SD_disk_read+0x80>
 8000b1c:	e000      	b.n	8000b20 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b1e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	204c      	movs	r0, #76	@ 0x4c
 8000b24:	f7ff fe57 	bl	80007d6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b28:	f7ff fd04 	bl	8000534 <DESELECT>
	SPI_RxByte();
 8000b2c:	f7ff fd44 	bl	80005b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf14      	ite	ne
 8000b36:	2301      	movne	r3, #1
 8000b38:	2300      	moveq	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000094 	.word	0x20000094

08000b4c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_write+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_write+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e06b      	b.n	8000c44 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	@ (8000c4c <SD_disk_write+0x100>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_write+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e062      	b.n	8000c44 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b7e:	4b33      	ldr	r3, [pc, #204]	@ (8000c4c <SD_disk_write+0x100>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SD_disk_write+0x44>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e059      	b.n	8000c44 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b90:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <SD_disk_write+0x104>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <SD_disk_write+0x56>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	025b      	lsls	r3, r3, #9
 8000ba0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ba2:	f7ff fcb9 	bl	8000518 <SELECT>

	if (count == 1)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d110      	bne.n	8000bce <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	2058      	movs	r0, #88	@ 0x58
 8000bb0:	f7ff fe11 	bl	80007d6 <SD_SendCmd>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13a      	bne.n	8000c30 <SD_disk_write+0xe4>
 8000bba:	21fe      	movs	r1, #254	@ 0xfe
 8000bbc:	68b8      	ldr	r0, [r7, #8]
 8000bbe:	f7ff fdc7 	bl	8000750 <SD_TxDataBlock>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d033      	beq.n	8000c30 <SD_disk_write+0xe4>
			count = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	e030      	b.n	8000c30 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <SD_disk_write+0x104>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2077      	movs	r0, #119	@ 0x77
 8000bde:	f7ff fdfa 	bl	80007d6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	2057      	movs	r0, #87	@ 0x57
 8000be6:	f7ff fdf6 	bl	80007d6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2059      	movs	r0, #89	@ 0x59
 8000bee:	f7ff fdf2 	bl	80007d6 <SD_SendCmd>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d11b      	bne.n	8000c30 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bf8:	21fc      	movs	r1, #252	@ 0xfc
 8000bfa:	68b8      	ldr	r0, [r7, #8]
 8000bfc:	f7ff fda8 	bl	8000750 <SD_TxDataBlock>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00a      	beq.n	8000c1c <SD_disk_write+0xd0>
				buff += 512;
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c0c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1ee      	bne.n	8000bf8 <SD_disk_write+0xac>
 8000c1a:	e000      	b.n	8000c1e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c1c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c1e:	21fd      	movs	r1, #253	@ 0xfd
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fd95 	bl	8000750 <SD_TxDataBlock>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d101      	bne.n	8000c30 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c30:	f7ff fc80 	bl	8000534 <DESELECT>
	SPI_RxByte();
 8000c34:	f7ff fcc0 	bl	80005b8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bf14      	ite	ne
 8000c3e:	2301      	movne	r3, #1
 8000c40:	2300      	moveq	r3, #0
 8000c42:	b2db      	uxtb	r3, r3
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000094 	.word	0x20000094

08000c54 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b08b      	sub	sp, #44	@ 0x2c
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	603a      	str	r2, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	460b      	mov	r3, r1
 8000c62:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SD_disk_ioctl+0x1e>
 8000c6e:	2304      	movs	r3, #4
 8000c70:	e113      	b.n	8000e9a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c78:	79bb      	ldrb	r3, [r7, #6]
 8000c7a:	2b05      	cmp	r3, #5
 8000c7c:	d124      	bne.n	8000cc8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d012      	beq.n	8000cac <SD_disk_ioctl+0x58>
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	dc1a      	bgt.n	8000cc0 <SD_disk_ioctl+0x6c>
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <SD_disk_ioctl+0x40>
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d006      	beq.n	8000ca0 <SD_disk_ioctl+0x4c>
 8000c92:	e015      	b.n	8000cc0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c94:	f7ff fd16 	bl	80006c4 <SD_PowerOff>
			res = RES_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c9e:	e0fa      	b.n	8000e96 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ca0:	f7ff fcce 	bl	8000640 <SD_PowerOn>
			res = RES_OK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000caa:	e0f4      	b.n	8000e96 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	1c5c      	adds	r4, r3, #1
 8000cb0:	f7ff fd14 	bl	80006dc <SD_CheckPower>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000cbe:	e0ea      	b.n	8000e96 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cc6:	e0e6      	b.n	8000e96 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cc8:	4b76      	ldr	r3, [pc, #472]	@ (8000ea4 <SD_disk_ioctl+0x250>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_ioctl+0x86>
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e0df      	b.n	8000e9a <SD_disk_ioctl+0x246>

		SELECT();
 8000cda:	f7ff fc1d 	bl	8000518 <SELECT>

		switch (ctrl)
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	2b0d      	cmp	r3, #13
 8000ce2:	f200 80c9 	bhi.w	8000e78 <SD_disk_ioctl+0x224>
 8000ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cec <SD_disk_ioctl+0x98>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000de3 	.word	0x08000de3
 8000cf0:	08000d25 	.word	0x08000d25
 8000cf4:	08000dd3 	.word	0x08000dd3
 8000cf8:	08000e79 	.word	0x08000e79
 8000cfc:	08000e79 	.word	0x08000e79
 8000d00:	08000e79 	.word	0x08000e79
 8000d04:	08000e79 	.word	0x08000e79
 8000d08:	08000e79 	.word	0x08000e79
 8000d0c:	08000e79 	.word	0x08000e79
 8000d10:	08000e79 	.word	0x08000e79
 8000d14:	08000e79 	.word	0x08000e79
 8000d18:	08000df5 	.word	0x08000df5
 8000d1c:	08000e19 	.word	0x08000e19
 8000d20:	08000e3d 	.word	0x08000e3d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d24:	2100      	movs	r1, #0
 8000d26:	2049      	movs	r0, #73	@ 0x49
 8000d28:	f7ff fd55 	bl	80007d6 <SD_SendCmd>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 80a6 	bne.w	8000e80 <SD_disk_ioctl+0x22c>
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fcda 	bl	80006f4 <SD_RxDataBlock>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 809c 	beq.w	8000e80 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d48:	7b3b      	ldrb	r3, [r7, #12]
 8000d4a:	099b      	lsrs	r3, r3, #6
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10d      	bne.n	8000d6e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d52:	7d7b      	ldrb	r3, [r7, #21]
 8000d54:	461a      	mov	r2, r3
 8000d56:	7d3b      	ldrb	r3, [r7, #20]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	3301      	adds	r3, #1
 8000d62:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d64:	8bfb      	ldrh	r3, [r7, #30]
 8000d66:	029a      	lsls	r2, r3, #10
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e02d      	b.n	8000dca <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d6e:	7c7b      	ldrb	r3, [r7, #17]
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	09db      	lsrs	r3, r3, #7
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	7d7b      	ldrb	r3, [r7, #21]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0306 	and.w	r3, r3, #6
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3302      	adds	r3, #2
 8000d92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d96:	7d3b      	ldrb	r3, [r7, #20]
 8000d98:	099b      	lsrs	r3, r3, #6
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	7cbb      	ldrb	r3, [r7, #18]
 8000daa:	029b      	lsls	r3, r3, #10
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4413      	add	r3, r2
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000dbc:	8bfa      	ldrh	r2, [r7, #30]
 8000dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dc2:	3b09      	subs	r3, #9
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dd0:	e056      	b.n	8000e80 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000de0:	e055      	b.n	8000e8e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000de2:	f7ff fc13 	bl	800060c <SD_ReadyWait>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2bff      	cmp	r3, #255	@ 0xff
 8000dea:	d14b      	bne.n	8000e84 <SD_disk_ioctl+0x230>
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000df2:	e047      	b.n	8000e84 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000df4:	2100      	movs	r1, #0
 8000df6:	2049      	movs	r0, #73	@ 0x49
 8000df8:	f7ff fced 	bl	80007d6 <SD_SendCmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d142      	bne.n	8000e88 <SD_disk_ioctl+0x234>
 8000e02:	2110      	movs	r1, #16
 8000e04:	6a38      	ldr	r0, [r7, #32]
 8000e06:	f7ff fc75 	bl	80006f4 <SD_RxDataBlock>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d03b      	beq.n	8000e88 <SD_disk_ioctl+0x234>
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e16:	e037      	b.n	8000e88 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e18:	2100      	movs	r1, #0
 8000e1a:	204a      	movs	r0, #74	@ 0x4a
 8000e1c:	f7ff fcdb 	bl	80007d6 <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d132      	bne.n	8000e8c <SD_disk_ioctl+0x238>
 8000e26:	2110      	movs	r1, #16
 8000e28:	6a38      	ldr	r0, [r7, #32]
 8000e2a:	f7ff fc63 	bl	80006f4 <SD_RxDataBlock>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d02b      	beq.n	8000e8c <SD_disk_ioctl+0x238>
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e3a:	e027      	b.n	8000e8c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	207a      	movs	r0, #122	@ 0x7a
 8000e40:	f7ff fcc9 	bl	80007d6 <SD_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d116      	bne.n	8000e78 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e50:	e00b      	b.n	8000e6a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e52:	6a3c      	ldr	r4, [r7, #32]
 8000e54:	1c63      	adds	r3, r4, #1
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	f7ff fbae 	bl	80005b8 <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e64:	3301      	adds	r3, #1
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d9ef      	bls.n	8000e52 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e7e:	e006      	b.n	8000e8e <SD_disk_ioctl+0x23a>
			break;
 8000e80:	bf00      	nop
 8000e82:	e004      	b.n	8000e8e <SD_disk_ioctl+0x23a>
			break;
 8000e84:	bf00      	nop
 8000e86:	e002      	b.n	8000e8e <SD_disk_ioctl+0x23a>
			break;
 8000e88:	bf00      	nop
 8000e8a:	e000      	b.n	8000e8e <SD_disk_ioctl+0x23a>
			break;
 8000e8c:	bf00      	nop
		}

		DESELECT();
 8000e8e:	f7ff fb51 	bl	8000534 <DESELECT>
		SPI_RxByte();
 8000e92:	f7ff fb91 	bl	80005b8 <SPI_RxByte>
	}

	return res;
 8000e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	372c      	adds	r7, #44	@ 0x2c
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0d6      	sub	sp, #344	@ 0x158
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fcbb 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f919 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f9d7 	bl	8001268 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000eba:	f000 f975 	bl	80011a8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 f9a9 	bl	8001214 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000ec2:	f003 faaf 	bl	8004424 <MX_FATFS_Init>


  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,rx_data, 1);  // Empezar la recepción por UART1 en modo interrupción
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4973      	ldr	r1, [pc, #460]	@ (8001098 <main+0x1f0>)
 8000eca:	4874      	ldr	r0, [pc, #464]	@ (800109c <main+0x1f4>)
 8000ecc:	f002 fb2f 	bl	800352e <HAL_UART_Receive_IT>
  HAL_Delay(500);
 8000ed0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed4:	f000 fd1a 	bl	800190c <HAL_Delay>

  // Montar SD
  fres = f_mount(&fs,"/" , 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4971      	ldr	r1, [pc, #452]	@ (80010a0 <main+0x1f8>)
 8000edc:	4871      	ldr	r0, [pc, #452]	@ (80010a4 <main+0x1fc>)
 8000ede:	f005 fed1 	bl	8006c84 <f_mount>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b70      	ldr	r3, [pc, #448]	@ (80010a8 <main+0x200>)
 8000ee8:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK){
 8000eea:	4b6f      	ldr	r3, [pc, #444]	@ (80010a8 <main+0x200>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d103      	bne.n	8000efa <main+0x52>
      transmit_uart("Micro SD is mounted successfully\n\n\n\n");
 8000ef2:	486e      	ldr	r0, [pc, #440]	@ (80010ac <main+0x204>)
 8000ef4:	f000 fa08 	bl	8001308 <transmit_uart>
 8000ef8:	e002      	b.n	8000f00 <main+0x58>
  } else {
      transmit_uart("Micro SD is mounted bad\n\n\n\n");
 8000efa:	486d      	ldr	r0, [pc, #436]	@ (80010b0 <main+0x208>)
 8000efc:	f000 fa04 	bl	8001308 <transmit_uart>
  }


  transmit_uart("******************Bienvenido/a*************************\n\n");
 8000f00:	486c      	ldr	r0, [pc, #432]	@ (80010b4 <main+0x20c>)
 8000f02:	f000 fa01 	bl	8001308 <transmit_uart>
  transmit_uart("Coloque A para leer la lista de archivos, B para desmostar unidad, D para montar unidad\n");
 8000f06:	486c      	ldr	r0, [pc, #432]	@ (80010b8 <main+0x210>)
 8000f08:	f000 f9fe 	bl	8001308 <transmit_uart>
  transmit_uart("Coloque C y el identificador del archivo para leer\n\n");
 8000f0c:	486b      	ldr	r0, [pc, #428]	@ (80010bc <main+0x214>)
 8000f0e:	f000 f9fb 	bl	8001308 <transmit_uart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(activa == 1){      //Si se desea leer la lista de archivos que tiene el archivo
 8000f12:	4b6b      	ldr	r3, [pc, #428]	@ (80010c0 <main+0x218>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d15e      	bne.n	8000fd8 <main+0x130>

		  DIR dir;
		     FILINFO fno;
		     file_count = 0;  // Reiniciar el contador de archivos
 8000f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80010c4 <main+0x21c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

		     FRESULT fres = f_opendir(&dir, "/");
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	495f      	ldr	r1, [pc, #380]	@ (80010a0 <main+0x1f8>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fc56 	bl	80077d6 <f_opendir>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
		     if (fres == FR_OK) {
 8000f30:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d12c      	bne.n	8000f92 <main+0xea>
		         while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] && file_count < MAX_FILES) {
 8000f38:	e012      	b.n	8000f60 <main+0xb8>
		             // Almacenar el nombre del archivo en la lista
		             strcpy(file_list[file_count], fno.fname);
 8000f3a:	4b62      	ldr	r3, [pc, #392]	@ (80010c4 <main+0x21c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2232      	movs	r2, #50	@ 0x32
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	4a60      	ldr	r2, [pc, #384]	@ (80010c8 <main+0x220>)
 8000f46:	441a      	add	r2, r3
 8000f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f4c:	3316      	adds	r3, #22
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f006 ffcb 	bl	8007eec <strcpy>
		             file_count++;
 8000f56:	4b5b      	ldr	r3, [pc, #364]	@ (80010c4 <main+0x21c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a59      	ldr	r2, [pc, #356]	@ (80010c4 <main+0x21c>)
 8000f5e:	6013      	str	r3, [r2, #0]
		         while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] && file_count < MAX_FILES) {
 8000f60:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 fccd 	bl	8007908 <f_readdir>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <main+0xe2>
 8000f74:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f7c:	7d9b      	ldrb	r3, [r3, #22]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <main+0xe2>
 8000f82:	4b50      	ldr	r3, [pc, #320]	@ (80010c4 <main+0x21c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b45      	cmp	r3, #69	@ 0x45
 8000f88:	ddd7      	ble.n	8000f3a <main+0x92>
		         }
		         f_closedir(&dir);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f006 fc95 	bl	80078bc <f_closedir>
		     }

		     // Enviar la lista de archivos por UART a Python
		     for (int i = 0; i < file_count; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000f98:	e011      	b.n	8000fbe <main+0x116>
		         transmit_uart(file_list[i]);
 8000f9a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000f9e:	2232      	movs	r2, #50	@ 0x32
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a48      	ldr	r2, [pc, #288]	@ (80010c8 <main+0x220>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f9ad 	bl	8001308 <transmit_uart>
		         transmit_uart("\n");
 8000fae:	4847      	ldr	r0, [pc, #284]	@ (80010cc <main+0x224>)
 8000fb0:	f000 f9aa 	bl	8001308 <transmit_uart>
		     for (int i = 0; i < file_count; i++) {
 8000fb4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000fbe:	4b41      	ldr	r3, [pc, #260]	@ (80010c4 <main+0x21c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dbe7      	blt.n	8000f9a <main+0xf2>
		     }

			 HAL_Delay(500);
 8000fca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fce:	f000 fc9d 	bl	800190c <HAL_Delay>
			 activa = 0;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <main+0x218>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	  }

	  if(activa == 2){         //Si se desea desmontar el archivo
 8000fd8:	4b39      	ldr	r3, [pc, #228]	@ (80010c0 <main+0x218>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d116      	bne.n	800100e <main+0x166>
		  // Desmontar SD
				  f_mount(NULL, "", 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	493b      	ldr	r1, [pc, #236]	@ (80010d0 <main+0x228>)
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f005 fe4d 	bl	8006c84 <f_mount>
				  if(fres == FR_OK){
 8000fea:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <main+0x200>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <main+0x152>
					  transmit_uart("Micro SD was unmounted\n");
 8000ff2:	4838      	ldr	r0, [pc, #224]	@ (80010d4 <main+0x22c>)
 8000ff4:	f000 f988 	bl	8001308 <transmit_uart>
 8000ff8:	e002      	b.n	8001000 <main+0x158>
				  } else {
					  transmit_uart("Micro SD was not unmounted\n");
 8000ffa:	4837      	ldr	r0, [pc, #220]	@ (80010d8 <main+0x230>)
 8000ffc:	f000 f984 	bl	8001308 <transmit_uart>
				  }

				 HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001004:	f000 fc82 	bl	800190c <HAL_Delay>
				 activa = 0;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <main+0x218>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	  }

	   if(activa == 3 && activa1 != 0){         //Si se desea abrir un archivo
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <main+0x218>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d112      	bne.n	800103c <main+0x194>
 8001016:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <main+0x234>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00e      	beq.n	800103c <main+0x194>


		   read_file_by_index(activa1);  // Leer el archivo correspondiente
 800101e:	4b2f      	ldr	r3, [pc, #188]	@ (80010dc <main+0x234>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fa32 	bl	800148c <read_file_by_index>
		      f_close(&fil);
		  } else {
		      transmit_uart("Error opening file\n");
		  }*/

		  HAL_Delay(500);
 8001028:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800102c:	f000 fc6e 	bl	800190c <HAL_Delay>
		  activa = 0;
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <main+0x218>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
		  activa1 = 0;
 8001036:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <main+0x234>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

	  }

	   if(activa == 4){      //Si se desea montar la SD
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <main+0x218>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d119      	bne.n	8001078 <main+0x1d0>
		   // Montar SD
		     fres = f_mount(&fs,"/" , 0);
 8001044:	2200      	movs	r2, #0
 8001046:	4916      	ldr	r1, [pc, #88]	@ (80010a0 <main+0x1f8>)
 8001048:	4816      	ldr	r0, [pc, #88]	@ (80010a4 <main+0x1fc>)
 800104a:	f005 fe1b 	bl	8006c84 <f_mount>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <main+0x200>)
 8001054:	701a      	strb	r2, [r3, #0]
		     if(fres == FR_OK){
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <main+0x200>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d103      	bne.n	8001066 <main+0x1be>
		         transmit_uart("Micro SD is mounted successfully\n\n\n\n");
 800105e:	4813      	ldr	r0, [pc, #76]	@ (80010ac <main+0x204>)
 8001060:	f000 f952 	bl	8001308 <transmit_uart>
 8001064:	e002      	b.n	800106c <main+0x1c4>
		     } else {
		         transmit_uart("Micro SD is mounted bad\n\n\n\n");
 8001066:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <main+0x208>)
 8001068:	f000 f94e 	bl	8001308 <transmit_uart>
		     }
		     activa = 0;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <main+0x218>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		    activa1 = 0;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <main+0x234>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]

	   }

	   if(activa == 5){   //Si se desea escribir un nuevo archivo en la SD
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <main+0x218>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b05      	cmp	r3, #5
 800107e:	f47f af48 	bne.w	8000f12 <main+0x6a>
		   receiving_file = 1;
 8001082:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <main+0x238>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
		   HAL_UART_Transmit(&huart2, (uint8_t*)"Ready to receive file\n", 22, HAL_MAX_DELAY);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	2216      	movs	r2, #22
 800108e:	4915      	ldr	r1, [pc, #84]	@ (80010e4 <main+0x23c>)
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <main+0x1f4>)
 8001092:	f002 f9c1 	bl	8003418 <HAL_UART_Transmit>
	  if(activa == 1){      //Si se desea leer la lista de archivos que tiene el archivo
 8001096:	e73c      	b.n	8000f12 <main+0x6a>
 8001098:	200021a4 	.word	0x200021a4
 800109c:	2000215c 	.word	0x2000215c
 80010a0:	08007f14 	.word	0x08007f14
 80010a4:	200000f0 	.word	0x200000f0
 80010a8:	20002158 	.word	0x20002158
 80010ac:	08007f18 	.word	0x08007f18
 80010b0:	08007f40 	.word	0x08007f40
 80010b4:	08007f5c 	.word	0x08007f5c
 80010b8:	08007f98 	.word	0x08007f98
 80010bc:	08007ff4 	.word	0x08007ff4
 80010c0:	200021a5 	.word	0x200021a5
 80010c4:	20002f54 	.word	0x20002f54
 80010c8:	200021a8 	.word	0x200021a8
 80010cc:	0800802c 	.word	0x0800802c
 80010d0:	08008030 	.word	0x08008030
 80010d4:	08008034 	.word	0x08008034
 80010d8:	0800804c 	.word	0x0800804c
 80010dc:	200021a6 	.word	0x200021a6
 80010e0:	20002f8c 	.word	0x20002f8c
 80010e4:	08008068 	.word	0x08008068

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2234      	movs	r2, #52	@ 0x34
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fec6 	bl	8007e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <SystemClock_Config+0xb8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <SystemClock_Config+0xb8>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <SystemClock_Config+0xb8>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <SystemClock_Config+0xbc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001134:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <SystemClock_Config+0xbc>)
 8001136:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <SystemClock_Config+0xbc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001154:	2300      	movs	r3, #0
 8001156:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fa1b 	bl	8002598 <HAL_RCC_OscConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001168:	f000 fa08 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116c:	230f      	movs	r3, #15
 800116e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f000 ff42 	bl	8002010 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001192:	f000 f9f3 	bl	800157c <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	@ 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40007000 	.word	0x40007000

080011a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_SPI1_Init+0x64>)
 80011ae:	4a18      	ldr	r2, [pc, #96]	@ (8001210 <MX_SPI1_Init+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_SPI1_Init+0x64>)
 80011b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_SPI1_Init+0x64>)
 80011d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_SPI1_Init+0x64>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_SPI1_Init+0x64>)
 80011fa:	f001 fc6b 	bl	8002ad4 <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 f9ba 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000098 	.word	0x20000098
 8001210:	40013000 	.word	0x40013000

08001214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <MX_USART2_UART_Init+0x50>)
 800121c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001220:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_USART2_UART_Init+0x4c>)
 800124c:	f002 f894 	bl	8003378 <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001256:	f000 f991 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000215c 	.word	0x2000215c
 8001264:	40004400 	.word	0x40004400

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_GPIO_Init+0x98>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a1e      	ldr	r2, [pc, #120]	@ (8001300 <MX_GPIO_Init+0x98>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_GPIO_Init+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <MX_GPIO_Init+0x98>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <MX_GPIO_Init+0x98>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <MX_GPIO_Init+0x98>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_GPIO_Init+0x98>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <MX_GPIO_Init+0x98>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_GPIO_Init+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2140      	movs	r1, #64	@ 0x40
 80012d6:	480b      	ldr	r0, [pc, #44]	@ (8001304 <MX_GPIO_Init+0x9c>)
 80012d8:	f000 fe80 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80012dc:	2340      	movs	r3, #64	@ 0x40
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_GPIO_Init+0x9c>)
 80012f4:	f000 fcde 	bl	8001cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020400 	.word	0x40020400

08001308 <transmit_uart>:

/* USER CODE BEGIN 4 */
void transmit_uart(char *data) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7fe ff81 	bl	8000218 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4803      	ldr	r0, [pc, #12]	@ (8001330 <transmit_uart+0x28>)
 8001322:	f002 f879 	bl	8003418 <HAL_UART_Transmit>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000215c 	.word	0x2000215c

08001334 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

	 if (huart->Instance == USART2) // Verificar si la interrupción es de UART2
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a45      	ldr	r2, [pc, #276]	@ (8001458 <HAL_UART_RxCpltCallback+0x124>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d17e      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x110>
	  {

		 if(activa != 5){         //Activar o desactivar funcionamiento normal
 8001346:	4b45      	ldr	r3, [pc, #276]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d02f      	beq.n	80013ae <HAL_UART_RxCpltCallback+0x7a>

			 if (rx_data[0] == 'A'){
 800134e:	4b44      	ldr	r3, [pc, #272]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b41      	cmp	r3, #65	@ 0x41
 8001354:	d103      	bne.n	800135e <HAL_UART_RxCpltCallback+0x2a>
				 activa = 1;
 8001356:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e072      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>
			 }

			 else if (rx_data[0] == 'B'){
 800135e:	4b40      	ldr	r3, [pc, #256]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b42      	cmp	r3, #66	@ 0x42
 8001364:	d103      	bne.n	800136e <HAL_UART_RxCpltCallback+0x3a>
				 activa = 2;
 8001366:	4b3d      	ldr	r3, [pc, #244]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001368:	2202      	movs	r2, #2
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e06a      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>

			 }

			 else if (rx_data[0] == 'C'){
 800136e:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b43      	cmp	r3, #67	@ 0x43
 8001374:	d103      	bne.n	800137e <HAL_UART_RxCpltCallback+0x4a>
				 activa = 3;
 8001376:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001378:	2203      	movs	r2, #3
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e062      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>

					}

			 else if (rx_data[0] == 'D'){
 800137e:	4b38      	ldr	r3, [pc, #224]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b44      	cmp	r3, #68	@ 0x44
 8001384:	d103      	bne.n	800138e <HAL_UART_RxCpltCallback+0x5a>
					activa = 4;
 8001386:	4b35      	ldr	r3, [pc, #212]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001388:	2204      	movs	r2, #4
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e05a      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>

				}

			 else if (rx_data[0] == 'E'){
 800138e:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b45      	cmp	r3, #69	@ 0x45
 8001394:	d103      	bne.n	800139e <HAL_UART_RxCpltCallback+0x6a>
					activa = 5;
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001398:	2205      	movs	r2, #5
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	e052      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>


			 }

			 else {
				 activa1 = atoi((char*)rx_data);  // Usa un cast a char*
 800139e:	4830      	ldr	r0, [pc, #192]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 80013a0:	f006 fcea 	bl	8007d78 <atoi>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <HAL_UART_RxCpltCallback+0x130>)
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e04a      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>
			 }
		 }



		 else  if(activa == 5){
 80013ae:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d146      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x110>


			 // Recibir el nombre del archivo
			  if (receiving_file == 1) {
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <HAL_UART_RxCpltCallback+0x134>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d123      	bne.n	8001406 <HAL_UART_RxCpltCallback+0xd2>
				 strcpy(file_name, rx_data);  // Guardar el nombre del archivo
 80013be:	4928      	ldr	r1, [pc, #160]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 80013c0:	482a      	ldr	r0, [pc, #168]	@ (800146c <HAL_UART_RxCpltCallback+0x138>)
 80013c2:	f006 fd93 	bl	8007eec <strcpy>
				 fres = f_open(&fil, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 80013c6:	220a      	movs	r2, #10
 80013c8:	4928      	ldr	r1, [pc, #160]	@ (800146c <HAL_UART_RxCpltCallback+0x138>)
 80013ca:	4829      	ldr	r0, [pc, #164]	@ (8001470 <HAL_UART_RxCpltCallback+0x13c>)
 80013cc:	f005 fca0 	bl	8006d10 <f_open>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b27      	ldr	r3, [pc, #156]	@ (8001474 <HAL_UART_RxCpltCallback+0x140>)
 80013d6:	701a      	strb	r2, [r3, #0]
				 if (fres == FR_OK) {
 80013d8:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <HAL_UART_RxCpltCallback+0x140>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10a      	bne.n	80013f6 <HAL_UART_RxCpltCallback+0xc2>
					 HAL_UART_Transmit(&huart2, (uint8_t*)"File opened\n", 12, HAL_MAX_DELAY);
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	220c      	movs	r2, #12
 80013e6:	4924      	ldr	r1, [pc, #144]	@ (8001478 <HAL_UART_RxCpltCallback+0x144>)
 80013e8:	4824      	ldr	r0, [pc, #144]	@ (800147c <HAL_UART_RxCpltCallback+0x148>)
 80013ea:	f002 f815 	bl	8003418 <HAL_UART_Transmit>
					 receiving_file = 2;  // Cambiar el estado para empezar a recibir contenido
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <HAL_UART_RxCpltCallback+0x134>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e026      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>
				 } else {
					 HAL_UART_Transmit(&huart2, (uint8_t*)"Error opening file\n", 20, HAL_MAX_DELAY);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	2214      	movs	r2, #20
 80013fc:	4920      	ldr	r1, [pc, #128]	@ (8001480 <HAL_UART_RxCpltCallback+0x14c>)
 80013fe:	481f      	ldr	r0, [pc, #124]	@ (800147c <HAL_UART_RxCpltCallback+0x148>)
 8001400:	f002 f80a 	bl	8003418 <HAL_UART_Transmit>
 8001404:	e01e      	b.n	8001444 <HAL_UART_RxCpltCallback+0x110>
				 }
			 }
			 // Recibir y escribir contenido en la SD
			 else if (receiving_file == 2) {
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_UART_RxCpltCallback+0x134>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d11a      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x110>
				 if (strcmp(rx_data, "EOF") == 0) {
 800140e:	491d      	ldr	r1, [pc, #116]	@ (8001484 <HAL_UART_RxCpltCallback+0x150>)
 8001410:	4813      	ldr	r0, [pc, #76]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001412:	f7fe fef7 	bl	8000204 <strcmp>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10d      	bne.n	8001438 <HAL_UART_RxCpltCallback+0x104>
					 // Final de archivo
					 f_close(&fil);
 800141c:	4814      	ldr	r0, [pc, #80]	@ (8001470 <HAL_UART_RxCpltCallback+0x13c>)
 800141e:	f006 f9b0 	bl	8007782 <f_close>
					 HAL_UART_Transmit(&huart2, (uint8_t*)"File saved and closed\n", 23, HAL_MAX_DELAY);
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	2217      	movs	r2, #23
 8001428:	4917      	ldr	r1, [pc, #92]	@ (8001488 <HAL_UART_RxCpltCallback+0x154>)
 800142a:	4814      	ldr	r0, [pc, #80]	@ (800147c <HAL_UART_RxCpltCallback+0x148>)
 800142c:	f001 fff4 	bl	8003418 <HAL_UART_Transmit>
					 receiving_file = 0;  // Terminar recepción de archivo
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_UART_RxCpltCallback+0x134>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e002      	b.n	800143e <HAL_UART_RxCpltCallback+0x10a>
				 } else {
					 // Escribir en el archivo
					 write_to_sd(rx_data);
 8001438:	4809      	ldr	r0, [pc, #36]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 800143a:	f000 f88b 	bl	8001554 <write_to_sd>
				 }
				 activa = 0;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <HAL_UART_RxCpltCallback+0x128>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
	  }



	 // Volver a habilitar la recepción por UART2
	    HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001444:	2201      	movs	r2, #1
 8001446:	4906      	ldr	r1, [pc, #24]	@ (8001460 <HAL_UART_RxCpltCallback+0x12c>)
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <HAL_UART_RxCpltCallback+0x148>)
 800144a:	f002 f870 	bl	800352e <HAL_UART_Receive_IT>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40004400 	.word	0x40004400
 800145c:	200021a5 	.word	0x200021a5
 8001460:	200021a4 	.word	0x200021a4
 8001464:	200021a6 	.word	0x200021a6
 8001468:	20002f8c 	.word	0x20002f8c
 800146c:	20002f58 	.word	0x20002f58
 8001470:	20001128 	.word	0x20001128
 8001474:	20002158 	.word	0x20002158
 8001478:	08008080 	.word	0x08008080
 800147c:	2000215c 	.word	0x2000215c
 8001480:	08008090 	.word	0x08008090
 8001484:	080080a4 	.word	0x080080a4
 8001488:	080080a8 	.word	0x080080a8

0800148c <read_file_by_index>:


// Función para leer el archivo basado en el índice
void read_file_by_index(int index) {
 800148c:	b580      	push	{r7, lr}
 800148e:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
 8001492:	af00      	add	r7, sp, #0
 8001494:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001498:	f843 0c9c 	str.w	r0, [r3, #-156]
    if (index < file_count && index >= 0) {
 800149c:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <read_file_by_index+0xb8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80014a4:	f852 2c9c 	ldr.w	r2, [r2, #-156]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	da41      	bge.n	8001530 <read_file_by_index+0xa4>
 80014ac:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014b0:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db3b      	blt.n	8001530 <read_file_by_index+0xa4>
        FIL fil;
        FRESULT fres = f_open(&fil, file_list[index], FA_READ);
 80014b8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80014bc:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80014c0:	2232      	movs	r2, #50	@ 0x32
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4a20      	ldr	r2, [pc, #128]	@ (8001548 <read_file_by_index+0xbc>)
 80014c8:	1899      	adds	r1, r3, r2
 80014ca:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014ce:	3b14      	subs	r3, #20
 80014d0:	2201      	movs	r2, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fc1c 	bl	8006d10 <f_open>
 80014d8:	4603      	mov	r3, r0
 80014da:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 80014de:	f102 021f 	add.w	r2, r2, #31
 80014e2:	7013      	strb	r3, [r2, #0]
        if (fres == FR_OK) {
 80014e4:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 80014e8:	f103 031f 	add.w	r3, r3, #31
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d11a      	bne.n	8001528 <read_file_by_index+0x9c>
            char line[100];
            while (f_gets(line, sizeof(line), &fil)) {
 80014f2:	e005      	b.n	8001500 <read_file_by_index+0x74>
                transmit_uart(line);
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	3b18      	subs	r3, #24
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff04 	bl	8001308 <transmit_uart>
            while (f_gets(line, sizeof(line), &fil)) {
 8001500:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8001504:	3a14      	subs	r2, #20
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	3b18      	subs	r3, #24
 800150c:	2164      	movs	r1, #100	@ 0x64
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fa37 	bl	8007982 <f_gets>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ec      	bne.n	80014f4 <read_file_by_index+0x68>
            }
            f_close(&fil);
 800151a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800151e:	3b14      	subs	r3, #20
 8001520:	4618      	mov	r0, r3
 8001522:	f006 f92e 	bl	8007782 <f_close>
    if (index < file_count && index >= 0) {
 8001526:	e007      	b.n	8001538 <read_file_by_index+0xac>
        } else {
            transmit_uart("Error opening file\n");
 8001528:	4808      	ldr	r0, [pc, #32]	@ (800154c <read_file_by_index+0xc0>)
 800152a:	f7ff feed 	bl	8001308 <transmit_uart>
    if (index < file_count && index >= 0) {
 800152e:	e003      	b.n	8001538 <read_file_by_index+0xac>
        }
    } else {
        transmit_uart("Invalid file index\n");
 8001530:	4807      	ldr	r0, [pc, #28]	@ (8001550 <read_file_by_index+0xc4>)
 8001532:	f7ff fee9 	bl	8001308 <transmit_uart>
    }



}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	f507 5785 	add.w	r7, r7, #4256	@ 0x10a0
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20002f54 	.word	0x20002f54
 8001548:	200021a8 	.word	0x200021a8
 800154c:	08008090 	.word	0x08008090
 8001550:	080080c0 	.word	0x080080c0

08001554 <write_to_sd>:



// Función para escribir el archivo en la SD
void write_to_sd(char *data) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    fres = f_puts(data, &fil);
 800155c:	4905      	ldr	r1, [pc, #20]	@ (8001574 <write_to_sd+0x20>)
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f006 fac4 	bl	8007aec <f_puts>
 8001564:	4603      	mov	r3, r0
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b03      	ldr	r3, [pc, #12]	@ (8001578 <write_to_sd+0x24>)
 800156a:	701a      	strb	r2, [r3, #0]
    if (fres < 0) {
        // Error escribiendo en la SD
        HAL_UART_Transmit(&huart2, (uint8_t*)"Error writing to file\n", 22, HAL_MAX_DELAY);
    }
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20001128 	.word	0x20001128
 8001578:	20002158 	.word	0x20002158

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <Error_Handler+0x8>

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800159c:	6453      	str	r3, [r2, #68]	@ 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_SPI_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12b      	bne.n	8001652 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <HAL_SPI_MspInit+0x88>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0x88>)
 8001604:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_SPI_MspInit+0x88>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_SPI_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <HAL_SPI_MspInit+0x88>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <HAL_SPI_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001632:	23e0      	movs	r3, #224	@ 0xe0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001642:	2305      	movs	r3, #5
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <HAL_SPI_MspInit+0x8c>)
 800164e:	f000 fb31 	bl	8001cb4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001652:	bf00      	nop
 8001654:	3728      	adds	r7, #40	@ 0x28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40013000 	.word	0x40013000
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	@ 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <HAL_UART_MspInit+0x94>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d133      	bne.n	80016f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <HAL_UART_MspInit+0x98>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a1b      	ldr	r2, [pc, #108]	@ (8001700 <HAL_UART_MspInit+0x98>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <HAL_UART_MspInit+0x98>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_UART_MspInit+0x98>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <HAL_UART_MspInit+0x98>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_UART_MspInit+0x98>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c2:	230c      	movs	r3, #12
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d2:	2307      	movs	r3, #7
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <HAL_UART_MspInit+0x9c>)
 80016de:	f000 fae9 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2026      	movs	r0, #38	@ 0x26
 80016e8:	f000 fa0f 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ec:	2026      	movs	r0, #38	@ 0x26
 80016ee:	f000 fa28 	bl	8001b42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	@ 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004400 	.word	0x40004400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020000 	.word	0x40020000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <NMI_Handler+0x4>

08001710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <MemManage_Handler+0x4>

08001720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <UsageFault_Handler+0x4>

08001730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 >0){
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <SysTick_Handler+0x38>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <SysTick_Handler+0x18>
		Timer1--;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <SysTick_Handler+0x38>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <SysTick_Handler+0x38>)
 8001772:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 >0){
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <SysTick_Handler+0x3c>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <SysTick_Handler+0x2c>
		Timer2--;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <SysTick_Handler+0x3c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SysTick_Handler+0x3c>)
 8001786:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f8a0 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800178c:	f000 f9f3 	bl	8001b76 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000090 	.word	0x20000090
 8001798:	20000092 	.word	0x20000092

0800179c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <USART2_IRQHandler+0x10>)
 80017a2:	f001 fee9 	bl	8003578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000215c 	.word	0x2000215c

080017b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	@ (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800180c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017d8:	f7ff ffea 	bl	80017b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	@ (8001814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001802:	f006 fb4f 	bl	8007ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff fb4f 	bl	8000ea8 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001818:	08008688 	.word	0x08008688
  ldr r2, =_sbss
 800181c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001820:	20003308 	.word	0x20003308

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	@ (8001868 <HAL_Init+0x40>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001838:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <HAL_Init+0x40>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	@ (8001868 <HAL_Init+0x40>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f94f 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f808 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff fe94 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_InitTick+0x54>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x58>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f967 	bl	8001b5e <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00e      	b.n	80018b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d80a      	bhi.n	80018b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 f92f 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	4a06      	ldr	r2, [pc, #24]	@ (80018c8 <HAL_InitTick+0x5c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000004 	.word	0x20000004
 80018c4:	2000000c 	.word	0x2000000c
 80018c8:	20000008 	.word	0x20000008

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20002f90 	.word	0x20002f90

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20002f90 	.word	0x20002f90

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000000c 	.word	0x2000000c

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	@ (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff29 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff3e 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff8e 	bl	8001a48 <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff31 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001b7a:	f000 f802 	bl	8001b82 <HAL_SYSTICK_Callback>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b9e:	f7ff fea9 	bl	80018f4 <HAL_GetTick>
 8001ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d008      	beq.n	8001bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	@ 0x80
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e052      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0216 	bic.w	r2, r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <HAL_DMA_Abort+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0208 	bic.w	r2, r2, #8
 8001c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c12:	e013      	b.n	8001c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c14:	f7ff fe6e 	bl	80018f4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b05      	cmp	r3, #5
 8001c20:	d90c      	bls.n	8001c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2220      	movs	r2, #32
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e015      	b.n	8001c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1e4      	bne.n	8001c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	223f      	movs	r2, #63	@ 0x3f
 8001c50:	409a      	lsls	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2280      	movs	r2, #128	@ 0x80
 8001c88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00c      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	@ 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e165      	b.n	8001f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8154 	bne.w	8001f96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d005      	beq.n	8001d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d130      	bne.n	8001d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d017      	beq.n	8001da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80ae 	beq.w	8001f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <HAL_GPIO_Init+0x300>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb4 <HAL_GPIO_Init+0x300>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb4 <HAL_GPIO_Init+0x300>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e56:	4a58      	ldr	r2, [pc, #352]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fbc <HAL_GPIO_Init+0x308>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d025      	beq.n	8001ece <HAL_GPIO_Init+0x21a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4e      	ldr	r2, [pc, #312]	@ (8001fc0 <HAL_GPIO_Init+0x30c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x216>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <HAL_GPIO_Init+0x310>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x212>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_GPIO_Init+0x314>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x20e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fcc <HAL_GPIO_Init+0x318>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x20a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd0 <HAL_GPIO_Init+0x31c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x206>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a49      	ldr	r2, [pc, #292]	@ (8001fd4 <HAL_GPIO_Init+0x320>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x202>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e00c      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e00a      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001eba:	2305      	movs	r3, #5
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x21c>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	69fa      	ldr	r2, [r7, #28]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee0:	4935      	ldr	r1, [pc, #212]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eee:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f12:	4a31      	ldr	r2, [pc, #196]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f18:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f3c:	4a26      	ldr	r2, [pc, #152]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f42:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f66:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f90:	4a11      	ldr	r2, [pc, #68]	@ (8001fd8 <HAL_GPIO_Init+0x324>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	2b0f      	cmp	r3, #15
 8001fa0:	f67f ae96 	bls.w	8001cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40013800 	.word	0x40013800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40021400 	.word	0x40021400
 8001fd4:	40021800 	.word	0x40021800
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff8:	e003      	b.n	8002002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	619a      	str	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0cc      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002024:	4b68      	ldr	r3, [pc, #416]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d90c      	bls.n	800204c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b65      	ldr	r3, [pc, #404]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a58      	ldr	r2, [pc, #352]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800206e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a52      	ldr	r2, [pc, #328]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d044      	beq.n	8002130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d119      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	4b3f      	ldr	r3, [pc, #252]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e067      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ee:	4b37      	ldr	r3, [pc, #220]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f023 0203 	bic.w	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4934      	ldr	r1, [pc, #208]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff fbf8 	bl	80018f4 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7ff fbf4 	bl	80018f4 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e04f      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 020c 	and.w	r2, r3, #12
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	429a      	cmp	r2, r3
 800212e:	d1eb      	bne.n	8002108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d20c      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f855 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	@ (80021d0 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fb58 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	0800811c 	.word	0x0800811c
 80021d4:	20000004 	.word	0x20000004
 80021d8:	20000008 	.word	0x20000008

080021dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f8:	f7ff fff0 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	0a9b      	lsrs	r3, r3, #10
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4903      	ldr	r1, [pc, #12]	@ (8002218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	0800812c 	.word	0x0800812c

0800221c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002220:	f7ff ffdc 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0b5b      	lsrs	r3, r3, #13
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4903      	ldr	r1, [pc, #12]	@ (8002240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	0800812c 	.word	0x0800812c

08002244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002248:	b0a6      	sub	sp, #152	@ 0x98
 800224a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226a:	4bc8      	ldr	r3, [pc, #800]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b0c      	cmp	r3, #12
 8002274:	f200 817e 	bhi.w	8002574 <HAL_RCC_GetSysClockFreq+0x330>
 8002278:	a201      	add	r2, pc, #4	@ (adr r2, 8002280 <HAL_RCC_GetSysClockFreq+0x3c>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	080022b5 	.word	0x080022b5
 8002284:	08002575 	.word	0x08002575
 8002288:	08002575 	.word	0x08002575
 800228c:	08002575 	.word	0x08002575
 8002290:	080022bd 	.word	0x080022bd
 8002294:	08002575 	.word	0x08002575
 8002298:	08002575 	.word	0x08002575
 800229c:	08002575 	.word	0x08002575
 80022a0:	080022c5 	.word	0x080022c5
 80022a4:	08002575 	.word	0x08002575
 80022a8:	08002575 	.word	0x08002575
 80022ac:	08002575 	.word	0x08002575
 80022b0:	0800242f 	.word	0x0800242f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4bb6      	ldr	r3, [pc, #728]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x34c>)
 80022b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80022ba:	e15f      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022bc:	4bb5      	ldr	r3, [pc, #724]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x350>)
 80022be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80022c2:	e15b      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c4:	4bb1      	ldr	r3, [pc, #708]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d0:	4bae      	ldr	r3, [pc, #696]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d031      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022dc:	4bab      	ldr	r3, [pc, #684]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	2200      	movs	r2, #0
 80022e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80022f0:	2300      	movs	r3, #0
 80022f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80022f4:	4ba7      	ldr	r3, [pc, #668]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x350>)
 80022f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022fa:	462a      	mov	r2, r5
 80022fc:	fb03 f202 	mul.w	r2, r3, r2
 8002300:	2300      	movs	r3, #0
 8002302:	4621      	mov	r1, r4
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	4aa2      	ldr	r2, [pc, #648]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x350>)
 800230c:	4621      	mov	r1, r4
 800230e:	fba1 1202 	umull	r1, r2, r1, r2
 8002312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002314:	460a      	mov	r2, r1
 8002316:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002318:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800231a:	4413      	add	r3, r2
 800231c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800231e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002322:	2200      	movs	r2, #0
 8002324:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002326:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002328:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800232c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002330:	f7fd ff7a 	bl	8000228 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4613      	mov	r3, r2
 800233a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800233e:	e064      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002340:	4b92      	ldr	r3, [pc, #584]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	2200      	movs	r2, #0
 8002348:	653b      	str	r3, [r7, #80]	@ 0x50
 800234a:	657a      	str	r2, [r7, #84]	@ 0x54
 800234c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800234e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002354:	2300      	movs	r3, #0
 8002356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002358:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800235c:	4622      	mov	r2, r4
 800235e:	462b      	mov	r3, r5
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	0159      	lsls	r1, r3, #5
 800236a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800236e:	0150      	lsls	r0, r2, #5
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4621      	mov	r1, r4
 8002376:	1a51      	subs	r1, r2, r1
 8002378:	6139      	str	r1, [r7, #16]
 800237a:	4629      	mov	r1, r5
 800237c:	eb63 0301 	sbc.w	r3, r3, r1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800238e:	4659      	mov	r1, fp
 8002390:	018b      	lsls	r3, r1, #6
 8002392:	4651      	mov	r1, sl
 8002394:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002398:	4651      	mov	r1, sl
 800239a:	018a      	lsls	r2, r1, #6
 800239c:	4651      	mov	r1, sl
 800239e:	ebb2 0801 	subs.w	r8, r2, r1
 80023a2:	4659      	mov	r1, fp
 80023a4:	eb63 0901 	sbc.w	r9, r3, r1
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023bc:	4690      	mov	r8, r2
 80023be:	4699      	mov	r9, r3
 80023c0:	4623      	mov	r3, r4
 80023c2:	eb18 0303 	adds.w	r3, r8, r3
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	462b      	mov	r3, r5
 80023ca:	eb49 0303 	adc.w	r3, r9, r3
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023dc:	4629      	mov	r1, r5
 80023de:	028b      	lsls	r3, r1, #10
 80023e0:	4621      	mov	r1, r4
 80023e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e6:	4621      	mov	r1, r4
 80023e8:	028a      	lsls	r2, r1, #10
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f2:	2200      	movs	r2, #0
 80023f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80023f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80023f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023fc:	f7fd ff14 	bl	8000228 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800240a:	4b60      	ldr	r3, [pc, #384]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	3301      	adds	r3, #1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800241c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002420:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800242c:	e0a6      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800242e:	4b57      	ldr	r3, [pc, #348]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243a:	4b54      	ldr	r3, [pc, #336]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02a      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b51      	ldr	r3, [pc, #324]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	2200      	movs	r2, #0
 800244e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002454:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002458:	2100      	movs	r1, #0
 800245a:	4b4e      	ldr	r3, [pc, #312]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x350>)
 800245c:	fb03 f201 	mul.w	r2, r3, r1
 8002460:	2300      	movs	r3, #0
 8002462:	fb00 f303 	mul.w	r3, r0, r3
 8002466:	4413      	add	r3, r2
 8002468:	4a4a      	ldr	r2, [pc, #296]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x350>)
 800246a:	fba0 1202 	umull	r1, r2, r0, r2
 800246e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002470:	460a      	mov	r2, r1
 8002472:	673a      	str	r2, [r7, #112]	@ 0x70
 8002474:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002476:	4413      	add	r3, r2
 8002478:	677b      	str	r3, [r7, #116]	@ 0x74
 800247a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800247e:	2200      	movs	r2, #0
 8002480:	633b      	str	r3, [r7, #48]	@ 0x30
 8002482:	637a      	str	r2, [r7, #52]	@ 0x34
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002488:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800248c:	f7fd fecc 	bl	8000228 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4613      	mov	r3, r2
 8002496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800249a:	e05b      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249c:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	2200      	movs	r2, #0
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0159      	lsls	r1, r3, #5
 80024c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ca:	0150      	lsls	r0, r2, #5
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4641      	mov	r1, r8
 80024d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f0:	ebb2 040a 	subs.w	r4, r2, sl
 80024f4:	eb63 050b 	sbc.w	r5, r3, fp
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	464b      	mov	r3, r9
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800253c:	2200      	movs	r2, #0
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	61fa      	str	r2, [r7, #28]
 8002542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002546:	f7fd fe6f 	bl	8000228 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4613      	mov	r3, r2
 8002550:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002554:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <HAL_RCC_GetSysClockFreq+0x348>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0f1b      	lsrs	r3, r3, #28
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002562:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002566:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002572:	e003      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800257a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002580:	4618      	mov	r0, r3
 8002582:	3798      	adds	r7, #152	@ 0x98
 8002584:	46bd      	mov	sp, r7
 8002586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400
 8002594:	017d7840 	.word	0x017d7840

08002598 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e28d      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8083 	beq.w	80026be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025b8:	4b94      	ldr	r3, [pc, #592]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d019      	beq.n	80025f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025c4:	4b91      	ldr	r3, [pc, #580]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025d0:	4b8e      	ldr	r3, [pc, #568]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025dc:	d00c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025de:	4b8b      	ldr	r3, [pc, #556]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d112      	bne.n	8002610 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ea:	4b88      	ldr	r3, [pc, #544]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f6:	d10b      	bne.n	8002610 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	4b84      	ldr	r3, [pc, #528]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d05b      	beq.n	80026bc <HAL_RCC_OscConfig+0x124>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d157      	bne.n	80026bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e25a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x90>
 800261a:	4b7c      	ldr	r3, [pc, #496]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7b      	ldr	r2, [pc, #492]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xcc>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xb4>
 8002632:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b73      	ldr	r3, [pc, #460]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a72      	ldr	r2, [pc, #456]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xcc>
 800264c:	4b6f      	ldr	r3, [pc, #444]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6e      	ldr	r2, [pc, #440]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b6c      	ldr	r3, [pc, #432]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6b      	ldr	r2, [pc, #428]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7ff f942 	bl	80018f4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff f93e 	bl	80018f4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e21f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b61      	ldr	r3, [pc, #388]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xdc>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7ff f92e 	bl	80018f4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff f92a 	bl	80018f4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e20b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	4b57      	ldr	r3, [pc, #348]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x104>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d06f      	beq.n	80027aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ca:	4b50      	ldr	r3, [pc, #320]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d017      	beq.n	8002706 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026d6:	4b4d      	ldr	r3, [pc, #308]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
        || \
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026e2:	4b4a      	ldr	r3, [pc, #296]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b44      	ldr	r3, [pc, #272]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b41      	ldr	r3, [pc, #260]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x186>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1d3      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4937      	ldr	r1, [pc, #220]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b34      	ldr	r3, [pc, #208]	@ (8002810 <HAL_RCC_OscConfig+0x278>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff f8d7 	bl	80018f4 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff f8d3 	bl	80018f4 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1b4      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b28      	ldr	r3, [pc, #160]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4925      	ldr	r1, [pc, #148]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <HAL_RCC_OscConfig+0x278>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff f8b6 	bl	80018f4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff f8b2 	bl	80018f4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e193      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d036      	beq.n	8002824 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x27c>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7ff f896 	bl	80018f4 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff f892 	bl	80018f4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e173      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_OscConfig+0x274>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x234>
 80027ea:	e01b      	b.n	8002824 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_RCC_OscConfig+0x27c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7ff f87f 	bl	80018f4 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e00e      	b.n	8002818 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7ff f87b 	bl	80018f4 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d907      	bls.n	8002818 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e15c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
 800280c:	40023800 	.word	0x40023800
 8002810:	42470000 	.word	0x42470000
 8002814:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b8a      	ldr	r3, [pc, #552]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ea      	bne.n	80027fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8097 	beq.w	8002960 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b83      	ldr	r3, [pc, #524]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b7f      	ldr	r3, [pc, #508]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	@ 0x40
 8002852:	4b7c      	ldr	r3, [pc, #496]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b79      	ldr	r3, [pc, #484]	@ (8002a48 <HAL_RCC_OscConfig+0x4b0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b76      	ldr	r3, [pc, #472]	@ (8002a48 <HAL_RCC_OscConfig+0x4b0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a75      	ldr	r2, [pc, #468]	@ (8002a48 <HAL_RCC_OscConfig+0x4b0>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7ff f83b 	bl	80018f4 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7ff f837 	bl	80018f4 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e118      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b6c      	ldr	r3, [pc, #432]	@ (8002a48 <HAL_RCC_OscConfig+0x4b0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x31e>
 80028a8:	4b66      	ldr	r3, [pc, #408]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x358>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x340>
 80028be:	4b61      	ldr	r3, [pc, #388]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	4a60      	ldr	r2, [pc, #384]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x358>
 80028d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	4a59      	ldr	r2, [pc, #356]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e4:	4b57      	ldr	r3, [pc, #348]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e8:	4a56      	ldr	r2, [pc, #344]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fffc 	bl	80018f4 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe fff8 	bl	80018f4 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0d7      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002916:	4b4b      	ldr	r3, [pc, #300]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ee      	beq.n	8002900 <HAL_RCC_OscConfig+0x368>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe ffe6 	bl	80018f4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe ffe2 	bl	80018f4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0c1      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002942:	4b40      	ldr	r3, [pc, #256]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ee      	bne.n	800292c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	4a3a      	ldr	r2, [pc, #232]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800295e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80ad 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296a:	4b36      	ldr	r3, [pc, #216]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d060      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d145      	bne.n	8002a0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b33      	ldr	r3, [pc, #204]	@ (8002a4c <HAL_RCC_OscConfig+0x4b4>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe ffb6 	bl	80018f4 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe ffb2 	bl	80018f4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e093      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	071b      	lsls	r3, r3, #28
 80029d6:	491b      	ldr	r1, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x4b4>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe ff87 	bl	80018f4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe ff83 	bl	80018f4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e064      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fc:	4b11      	ldr	r3, [pc, #68]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x452>
 8002a08:	e05c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <HAL_RCC_OscConfig+0x4b4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe ff70 	bl	80018f4 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe ff6c 	bl	80018f4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e04d      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <HAL_RCC_OscConfig+0x4ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x480>
 8002a36:	e045      	b.n	8002ac4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e040      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad0 <HAL_RCC_OscConfig+0x538>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d030      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d129      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d122      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d119      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	085b      	lsrs	r3, r3, #1
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10f      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07b      	b.n	8002bde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d108      	bne.n	8002b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002af6:	d009      	beq.n	8002b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
 8002afe:	e005      	b.n	8002b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fd56 	bl	80015d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b90:	ea42 0103 	orr.w	r1, r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	0c1b      	lsrs	r3, r3, #16
 8002baa:	f003 0104 	and.w	r1, r3, #4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	f003 0210 	and.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf6:	f7fe fe7d 	bl	80018f4 <HAL_GetTick>
 8002bfa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d001      	beq.n	8002c10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e12a      	b.n	8002e66 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_SPI_Transmit+0x36>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e122      	b.n	8002e66 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_SPI_Transmit+0x48>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e11b      	b.n	8002e66 <HAL_SPI_Transmit+0x280>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	88fa      	ldrh	r2, [r7, #6]
 8002c54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c7c:	d10f      	bne.n	8002c9e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b40      	cmp	r3, #64	@ 0x40
 8002caa:	d007      	beq.n	8002cbc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cc4:	d152      	bne.n	8002d6c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <HAL_SPI_Transmit+0xee>
 8002cce:	8b7b      	ldrh	r3, [r7, #26]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d145      	bne.n	8002d60 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002cf8:	e032      	b.n	8002d60 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d112      	bne.n	8002d2e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d2c:	e018      	b.n	8002d60 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2e:	f7fe fde1 	bl	80018f4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d803      	bhi.n	8002d46 <HAL_SPI_Transmit+0x160>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d102      	bne.n	8002d4c <HAL_SPI_Transmit+0x166>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e082      	b.n	8002e66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1c7      	bne.n	8002cfa <HAL_SPI_Transmit+0x114>
 8002d6a:	e053      	b.n	8002e14 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <HAL_SPI_Transmit+0x194>
 8002d74:	8b7b      	ldrh	r3, [r7, #26]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d147      	bne.n	8002e0a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002da0:	e033      	b.n	8002e0a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d113      	bne.n	8002dd8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002dd6:	e018      	b.n	8002e0a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd8:	f7fe fd8c 	bl	80018f4 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d803      	bhi.n	8002df0 <HAL_SPI_Transmit+0x20a>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d102      	bne.n	8002df6 <HAL_SPI_Transmit+0x210>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e02d      	b.n	8002e66 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1c6      	bne.n	8002da2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fa59 	bl	80032d0 <SPI_EndRxTxTransaction>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b08a      	sub	sp, #40	@ 0x28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e80:	f7fe fd38 	bl	80018f4 <HAL_GetTick>
 8002e84:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e8c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d00c      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x4a>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ea4:	d106      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <HAL_SPI_TransmitReceive+0x46>
 8002eae:	7ffb      	ldrb	r3, [r7, #31]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d001      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e17f      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x5c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x5c>
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e174      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x6e>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e16d      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d003      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	887a      	ldrh	r2, [r7, #2]
 8002f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f38:	2b40      	cmp	r3, #64	@ 0x40
 8002f3a:	d007      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f54:	d17e      	bne.n	8003054 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_SPI_TransmitReceive+0xf6>
 8002f5e:	8afb      	ldrh	r3, [r7, #22]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d16c      	bne.n	800303e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	881a      	ldrh	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f88:	e059      	b.n	800303e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d11b      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x162>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x162>
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d113      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	881a      	ldrh	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d119      	bne.n	8003012 <HAL_SPI_TransmitReceive+0x1a4>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d014      	beq.n	8003012 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	1c9a      	adds	r2, r3, #2
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003012:	f7fe fc6f 	bl	80018f4 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800301e:	429a      	cmp	r2, r3
 8003020:	d80d      	bhi.n	800303e <HAL_SPI_TransmitReceive+0x1d0>
 8003022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d009      	beq.n	800303e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0bc      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1a0      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x11c>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d19b      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x11c>
 8003052:	e082      	b.n	800315a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_SPI_TransmitReceive+0x1f4>
 800305c:	8afb      	ldrh	r3, [r7, #22]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d171      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003088:	e05d      	b.n	8003146 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b02      	cmp	r3, #2
 8003096:	d11c      	bne.n	80030d2 <HAL_SPI_TransmitReceive+0x264>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d017      	beq.n	80030d2 <HAL_SPI_TransmitReceive+0x264>
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d114      	bne.n	80030d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	7812      	ldrb	r2, [r2, #0]
 80030b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d119      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x2a6>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d014      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003110:	2301      	movs	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003114:	f7fe fbee 	bl	80018f4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003120:	429a      	cmp	r2, r3
 8003122:	d803      	bhi.n	800312c <HAL_SPI_TransmitReceive+0x2be>
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d102      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x2c4>
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e038      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d19c      	bne.n	800308a <HAL_SPI_TransmitReceive+0x21c>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d197      	bne.n	800308a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f8b6 	bl	80032d0 <SPI_EndRxTxTransaction>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01d      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10a      	bne.n	800319a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	@ 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031d0:	f7fe fb90 	bl	80018f4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031e0:	f7fe fb88 	bl	80018f4 <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e6:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	015b      	lsls	r3, r3, #5
 80031ec:	0d1b      	lsrs	r3, r3, #20
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	e054      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d050      	beq.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003200:	f7fe fb78 	bl	80018f4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d902      	bls.n	8003216 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d13d      	bne.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800322e:	d111      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	d004      	beq.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003242:	d107      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325c:	d10f      	bne.n	800327e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800327c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e017      	b.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3b01      	subs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d19b      	bne.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000004 	.word	0x20000004

080032d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2201      	movs	r2, #1
 80032e4:	2102      	movs	r1, #2
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff6a 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e032      	b.n	8003368 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003302:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <SPI_EndRxTxTransaction+0xa0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	@ (8003374 <SPI_EndRxTxTransaction+0xa4>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	0d5b      	lsrs	r3, r3, #21
 800330e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003320:	d112      	bne.n	8003348 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2200      	movs	r2, #0
 800332a:	2180      	movs	r1, #128	@ 0x80
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff ff47 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e00f      	b.n	8003368 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3b01      	subs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d0f2      	beq.n	8003348 <SPI_EndRxTxTransaction+0x78>
 8003362:	e000      	b.n	8003366 <SPI_EndRxTxTransaction+0x96>
        break;
 8003364:	bf00      	nop
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000004 	.word	0x20000004
 8003374:	165e9f81 	.word	0x165e9f81

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e042      	b.n	8003410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe f962 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	@ 0x24
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fdbd 	bl	8003f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	@ 0x28
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	d175      	bne.n	8003524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Transmit+0x2c>
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e06e      	b.n	8003526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	@ 0x21
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fe fa4d 	bl	80018f4 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800348c:	e02e      	b.n	80034ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fb1f 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e03a      	b.n	8003526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cb      	bne.n	800348e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	@ 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 faeb 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e006      	b.n	8003526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	4613      	mov	r3, r2
 800353a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	d112      	bne.n	800356e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Receive_IT+0x26>
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e00b      	b.n	8003570 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	461a      	mov	r2, r3
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fb12 	bl	8003b8e <UART_Start_Receive_IT>
 800356a:	4603      	mov	r3, r0
 800356c:	e000      	b.n	8003570 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0ba      	sub	sp, #232	@ 0xe8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_UART_IRQHandler+0x66>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fbf2 	bl	8003dc0 <UART_Receive_IT>
      return;
 80035dc:	e25b      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80de 	beq.w	80037a4 <HAL_UART_IRQHandler+0x22c>
 80035e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80d1 	beq.w	80037a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_UART_IRQHandler+0xae>
 800360e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xd2>
 8003632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
 8003656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	f043 0208 	orr.w	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 81f2 	beq.w	8003a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_UART_IRQHandler+0x14e>
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fb7d 	bl	8003dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b40      	cmp	r3, #64	@ 0x40
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_UART_IRQHandler+0x17a>
 80036ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04f      	beq.n	8003792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa85 	bl	8003c02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b40      	cmp	r3, #64	@ 0x40
 8003704:	d141      	bne.n	800378a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800371c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3314      	adds	r3, #20
 800372e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800373e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800374a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1d9      	bne.n	8003706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d013      	beq.n	8003782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	4a7e      	ldr	r2, [pc, #504]	@ (8003958 <HAL_UART_IRQHandler+0x3e0>)
 8003760:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fa82 	bl	8001c70 <HAL_DMA_Abort_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800377c:	4610      	mov	r0, r2
 800377e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e00e      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f994 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e00a      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f990 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e006      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f98c 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800379e:	e175      	b.n	8003a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	bf00      	nop
    return;
 80037a2:	e173      	b.n	8003a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 814f 	bne.w	8003a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8148 	beq.w	8003a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8141 	beq.w	8003a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	f040 80b6 	bne.w	800395c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8145 	beq.w	8003a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800380e:	429a      	cmp	r2, r3
 8003810:	f080 813e 	bcs.w	8003a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800381a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003826:	f000 8088 	beq.w	800393a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800386e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1d9      	bne.n	800382a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800389a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800389e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e1      	bne.n	8003876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e3      	bne.n	80038b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800391c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800391e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800392a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e3      	bne.n	80038f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe f92b 	bl	8001b90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8b7 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003956:	e09b      	b.n	8003a90 <HAL_UART_IRQHandler+0x518>
 8003958:	08003cc9 	.word	0x08003cc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 808e 	beq.w	8003a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8089 	beq.w	8003a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e3      	bne.n	8003982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	623b      	str	r3, [r7, #32]
   return(result);
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039de:	633a      	str	r2, [r7, #48]	@ 0x30
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e3      	bne.n	80039ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a24:	61fa      	str	r2, [r7, #28]
 8003a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	e841 2300 	strex	r3, r2, [r1]
 8003a30:	617b      	str	r3, [r7, #20]
   return(result);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e3      	bne.n	8003a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f83d 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a4a:	e023      	b.n	8003a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_UART_IRQHandler+0x4f4>
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f943 	bl	8003cf0 <UART_Transmit_IT>
    return;
 8003a6a:	e014      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <HAL_UART_IRQHandler+0x51e>
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f983 	bl	8003d90 <UART_EndTransmit_IT>
    return;
 8003a8a:	e004      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a8c:	bf00      	nop
 8003a8e:	e002      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a94:	bf00      	nop
  }
}
 8003a96:	37e8      	adds	r7, #232	@ 0xe8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	e03b      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d037      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fd fefd 	bl	80018f4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e03a      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d023      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d020      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b40      	cmp	r3, #64	@ 0x40
 8003b28:	d01d      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d116      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f857 	bl	8003c02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2208      	movs	r2, #8
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d0b4      	beq.n	8003aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2222      	movs	r2, #34	@ 0x22
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b095      	sub	sp, #84	@ 0x54
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3314      	adds	r3, #20
 8003c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d119      	bne.n	8003cae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c9a:	61ba      	str	r2, [r7, #24]
 8003c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cbc:	bf00      	nop
 8003cbe:	3754      	adds	r7, #84	@ 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fee4 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b21      	cmp	r3, #33	@ 0x21
 8003d02:	d13e      	bne.n	8003d82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0c:	d114      	bne.n	8003d38 <UART_Transmit_IT+0x48>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d110      	bne.n	8003d38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]
 8003d36:	e008      	b.n	8003d4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	1c59      	adds	r1, r3, #1
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6211      	str	r1, [r2, #32]
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4619      	mov	r1, r3
 8003d58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10f      	bne.n	8003d7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fe73 	bl	8003a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08c      	sub	sp, #48	@ 0x30
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b22      	cmp	r3, #34	@ 0x22
 8003dd2:	f040 80ae 	bne.w	8003f32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d117      	bne.n	8003e10 <UART_Receive_IT+0x50>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e0e:	e026      	b.n	8003e5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e22:	d007      	beq.n	8003e34 <UART_Receive_IT+0x74>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <UART_Receive_IT+0x82>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e008      	b.n	8003e54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d15d      	bne.n	8003f2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0220 	bic.w	r2, r2, #32
 8003e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d135      	bne.n	8003f24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 0310 	bic.w	r3, r3, #16
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ede:	623a      	str	r2, [r7, #32]
 8003ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d10a      	bne.n	8003f16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fdd1 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
 8003f22:	e002      	b.n	8003f2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fd fa05 	bl	8001334 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e002      	b.n	8003f34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3730      	adds	r7, #48	@ 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f40:	b0c0      	sub	sp, #256	@ 0x100
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	ea40 0301 	orr.w	r3, r0, r1
 8003f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f94:	f021 010c 	bic.w	r1, r1, #12
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	6999      	ldr	r1, [r3, #24]
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	ea40 0301 	orr.w	r3, r0, r1
 8003fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <UART_SetConfig+0x2cc>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d005      	beq.n	8003fdc <UART_SetConfig+0xa0>
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800420c <UART_SetConfig+0x2d0>)
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d104      	bne.n	8003fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe f91e 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8003fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fe4:	e003      	b.n	8003fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fe6:	f7fe f905 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 8003fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff8:	f040 810c 	bne.w	8004214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800400a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	1891      	adds	r1, r2, r2
 8004014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004016:	415b      	adcs	r3, r3
 8004018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800401a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800401e:	4621      	mov	r1, r4
 8004020:	eb12 0801 	adds.w	r8, r2, r1
 8004024:	4629      	mov	r1, r5
 8004026:	eb43 0901 	adc.w	r9, r3, r1
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800403a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403e:	4690      	mov	r8, r2
 8004040:	4699      	mov	r9, r3
 8004042:	4623      	mov	r3, r4
 8004044:	eb18 0303 	adds.w	r3, r8, r3
 8004048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800404c:	462b      	mov	r3, r5
 800404e:	eb49 0303 	adc.w	r3, r9, r3
 8004052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800406a:	460b      	mov	r3, r1
 800406c:	18db      	adds	r3, r3, r3
 800406e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004070:	4613      	mov	r3, r2
 8004072:	eb42 0303 	adc.w	r3, r2, r3
 8004076:	657b      	str	r3, [r7, #84]	@ 0x54
 8004078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800407c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004080:	f7fc f8d2 	bl	8000228 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2302 	umull	r2, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	011c      	lsls	r4, r3, #4
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800409c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040ac:	415b      	adcs	r3, r3
 80040ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040b4:	4641      	mov	r1, r8
 80040b6:	eb12 0a01 	adds.w	sl, r2, r1
 80040ba:	4649      	mov	r1, r9
 80040bc:	eb43 0b01 	adc.w	fp, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d4:	4692      	mov	sl, r2
 80040d6:	469b      	mov	fp, r3
 80040d8:	4643      	mov	r3, r8
 80040da:	eb1a 0303 	adds.w	r3, sl, r3
 80040de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040e2:	464b      	mov	r3, r9
 80040e4:	eb4b 0303 	adc.w	r3, fp, r3
 80040e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004100:	460b      	mov	r3, r1
 8004102:	18db      	adds	r3, r3, r3
 8004104:	643b      	str	r3, [r7, #64]	@ 0x40
 8004106:	4613      	mov	r3, r2
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
 800410e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004116:	f7fc f887 	bl	8000228 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4611      	mov	r1, r2
 8004120:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <UART_SetConfig+0x2d4>)
 8004122:	fba3 2301 	umull	r2, r3, r3, r1
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2264      	movs	r2, #100	@ 0x64
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	1acb      	subs	r3, r1, r3
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004136:	4b36      	ldr	r3, [pc, #216]	@ (8004210 <UART_SetConfig+0x2d4>)
 8004138:	fba3 2302 	umull	r2, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004144:	441c      	add	r4, r3
 8004146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004158:	4642      	mov	r2, r8
 800415a:	464b      	mov	r3, r9
 800415c:	1891      	adds	r1, r2, r2
 800415e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004160:	415b      	adcs	r3, r3
 8004162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004168:	4641      	mov	r1, r8
 800416a:	1851      	adds	r1, r2, r1
 800416c:	6339      	str	r1, [r7, #48]	@ 0x30
 800416e:	4649      	mov	r1, r9
 8004170:	414b      	adcs	r3, r1
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004180:	4659      	mov	r1, fp
 8004182:	00cb      	lsls	r3, r1, #3
 8004184:	4651      	mov	r1, sl
 8004186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418a:	4651      	mov	r1, sl
 800418c:	00ca      	lsls	r2, r1, #3
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	4603      	mov	r3, r0
 8004194:	4642      	mov	r2, r8
 8004196:	189b      	adds	r3, r3, r2
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800419c:	464b      	mov	r3, r9
 800419e:	460a      	mov	r2, r1
 80041a0:	eb42 0303 	adc.w	r3, r2, r3
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041bc:	460b      	mov	r3, r1
 80041be:	18db      	adds	r3, r3, r3
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c2:	4613      	mov	r3, r2
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041d2:	f7fc f829 	bl	8000228 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <UART_SetConfig+0x2d4>)
 80041dc:	fba3 1302 	umull	r1, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	2164      	movs	r1, #100	@ 0x64
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	3332      	adds	r3, #50	@ 0x32
 80041ee:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <UART_SetConfig+0x2d4>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 0207 	and.w	r2, r3, #7
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4422      	add	r2, r4
 8004202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004204:	e106      	b.n	8004414 <UART_SetConfig+0x4d8>
 8004206:	bf00      	nop
 8004208:	40011000 	.word	0x40011000
 800420c:	40011400 	.word	0x40011400
 8004210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800421e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004226:	4642      	mov	r2, r8
 8004228:	464b      	mov	r3, r9
 800422a:	1891      	adds	r1, r2, r2
 800422c:	6239      	str	r1, [r7, #32]
 800422e:	415b      	adcs	r3, r3
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
 8004232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004236:	4641      	mov	r1, r8
 8004238:	1854      	adds	r4, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb43 0501 	adc.w	r5, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	00eb      	lsls	r3, r5, #3
 800424a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424e:	00e2      	lsls	r2, r4, #3
 8004250:	4614      	mov	r4, r2
 8004252:	461d      	mov	r5, r3
 8004254:	4643      	mov	r3, r8
 8004256:	18e3      	adds	r3, r4, r3
 8004258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800425c:	464b      	mov	r3, r9
 800425e:	eb45 0303 	adc.w	r3, r5, r3
 8004262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004282:	4629      	mov	r1, r5
 8004284:	008b      	lsls	r3, r1, #2
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428c:	4621      	mov	r1, r4
 800428e:	008a      	lsls	r2, r1, #2
 8004290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004294:	f7fb ffc8 	bl	8000228 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4b60      	ldr	r3, [pc, #384]	@ (8004420 <UART_SetConfig+0x4e4>)
 800429e:	fba3 2302 	umull	r2, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	011c      	lsls	r4, r3, #4
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	61b9      	str	r1, [r7, #24]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6139      	str	r1, [r7, #16]
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004320:	4649      	mov	r1, r9
 8004322:	008b      	lsls	r3, r1, #2
 8004324:	4641      	mov	r1, r8
 8004326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432a:	4641      	mov	r1, r8
 800432c:	008a      	lsls	r2, r1, #2
 800432e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004332:	f7fb ff79 	bl	8000228 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4611      	mov	r1, r2
 800433c:	4b38      	ldr	r3, [pc, #224]	@ (8004420 <UART_SetConfig+0x4e4>)
 800433e:	fba3 2301 	umull	r2, r3, r3, r1
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2264      	movs	r2, #100	@ 0x64
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	1acb      	subs	r3, r1, r3
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	3332      	adds	r3, #50	@ 0x32
 8004350:	4a33      	ldr	r2, [pc, #204]	@ (8004420 <UART_SetConfig+0x4e4>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800435c:	441c      	add	r4, r3
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	673b      	str	r3, [r7, #112]	@ 0x70
 8004366:	677a      	str	r2, [r7, #116]	@ 0x74
 8004368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	415b      	adcs	r3, r3
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800437c:	4641      	mov	r1, r8
 800437e:	1851      	adds	r1, r2, r1
 8004380:	6039      	str	r1, [r7, #0]
 8004382:	4649      	mov	r1, r9
 8004384:	414b      	adcs	r3, r1
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004394:	4659      	mov	r1, fp
 8004396:	00cb      	lsls	r3, r1, #3
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439e:	4651      	mov	r1, sl
 80043a0:	00ca      	lsls	r2, r1, #3
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	4642      	mov	r2, r8
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ae:	464b      	mov	r3, r9
 80043b0:	460a      	mov	r2, r1
 80043b2:	eb42 0303 	adc.w	r3, r2, r3
 80043b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043d0:	4649      	mov	r1, r9
 80043d2:	008b      	lsls	r3, r1, #2
 80043d4:	4641      	mov	r1, r8
 80043d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043da:	4641      	mov	r1, r8
 80043dc:	008a      	lsls	r2, r1, #2
 80043de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043e2:	f7fb ff21 	bl	8000228 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <UART_SetConfig+0x4e4>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	@ 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	3332      	adds	r3, #50	@ 0x32
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <UART_SetConfig+0x4e4>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 020f 	and.w	r2, r3, #15
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4422      	add	r2, r4
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800441a:	46bd      	mov	sp, r7
 800441c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004420:	51eb851f 	.word	0x51eb851f

08004424 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004428:	4904      	ldr	r1, [pc, #16]	@ (800443c <MX_FATFS_Init+0x18>)
 800442a:	4805      	ldr	r0, [pc, #20]	@ (8004440 <MX_FATFS_Init+0x1c>)
 800442c:	f003 fbce 	bl	8007bcc <FATFS_LinkDriver>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b03      	ldr	r3, [pc, #12]	@ (8004444 <MX_FATFS_Init+0x20>)
 8004436:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	20002f98 	.word	0x20002f98
 8004440:	20000010 	.word	0x20000010
 8004444:	20002f94 	.word	0x20002f94

08004448 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800444c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  //  Stat = STA_NOINIT;
  //  return Stat;
 SD_disk_initialize (pdrv);
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc fa0b 	bl	8000880 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800446a:	bf00      	nop
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  //  Stat = STA_NOINIT;
  //  return Stat;
 SD_disk_status (pdrv);
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fc fae3 	bl	8000a4c <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004486:	bf00      	nop
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4603      	mov	r3, r0
 800449e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	SD_disk_read (pdrv,buff,sector,count);
 80044a0:	7bf8      	ldrb	r0, [r7, #15]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	f7fc fae6 	bl	8000a78 <SD_disk_read>
  /* USER CODE END READ */
}
 80044ac:	bf00      	nop
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4603      	mov	r3, r0
 80044c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff, sector,count);
 80044c6:	7bf8      	ldrb	r0, [r7, #15]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	f7fc fb3d 	bl	8000b4c <SD_disk_write>
  /* USER CODE END WRITE */
}
 80044d2:	bf00      	nop
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	603a      	str	r2, [r7, #0]
 80044e6:	71fb      	strb	r3, [r7, #7]
 80044e8:	460b      	mov	r3, r1
 80044ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   // DRESULT res = RES_ERROR;
  //  return res;
SD_disk_ioctl (pdrv,cmd,buff);
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	79b9      	ldrb	r1, [r7, #6]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc fbae 	bl	8000c54 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80044f8:	bf00      	nop
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	4a08      	ldr	r2, [pc, #32]	@ (8004534 <disk_status+0x30>)
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	79fa      	ldrb	r2, [r7, #7]
 800451c:	4905      	ldr	r1, [pc, #20]	@ (8004534 <disk_status+0x30>)
 800451e:	440a      	add	r2, r1
 8004520:	7a12      	ldrb	r2, [r2, #8]
 8004522:	4610      	mov	r0, r2
 8004524:	4798      	blx	r3
 8004526:	4603      	mov	r3, r0
 8004528:	73fb      	strb	r3, [r7, #15]
  return stat;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	200031c4 	.word	0x200031c4

08004538 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	4a0e      	ldr	r2, [pc, #56]	@ (8004584 <disk_initialize+0x4c>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d114      	bne.n	800457a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	4a0c      	ldr	r2, [pc, #48]	@ (8004584 <disk_initialize+0x4c>)
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	79fa      	ldrb	r2, [r7, #7]
 800455e:	4909      	ldr	r1, [pc, #36]	@ (8004584 <disk_initialize+0x4c>)
 8004560:	440a      	add	r2, r1
 8004562:	7a12      	ldrb	r2, [r2, #8]
 8004564:	4610      	mov	r0, r2
 8004566:	4798      	blx	r3
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	4a03      	ldr	r2, [pc, #12]	@ (8004584 <disk_initialize+0x4c>)
 8004576:	2101      	movs	r1, #1
 8004578:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	200031c4 	.word	0x200031c4

08004588 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004598:	7bfb      	ldrb	r3, [r7, #15]
 800459a:	4a0a      	ldr	r2, [pc, #40]	@ (80045c4 <disk_read+0x3c>)
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	689c      	ldr	r4, [r3, #8]
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	4a07      	ldr	r2, [pc, #28]	@ (80045c4 <disk_read+0x3c>)
 80045a8:	4413      	add	r3, r2
 80045aa:	7a18      	ldrb	r0, [r3, #8]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	47a0      	blx	r4
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200031c4 	.word	0x200031c4

080045c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80045c8:	b590      	push	{r4, r7, lr}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4603      	mov	r3, r0
 80045d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	4a0a      	ldr	r2, [pc, #40]	@ (8004604 <disk_write+0x3c>)
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	68dc      	ldr	r4, [r3, #12]
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	4a07      	ldr	r2, [pc, #28]	@ (8004604 <disk_write+0x3c>)
 80045e8:	4413      	add	r3, r2
 80045ea:	7a18      	ldrb	r0, [r3, #8]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	47a0      	blx	r4
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd90      	pop	{r4, r7, pc}
 8004602:	bf00      	nop
 8004604:	200031c4 	.word	0x200031c4

08004608 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	603a      	str	r2, [r7, #0]
 8004612:	71fb      	strb	r3, [r7, #7]
 8004614:	460b      	mov	r3, r1
 8004616:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <disk_ioctl+0x38>)
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	79fa      	ldrb	r2, [r7, #7]
 8004626:	4906      	ldr	r1, [pc, #24]	@ (8004640 <disk_ioctl+0x38>)
 8004628:	440a      	add	r2, r1
 800462a:	7a10      	ldrb	r0, [r2, #8]
 800462c:	79b9      	ldrb	r1, [r7, #6]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	4798      	blx	r3
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]
  return res;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200031c4 	.word	0x200031c4

08004644 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3301      	adds	r3, #1
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	021b      	lsls	r3, r3, #8
 8004658:	b21a      	sxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b21b      	sxth	r3, r3
 8004664:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004666:	89fb      	ldrh	r3, [r7, #14]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3303      	adds	r3, #3
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	3202      	adds	r2, #2
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	3201      	adds	r2, #1
 800469a:	7812      	ldrb	r2, [r2, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	887a      	ldrh	r2, [r7, #2]
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	887b      	ldrh	r3, [r7, #2]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	607a      	str	r2, [r7, #4]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	1c53      	adds	r3, r2, #1
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1c59      	adds	r1, r3, #1
 800476c:	6179      	str	r1, [r7, #20]
 800476e:	7812      	ldrb	r2, [r2, #0]
 8004770:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	607b      	str	r3, [r7, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f1      	bne.n	8004762 <mem_cpy+0x1a>
	}
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800478a:	b480      	push	{r7}
 800478c:	b087      	sub	sp, #28
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	617a      	str	r2, [r7, #20]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f3      	bne.n	800479a <mem_set+0x10>
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	@ 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	61fa      	str	r2, [r7, #28]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	61ba      	str	r2, [r7, #24]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	1acb      	subs	r3, r1, r3
 80047ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <mem_cmp+0x40>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0eb      	beq.n	80047d8 <mem_cmp+0x18>

	return r;
 8004800:	697b      	ldr	r3, [r7, #20]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3724      	adds	r7, #36	@ 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004818:	e002      	b.n	8004820 <chk_chr+0x12>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3301      	adds	r3, #1
 800481e:	607b      	str	r3, [r7, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <chk_chr+0x26>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4293      	cmp	r3, r2
 8004832:	d1f2      	bne.n	800481a <chk_chr+0xc>
	return *str;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	781b      	ldrb	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800484e:	2300      	movs	r3, #0
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e029      	b.n	80048ac <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004858:	4a27      	ldr	r2, [pc, #156]	@ (80048f8 <chk_lock+0xb4>)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	4413      	add	r3, r2
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01d      	beq.n	80048a2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004866:	4a24      	ldr	r2, [pc, #144]	@ (80048f8 <chk_lock+0xb4>)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	4413      	add	r3, r2
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d116      	bne.n	80048a6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004878:	4a1f      	ldr	r2, [pc, #124]	@ (80048f8 <chk_lock+0xb4>)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	4413      	add	r3, r2
 8004880:	3304      	adds	r3, #4
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004888:	429a      	cmp	r2, r3
 800488a:	d10c      	bne.n	80048a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800488c:	4a1a      	ldr	r2, [pc, #104]	@ (80048f8 <chk_lock+0xb4>)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4413      	add	r3, r2
 8004894:	3308      	adds	r3, #8
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800489c:	429a      	cmp	r2, r3
 800489e:	d102      	bne.n	80048a6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80048a0:	e007      	b.n	80048b2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d9d2      	bls.n	8004858 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d109      	bne.n	80048cc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <chk_lock+0x80>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d101      	bne.n	80048c8 <chk_lock+0x84>
 80048c4:	2300      	movs	r3, #0
 80048c6:	e010      	b.n	80048ea <chk_lock+0xa6>
 80048c8:	2312      	movs	r3, #18
 80048ca:	e00e      	b.n	80048ea <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <chk_lock+0xa0>
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <chk_lock+0xb4>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	330c      	adds	r3, #12
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e2:	d101      	bne.n	80048e8 <chk_lock+0xa4>
 80048e4:	2310      	movs	r3, #16
 80048e6:	e000      	b.n	80048ea <chk_lock+0xa6>
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20002fa4 	.word	0x20002fa4

080048fc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	e002      	b.n	800490e <enq_lock+0x12>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3301      	adds	r3, #1
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d806      	bhi.n	8004922 <enq_lock+0x26>
 8004914:	4a09      	ldr	r2, [pc, #36]	@ (800493c <enq_lock+0x40>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	4413      	add	r3, r2
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f2      	bne.n	8004908 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b02      	cmp	r3, #2
 8004926:	bf14      	ite	ne
 8004928:	2301      	movne	r3, #1
 800492a:	2300      	moveq	r3, #0
 800492c:	b2db      	uxtb	r3, r3
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20002fa4 	.word	0x20002fa4

08004940 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e01f      	b.n	8004990 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004950:	4a41      	ldr	r2, [pc, #260]	@ (8004a58 <inc_lock+0x118>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4413      	add	r3, r2
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d113      	bne.n	800498a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004962:	4a3d      	ldr	r2, [pc, #244]	@ (8004a58 <inc_lock+0x118>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4413      	add	r3, r2
 800496a:	3304      	adds	r3, #4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004972:	429a      	cmp	r2, r3
 8004974:	d109      	bne.n	800498a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004976:	4a38      	ldr	r2, [pc, #224]	@ (8004a58 <inc_lock+0x118>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4413      	add	r3, r2
 800497e:	3308      	adds	r3, #8
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004986:	429a      	cmp	r2, r3
 8004988:	d006      	beq.n	8004998 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d9dc      	bls.n	8004950 <inc_lock+0x10>
 8004996:	e000      	b.n	800499a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004998:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d132      	bne.n	8004a06 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e002      	b.n	80049ac <inc_lock+0x6c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d806      	bhi.n	80049c0 <inc_lock+0x80>
 80049b2:	4a29      	ldr	r2, [pc, #164]	@ (8004a58 <inc_lock+0x118>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4413      	add	r3, r2
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f2      	bne.n	80049a6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d101      	bne.n	80049ca <inc_lock+0x8a>
 80049c6:	2300      	movs	r3, #0
 80049c8:	e040      	b.n	8004a4c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4922      	ldr	r1, [pc, #136]	@ (8004a58 <inc_lock+0x118>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	440b      	add	r3, r1
 80049d6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	491e      	ldr	r1, [pc, #120]	@ (8004a58 <inc_lock+0x118>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	440b      	add	r3, r1
 80049e4:	3304      	adds	r3, #4
 80049e6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	491a      	ldr	r1, [pc, #104]	@ (8004a58 <inc_lock+0x118>)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	440b      	add	r3, r1
 80049f4:	3308      	adds	r3, #8
 80049f6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <inc_lock+0x118>)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	4413      	add	r3, r2
 8004a00:	330c      	adds	r3, #12
 8004a02:	2200      	movs	r2, #0
 8004a04:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <inc_lock+0xe0>
 8004a0c:	4a12      	ldr	r2, [pc, #72]	@ (8004a58 <inc_lock+0x118>)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	330c      	adds	r3, #12
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <inc_lock+0xe0>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e015      	b.n	8004a4c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d108      	bne.n	8004a38 <inc_lock+0xf8>
 8004a26:	4a0c      	ldr	r2, [pc, #48]	@ (8004a58 <inc_lock+0x118>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	4413      	add	r3, r2
 8004a2e:	330c      	adds	r3, #12
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	3301      	adds	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	e001      	b.n	8004a3c <inc_lock+0xfc>
 8004a38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a3c:	4906      	ldr	r1, [pc, #24]	@ (8004a58 <inc_lock+0x118>)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	440b      	add	r3, r1
 8004a44:	330c      	adds	r3, #12
 8004a46:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	3301      	adds	r3, #1
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	20002fa4 	.word	0x20002fa4

08004a5c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d825      	bhi.n	8004abc <dec_lock+0x60>
		n = Files[i].ctr;
 8004a70:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <dec_lock+0x74>)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	4413      	add	r3, r2
 8004a78:	330c      	adds	r3, #12
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a84:	d101      	bne.n	8004a8a <dec_lock+0x2e>
 8004a86:	2300      	movs	r3, #0
 8004a88:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <dec_lock+0x3a>
 8004a90:	89fb      	ldrh	r3, [r7, #14]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004a96:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad0 <dec_lock+0x74>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	4413      	add	r3, r2
 8004a9e:	330c      	adds	r3, #12
 8004aa0:	89fa      	ldrh	r2, [r7, #14]
 8004aa2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004aa4:	89fb      	ldrh	r3, [r7, #14]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <dec_lock+0x5a>
 8004aaa:	4a09      	ldr	r2, [pc, #36]	@ (8004ad0 <dec_lock+0x74>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	4413      	add	r3, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	737b      	strb	r3, [r7, #13]
 8004aba:	e001      	b.n	8004ac0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004abc:	2302      	movs	r3, #2
 8004abe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004ac0:	7b7b      	ldrb	r3, [r7, #13]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20002fa4 	.word	0x20002fa4

08004ad4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e010      	b.n	8004b04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8004b18 <clear_lock+0x44>)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	4413      	add	r3, r2
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d105      	bne.n	8004afe <clear_lock+0x2a>
 8004af2:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <clear_lock+0x44>)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	4413      	add	r3, r2
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d9eb      	bls.n	8004ae2 <clear_lock+0xe>
	}
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	20002fa4 	.word	0x20002fa4

08004b1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	78db      	ldrb	r3, [r3, #3]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d034      	beq.n	8004b9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7858      	ldrb	r0, [r3, #1]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b40:	2301      	movs	r3, #1
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	f7ff fd40 	bl	80045c8 <disk_write>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
 8004b52:	e022      	b.n	8004b9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d217      	bcs.n	8004b9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	789b      	ldrb	r3, [r3, #2]
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	e010      	b.n	8004b94 <sync_window+0x78>
					wsect += fs->fsize;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7858      	ldrb	r0, [r3, #1]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b86:	2301      	movs	r3, #1
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	f7ff fd1d 	bl	80045c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d8eb      	bhi.n	8004b72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d01b      	beq.n	8004bf4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ffad 	bl	8004b1c <sync_window>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d113      	bne.n	8004bf4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	7858      	ldrb	r0, [r3, #1]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	f7ff fcd5 	bl	8004588 <disk_read>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff87 	bl	8004b1c <sync_window>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d159      	bne.n	8004ccc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d149      	bne.n	8004cb4 <sync_fs+0xb4>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	791b      	ldrb	r3, [r3, #4]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d145      	bne.n	8004cb4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	899b      	ldrh	r3, [r3, #12]
 8004c32:	461a      	mov	r2, r3
 8004c34:	2100      	movs	r1, #0
 8004c36:	f7ff fda8 	bl	800478a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3338      	adds	r3, #56	@ 0x38
 8004c3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004c42:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff fd37 	bl	80046ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3338      	adds	r3, #56	@ 0x38
 8004c50:	4921      	ldr	r1, [pc, #132]	@ (8004cd8 <sync_fs+0xd8>)
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fd4c 	bl	80046f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3338      	adds	r3, #56	@ 0x38
 8004c5c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004c60:	491e      	ldr	r1, [pc, #120]	@ (8004cdc <sync_fs+0xdc>)
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fd44 	bl	80046f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3338      	adds	r3, #56	@ 0x38
 8004c6c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7ff fd3a 	bl	80046f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3338      	adds	r3, #56	@ 0x38
 8004c80:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7ff fd30 	bl	80046f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	7858      	ldrb	r0, [r3, #1]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f7ff fc8d 	bl	80045c8 <disk_write>
			fs->fsi_flag = 0;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fca3 	bl	8004608 <disk_ioctl>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <sync_fs+0xcc>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	41615252 	.word	0x41615252
 8004cdc:	61417272 	.word	0x61417272

08004ce0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	3b02      	subs	r3, #2
 8004cee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	3b02      	subs	r3, #2
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d301      	bcc.n	8004d00 <clust2sect+0x20>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e008      	b.n	8004d12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	895b      	ldrh	r3, [r3, #10]
 8004d04:	461a      	mov	r2, r3
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	fb03 f202 	mul.w	r2, r3, r2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d10:	4413      	add	r3, r2
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d904      	bls.n	8004d3e <get_fat+0x20>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e0ba      	b.n	8004eba <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	f000 8082 	beq.w	8004e58 <get_fat+0x13a>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	f300 80a6 	bgt.w	8004ea6 <get_fat+0x188>
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d002      	beq.n	8004d64 <get_fat+0x46>
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d055      	beq.n	8004e0e <get_fat+0xf0>
 8004d62:	e0a0      	b.n	8004ea6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	899b      	ldrh	r3, [r3, #12]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d82:	4413      	add	r3, r2
 8004d84:	4619      	mov	r1, r3
 8004d86:	6938      	ldr	r0, [r7, #16]
 8004d88:	f7ff ff0c 	bl	8004ba4 <move_window>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f040 808c 	bne.w	8004eac <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	60fa      	str	r2, [r7, #12]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	8992      	ldrh	r2, [r2, #12]
 8004d9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004da2:	fb01 f202 	mul.w	r2, r1, r2
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004db0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	899b      	ldrh	r3, [r3, #12]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6938      	ldr	r0, [r7, #16]
 8004dc8:	f7ff feec 	bl	8004ba4 <move_window>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d16e      	bne.n	8004eb0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	899b      	ldrh	r3, [r3, #12]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dde:	fb01 f202 	mul.w	r2, r1, r2
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <get_fat+0xe6>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	e002      	b.n	8004e0a <get_fat+0xec>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	617b      	str	r3, [r7, #20]
			break;
 8004e0c:	e055      	b.n	8004eba <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	899b      	ldrh	r3, [r3, #12]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e22:	4413      	add	r3, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	6938      	ldr	r0, [r7, #16]
 8004e28:	f7ff febc 	bl	8004ba4 <move_window>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d140      	bne.n	8004eb4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	8992      	ldrh	r2, [r2, #12]
 8004e40:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e44:	fb00 f202 	mul.w	r2, r0, r2
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fbf9 	bl	8004644 <ld_word>
 8004e52:	4603      	mov	r3, r0
 8004e54:	617b      	str	r3, [r7, #20]
			break;
 8004e56:	e030      	b.n	8004eba <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	899b      	ldrh	r3, [r3, #12]
 8004e60:	089b      	lsrs	r3, r3, #2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	4619      	mov	r1, r3
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6938      	ldr	r0, [r7, #16]
 8004e72:	f7ff fe97 	bl	8004ba4 <move_window>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	8992      	ldrh	r2, [r2, #12]
 8004e8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e8e:	fb00 f202 	mul.w	r2, r0, r2
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	440b      	add	r3, r1
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fbec 	bl	8004674 <ld_dword>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004ea2:	617b      	str	r3, [r7, #20]
			break;
 8004ea4:	e009      	b.n	8004eba <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e006      	b.n	8004eba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eac:	bf00      	nop
 8004eae:	e004      	b.n	8004eba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eb0:	bf00      	nop
 8004eb2:	e002      	b.n	8004eba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004eb8:	bf00      	nop
		}
	}

	return val;
 8004eba:	697b      	ldr	r3, [r7, #20]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b089      	sub	sp, #36	@ 0x24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f240 8109 	bls.w	80050ee <put_fat+0x22a>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	f080 8103 	bcs.w	80050ee <put_fat+0x22a>
		switch (fs->fs_type) {
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	f000 80b6 	beq.w	800505e <put_fat+0x19a>
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	f300 80fb 	bgt.w	80050ee <put_fat+0x22a>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d003      	beq.n	8004f04 <put_fat+0x40>
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	f000 8083 	beq.w	8005008 <put_fat+0x144>
 8004f02:	e0f4      	b.n	80050ee <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	899b      	ldrh	r3, [r3, #12]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f22:	4413      	add	r3, r2
 8004f24:	4619      	mov	r1, r3
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fe3c 	bl	8004ba4 <move_window>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f30:	7ffb      	ldrb	r3, [r7, #31]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 80d4 	bne.w	80050e0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	61ba      	str	r2, [r7, #24]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	8992      	ldrh	r2, [r2, #12]
 8004f48:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f4c:	fb00 f202 	mul.w	r2, r0, r2
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	440b      	add	r3, r1
 8004f54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <put_fat+0xb8>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	b25a      	sxtb	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	b25b      	sxtb	r3, r3
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e001      	b.n	8004f80 <put_fat+0xbc>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	899b      	ldrh	r3, [r3, #12]
 8004f92:	4619      	mov	r1, r3
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff fe00 	bl	8004ba4 <move_window>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fa8:	7ffb      	ldrb	r3, [r7, #31]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 809a 	bne.w	80050e4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	899b      	ldrh	r3, [r3, #12]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fc2:	fb00 f202 	mul.w	r2, r0, r2
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	440b      	add	r3, r1
 8004fca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <put_fat+0x11a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	e00e      	b.n	8004ffc <put_fat+0x138>
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f023 030f 	bic.w	r3, r3, #15
 8004fe8:	b25a      	sxtb	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2201      	movs	r2, #1
 8005004:	70da      	strb	r2, [r3, #3]
			break;
 8005006:	e072      	b.n	80050ee <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	899b      	ldrh	r3, [r3, #12]
 8005010:	085b      	lsrs	r3, r3, #1
 8005012:	b29b      	uxth	r3, r3
 8005014:	4619      	mov	r1, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	fbb3 f3f1 	udiv	r3, r3, r1
 800501c:	4413      	add	r3, r2
 800501e:	4619      	mov	r1, r3
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fdbf 	bl	8004ba4 <move_window>
 8005026:	4603      	mov	r3, r0
 8005028:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800502a:	7ffb      	ldrb	r3, [r7, #31]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d15b      	bne.n	80050e8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	8992      	ldrh	r2, [r2, #12]
 800503e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005042:	fb00 f202 	mul.w	r2, r0, r2
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	440b      	add	r3, r1
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	b292      	uxth	r2, r2
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fb32 	bl	80046ba <st_word>
			fs->wflag = 1;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	70da      	strb	r2, [r3, #3]
			break;
 800505c:	e047      	b.n	80050ee <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	899b      	ldrh	r3, [r3, #12]
 8005066:	089b      	lsrs	r3, r3, #2
 8005068:	b29b      	uxth	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005072:	4413      	add	r3, r2
 8005074:	4619      	mov	r1, r3
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fd94 	bl	8004ba4 <move_window>
 800507c:	4603      	mov	r3, r0
 800507e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005080:	7ffb      	ldrb	r3, [r7, #31]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d132      	bne.n	80050ec <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	8992      	ldrh	r2, [r2, #12]
 800509a:	fbb3 f0f2 	udiv	r0, r3, r2
 800509e:	fb00 f202 	mul.w	r2, r0, r2
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	440b      	add	r3, r1
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fae4 	bl	8004674 <ld_dword>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80050b2:	4323      	orrs	r3, r4
 80050b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	8992      	ldrh	r2, [r2, #12]
 80050c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80050c8:	fb00 f202 	mul.w	r2, r0, r2
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fb0c 	bl	80046f0 <st_dword>
			fs->wflag = 1;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	70da      	strb	r2, [r3, #3]
			break;
 80050de:	e006      	b.n	80050ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80050e0:	bf00      	nop
 80050e2:	e004      	b.n	80050ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <put_fat+0x22a>
			if (res != FR_OK) break;
 80050ec:	bf00      	nop
		}
	}
	return res;
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3724      	adds	r7, #36	@ 0x24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd90      	pop	{r4, r7, pc}

080050f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d904      	bls.n	800511e <remove_chain+0x26>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d301      	bcc.n	8005122 <remove_chain+0x2a>
 800511e:	2302      	movs	r3, #2
 8005120:	e04b      	b.n	80051ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005128:	f04f 32ff 	mov.w	r2, #4294967295
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	69b8      	ldr	r0, [r7, #24]
 8005130:	f7ff fec8 	bl	8004ec4 <put_fat>
 8005134:	4603      	mov	r3, r0
 8005136:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005138:	7ffb      	ldrb	r3, [r7, #31]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <remove_chain+0x4a>
 800513e:	7ffb      	ldrb	r3, [r7, #31]
 8005140:	e03b      	b.n	80051ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fdea 	bl	8004d1e <get_fat>
 800514a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d031      	beq.n	80051b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <remove_chain+0x64>
 8005158:	2302      	movs	r3, #2
 800515a:	e02e      	b.n	80051ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d101      	bne.n	8005168 <remove_chain+0x70>
 8005164:	2301      	movs	r3, #1
 8005166:	e028      	b.n	80051ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005168:	2200      	movs	r2, #0
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	69b8      	ldr	r0, [r7, #24]
 800516e:	f7ff fea9 	bl	8004ec4 <put_fat>
 8005172:	4603      	mov	r3, r0
 8005174:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005176:	7ffb      	ldrb	r3, [r7, #31]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <remove_chain+0x88>
 800517c:	7ffb      	ldrb	r3, [r7, #31]
 800517e:	e01c      	b.n	80051ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	3b02      	subs	r3, #2
 800518a:	429a      	cmp	r2, r3
 800518c:	d20b      	bcs.n	80051a6 <remove_chain+0xae>
			fs->free_clst++;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	791b      	ldrb	r3, [r3, #4]
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3c6      	bcc.n	8005142 <remove_chain+0x4a>
 80051b4:	e000      	b.n	80051b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80051b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b088      	sub	sp, #32
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10d      	bne.n	80051f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <create_chain+0x2c>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d31b      	bcc.n	8005226 <create_chain+0x64>
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e018      	b.n	8005226 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fd91 	bl	8004d1e <get_fat>
 80051fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d801      	bhi.n	8005208 <create_chain+0x46>
 8005204:	2301      	movs	r3, #1
 8005206:	e070      	b.n	80052ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d101      	bne.n	8005214 <create_chain+0x52>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	e06a      	b.n	80052ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	429a      	cmp	r2, r3
 800521c:	d201      	bcs.n	8005222 <create_chain+0x60>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	e063      	b.n	80052ea <create_chain+0x128>
		scl = clst;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3301      	adds	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	429a      	cmp	r2, r3
 8005238:	d307      	bcc.n	800524a <create_chain+0x88>
				ncl = 2;
 800523a:	2302      	movs	r3, #2
 800523c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	429a      	cmp	r2, r3
 8005244:	d901      	bls.n	800524a <create_chain+0x88>
 8005246:	2300      	movs	r3, #0
 8005248:	e04f      	b.n	80052ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800524a:	69f9      	ldr	r1, [r7, #28]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fd66 	bl	8004d1e <get_fat>
 8005252:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d003      	beq.n	8005268 <create_chain+0xa6>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d101      	bne.n	800526c <create_chain+0xaa>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	e03e      	b.n	80052ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d1da      	bne.n	800522a <create_chain+0x68>
 8005274:	2300      	movs	r3, #0
 8005276:	e038      	b.n	80052ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005278:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	69f9      	ldr	r1, [r7, #28]
 8005280:	6938      	ldr	r0, [r7, #16]
 8005282:	f7ff fe1f 	bl	8004ec4 <put_fat>
 8005286:	4603      	mov	r3, r0
 8005288:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <create_chain+0xe2>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d006      	beq.n	80052a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f7ff fe12 	bl	8004ec4 <put_fat>
 80052a0:	4603      	mov	r3, r0
 80052a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d116      	bne.n	80052d8 <create_chain+0x116>
		fs->last_clst = ncl;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	3b02      	subs	r3, #2
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d804      	bhi.n	80052c8 <create_chain+0x106>
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	1e5a      	subs	r2, r3, #1
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	791b      	ldrb	r3, [r3, #4]
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	711a      	strb	r2, [r3, #4]
 80052d6:	e007      	b.n	80052e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d102      	bne.n	80052e4 <create_chain+0x122>
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	e000      	b.n	80052e6 <create_chain+0x124>
 80052e4:	2301      	movs	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80052e8:	69fb      	ldr	r3, [r7, #28]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	3304      	adds	r3, #4
 8005308:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	899b      	ldrh	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	fbb3 f3f2 	udiv	r3, r3, r2
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	8952      	ldrh	r2, [r2, #10]
 800531a:	fbb3 f3f2 	udiv	r3, r3, r2
 800531e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1d1a      	adds	r2, r3, #4
 8005324:	613a      	str	r2, [r7, #16]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <clmt_clust+0x42>
 8005330:	2300      	movs	r3, #0
 8005332:	e010      	b.n	8005356 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	d307      	bcc.n	800534c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3304      	adds	r3, #4
 8005348:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800534a:	e7e9      	b.n	8005320 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800534c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	4413      	add	r3, r2
}
 8005356:	4618      	mov	r0, r3
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005378:	d204      	bcs.n	8005384 <dir_sdi+0x22>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005384:	2302      	movs	r3, #2
 8005386:	e071      	b.n	800546c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <dir_sdi+0x46>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d902      	bls.n	80053a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	8912      	ldrh	r2, [r2, #8]
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d301      	bcc.n	80053be <dir_sdi+0x5c>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e056      	b.n	800546c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	61da      	str	r2, [r3, #28]
 80053c6:	e02d      	b.n	8005424 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	895b      	ldrh	r3, [r3, #10]
 80053cc:	461a      	mov	r2, r3
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	899b      	ldrh	r3, [r3, #12]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
 80053d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80053d8:	e019      	b.n	800540e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fc9d 	bl	8004d1e <get_fat>
 80053e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d101      	bne.n	80053f2 <dir_sdi+0x90>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e03c      	b.n	800546c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d904      	bls.n	8005402 <dir_sdi+0xa0>
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d301      	bcc.n	8005406 <dir_sdi+0xa4>
 8005402:	2302      	movs	r3, #2
 8005404:	e032      	b.n	800546c <dir_sdi+0x10a>
			ofs -= csz;
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	429a      	cmp	r2, r3
 8005414:	d2e1      	bcs.n	80053da <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005416:	6979      	ldr	r1, [r7, #20]
 8005418:	6938      	ldr	r0, [r7, #16]
 800541a:	f7ff fc61 	bl	8004ce0 <clust2sect>
 800541e:	4602      	mov	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <dir_sdi+0xd4>
 8005432:	2302      	movs	r3, #2
 8005434:	e01a      	b.n	800546c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	899b      	ldrh	r3, [r3, #12]
 800543e:	4619      	mov	r1, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	fbb3 f3f1 	udiv	r3, r3, r1
 8005446:	441a      	add	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	899b      	ldrh	r3, [r3, #12]
 8005456:	461a      	mov	r2, r3
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	fbb3 f0f2 	udiv	r0, r3, r2
 800545e:	fb00 f202 	mul.w	r2, r0, r2
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	18ca      	adds	r2, r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	3320      	adds	r3, #32
 800548a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <dir_next+0x28>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800549a:	d301      	bcc.n	80054a0 <dir_next+0x2c>
 800549c:	2304      	movs	r3, #4
 800549e:	e0bb      	b.n	8005618 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	899b      	ldrh	r3, [r3, #12]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80054ac:	fb01 f202 	mul.w	r2, r1, r2
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 809d 	bne.w	80055f2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	8912      	ldrh	r2, [r2, #8]
 80054d2:	4293      	cmp	r3, r2
 80054d4:	f0c0 808d 	bcc.w	80055f2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	61da      	str	r2, [r3, #28]
 80054de:	2304      	movs	r3, #4
 80054e0:	e09a      	b.n	8005618 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	899b      	ldrh	r3, [r3, #12]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	8952      	ldrh	r2, [r2, #10]
 80054f2:	3a01      	subs	r2, #1
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d17b      	bne.n	80055f2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7ff fc0b 	bl	8004d1e <get_fat>
 8005508:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d801      	bhi.n	8005514 <dir_next+0xa0>
 8005510:	2302      	movs	r3, #2
 8005512:	e081      	b.n	8005618 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d101      	bne.n	8005520 <dir_next+0xac>
 800551c:	2301      	movs	r3, #1
 800551e:	e07b      	b.n	8005618 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	429a      	cmp	r2, r3
 8005528:	d359      	bcc.n	80055de <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	61da      	str	r2, [r3, #28]
 8005536:	2304      	movs	r3, #4
 8005538:	e06e      	b.n	8005618 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f7ff fe3d 	bl	80051c2 <create_chain>
 8005548:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <dir_next+0xe0>
 8005550:	2307      	movs	r3, #7
 8005552:	e061      	b.n	8005618 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <dir_next+0xea>
 800555a:	2302      	movs	r3, #2
 800555c:	e05c      	b.n	8005618 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005564:	d101      	bne.n	800556a <dir_next+0xf6>
 8005566:	2301      	movs	r3, #1
 8005568:	e056      	b.n	8005618 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff fad6 	bl	8004b1c <sync_window>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <dir_next+0x106>
 8005576:	2301      	movs	r3, #1
 8005578:	e04e      	b.n	8005618 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	899b      	ldrh	r3, [r3, #12]
 8005584:	461a      	mov	r2, r3
 8005586:	2100      	movs	r1, #0
 8005588:	f7ff f8ff 	bl	800478a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff fba4 	bl	8004ce0 <clust2sect>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34
 800559e:	e012      	b.n	80055c6 <dir_next+0x152>
						fs->wflag = 1;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff fab8 	bl	8004b1c <sync_window>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <dir_next+0x142>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e030      	b.n	8005618 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	895b      	ldrh	r3, [r3, #10]
 80055ca:	461a      	mov	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d3e6      	bcc.n	80055a0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80055e4:	6979      	ldr	r1, [r7, #20]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff fb7a 	bl	8004ce0 <clust2sect>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	899b      	ldrh	r3, [r3, #12]
 8005602:	461a      	mov	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	fbb3 f0f2 	udiv	r0, r3, r2
 800560a:	fb00 f202 	mul.w	r2, r0, r2
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	18ca      	adds	r2, r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005630:	2100      	movs	r1, #0
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fe95 	bl	8005362 <dir_sdi>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800563c:	7dfb      	ldrb	r3, [r7, #23]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d12b      	bne.n	800569a <dir_alloc+0x7a>
		n = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4619      	mov	r1, r3
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff faa9 	bl	8004ba4 <move_window>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11d      	bne.n	8005698 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2be5      	cmp	r3, #229	@ 0xe5
 8005664:	d004      	beq.n	8005670 <dir_alloc+0x50>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d107      	bne.n	8005680 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	3301      	adds	r3, #1
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d102      	bne.n	8005684 <dir_alloc+0x64>
 800567e:	e00c      	b.n	800569a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005684:	2101      	movs	r1, #1
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fef4 	bl	8005474 <dir_next>
 800568c:	4603      	mov	r3, r0
 800568e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0d7      	beq.n	8005646 <dir_alloc+0x26>
 8005696:	e000      	b.n	800569a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005698:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	2b04      	cmp	r3, #4
 800569e:	d101      	bne.n	80056a4 <dir_alloc+0x84>
 80056a0:	2307      	movs	r3, #7
 80056a2:	75fb      	strb	r3, [r7, #23]
	return res;
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	331a      	adds	r3, #26
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe ffc1 	bl	8004644 <ld_word>
 80056c2:	4603      	mov	r3, r0
 80056c4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d109      	bne.n	80056e2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe ffb6 	bl	8004644 <ld_word>
 80056d8:	4603      	mov	r3, r0
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	331a      	adds	r3, #26
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	b292      	uxth	r2, r2
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe ffd9 	bl	80046ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d109      	bne.n	8005724 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f103 0214 	add.w	r2, r3, #20
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	b29b      	uxth	r3, r3
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe ffcb 	bl	80046ba <st_word>
	}
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	331a      	adds	r3, #26
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe ff82 	bl	8004644 <ld_word>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <cmp_lfn+0x1e>
 8005746:	2300      	movs	r3, #0
 8005748:	e059      	b.n	80057fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005760:	2301      	movs	r3, #1
 8005762:	81fb      	strh	r3, [r7, #14]
 8005764:	2300      	movs	r3, #0
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	e033      	b.n	80057d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800576a:	4a27      	ldr	r2, [pc, #156]	@ (8005808 <cmp_lfn+0xdc>)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4413      	add	r3, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe ff63 	bl	8004644 <ld_word>
 800577e:	4603      	mov	r3, r0
 8005780:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005782:	89fb      	ldrh	r3, [r7, #14]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01a      	beq.n	80057be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2bfe      	cmp	r3, #254	@ 0xfe
 800578c:	d812      	bhi.n	80057b4 <cmp_lfn+0x88>
 800578e:	89bb      	ldrh	r3, [r7, #12]
 8005790:	4618      	mov	r0, r3
 8005792:	f002 fa67 	bl	8007c64 <ff_wtoupper>
 8005796:	4603      	mov	r3, r0
 8005798:	461c      	mov	r4, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	617a      	str	r2, [r7, #20]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f002 fa5b 	bl	8007c64 <ff_wtoupper>
 80057ae:	4603      	mov	r3, r0
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d001      	beq.n	80057b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80057b4:	2300      	movs	r3, #0
 80057b6:	e022      	b.n	80057fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80057b8:	89bb      	ldrh	r3, [r7, #12]
 80057ba:	81fb      	strh	r3, [r7, #14]
 80057bc:	e006      	b.n	80057cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80057be:	89bb      	ldrh	r3, [r7, #12]
 80057c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d001      	beq.n	80057cc <cmp_lfn+0xa0>
 80057c8:	2300      	movs	r3, #0
 80057ca:	e018      	b.n	80057fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	3301      	adds	r3, #1
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d9c8      	bls.n	800576a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <cmp_lfn+0xd0>
 80057e4:	89fb      	ldrh	r3, [r7, #14]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <cmp_lfn+0xd0>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <cmp_lfn+0xd0>
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80057fc:	2301      	movs	r3, #1
}
 80057fe:	4618      	mov	r0, r3
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd90      	pop	{r4, r7, pc}
 8005806:	bf00      	nop
 8005808:	080081b4 	.word	0x080081b4

0800580c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	331a      	adds	r3, #26
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe ff12 	bl	8004644 <ld_word>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <pick_lfn+0x1e>
 8005826:	2300      	movs	r3, #0
 8005828:	e04d      	b.n	80058c6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005832:	1e5a      	subs	r2, r3, #1
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005840:	2301      	movs	r3, #1
 8005842:	81fb      	strh	r3, [r7, #14]
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e028      	b.n	800589c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800584a:	4a21      	ldr	r2, [pc, #132]	@ (80058d0 <pick_lfn+0xc4>)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	4413      	add	r3, r2
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fef3 	bl	8004644 <ld_word>
 800585e:	4603      	mov	r3, r0
 8005860:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005862:	89fb      	ldrh	r3, [r7, #14]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2bfe      	cmp	r3, #254	@ 0xfe
 800586c:	d901      	bls.n	8005872 <pick_lfn+0x66>
 800586e:	2300      	movs	r3, #0
 8005870:	e029      	b.n	80058c6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005872:	89bb      	ldrh	r3, [r7, #12]
 8005874:	81fb      	strh	r3, [r7, #14]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	617a      	str	r2, [r7, #20]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4413      	add	r3, r2
 8005882:	89fa      	ldrh	r2, [r7, #14]
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e006      	b.n	8005896 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005888:	89bb      	ldrh	r3, [r7, #12]
 800588a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800588e:	4293      	cmp	r3, r2
 8005890:	d001      	beq.n	8005896 <pick_lfn+0x8a>
 8005892:	2300      	movs	r3, #0
 8005894:	e017      	b.n	80058c6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3301      	adds	r3, #1
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d9d3      	bls.n	800584a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80058b2:	d901      	bls.n	80058b8 <pick_lfn+0xac>
 80058b4:	2300      	movs	r3, #0
 80058b6:	e006      	b.n	80058c6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	2200      	movs	r2, #0
 80058c2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80058c4:	2301      	movs	r3, #1
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	080081b4 	.word	0x080081b4

080058d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4611      	mov	r1, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	460b      	mov	r3, r1
 80058e4:	71fb      	strb	r3, [r7, #7]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	330d      	adds	r3, #13
 80058ee:	79ba      	ldrb	r2, [r7, #6]
 80058f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	330b      	adds	r3, #11
 80058f6:	220f      	movs	r2, #15
 80058f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	330c      	adds	r3, #12
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	331a      	adds	r3, #26
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fed6 	bl	80046ba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	1e5a      	subs	r2, r3, #1
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	82fb      	strh	r3, [r7, #22]
 8005922:	2300      	movs	r3, #0
 8005924:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005926:	8afb      	ldrh	r3, [r7, #22]
 8005928:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <put_lfn+0x6c>
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	61fa      	str	r2, [r7, #28]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005940:	4a17      	ldr	r2, [pc, #92]	@ (80059a0 <put_lfn+0xcc>)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	4413      	add	r3, r2
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4413      	add	r3, r2
 800594e:	8afa      	ldrh	r2, [r7, #22]
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe feb1 	bl	80046ba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005958:	8afb      	ldrh	r3, [r7, #22]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <put_lfn+0x90>
 800595e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005962:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	3301      	adds	r3, #1
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d9da      	bls.n	8005926 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005970:	8afb      	ldrh	r3, [r7, #22]
 8005972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005976:	4293      	cmp	r3, r2
 8005978:	d006      	beq.n	8005988 <put_lfn+0xb4>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <put_lfn+0xbc>
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800598e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	79fa      	ldrb	r2, [r7, #7]
 8005994:	701a      	strb	r2, [r3, #0]
}
 8005996:	bf00      	nop
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	080081b4 	.word	0x080081b4

080059a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08c      	sub	sp, #48	@ 0x30
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80059b2:	220b      	movs	r2, #11
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7fe fec6 	bl	8004748 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d92b      	bls.n	8005a1a <gen_numname+0x76>
		sr = seq;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80059c6:	e022      	b.n	8005a0e <gen_numname+0x6a>
			wc = *lfn++;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	1c9a      	adds	r2, r3, #2
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80059d2:	2300      	movs	r3, #0
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d6:	e017      	b.n	8005a08 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	005a      	lsls	r2, r3, #1
 80059dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80059e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <gen_numname+0x5e>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80059fc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005a00:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	3301      	adds	r3, #1
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	2b0f      	cmp	r3, #15
 8005a0c:	d9e4      	bls.n	80059d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1d8      	bne.n	80059c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	3330      	adds	r3, #48	@ 0x30
 8005a2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a32:	2b39      	cmp	r3, #57	@ 0x39
 8005a34:	d904      	bls.n	8005a40 <gen_numname+0x9c>
 8005a36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a3a:	3307      	adds	r3, #7
 8005a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	1e5a      	subs	r2, r3, #1
 8005a44:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a46:	3330      	adds	r3, #48	@ 0x30
 8005a48:	443b      	add	r3, r7
 8005a4a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005a4e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1df      	bne.n	8005a1e <gen_numname+0x7a>
	ns[i] = '~';
 8005a5e:	f107 0214 	add.w	r2, r7, #20
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	4413      	add	r3, r2
 8005a66:	227e      	movs	r2, #126	@ 0x7e
 8005a68:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a6e:	e002      	b.n	8005a76 <gen_numname+0xd2>
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	3301      	adds	r3, #1
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d205      	bcs.n	8005a8a <gen_numname+0xe6>
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	4413      	add	r3, r2
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d1f2      	bne.n	8005a70 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a8c:	2b07      	cmp	r3, #7
 8005a8e:	d807      	bhi.n	8005aa0 <gen_numname+0xfc>
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a96:	3330      	adds	r3, #48	@ 0x30
 8005a98:	443b      	add	r3, r7
 8005a9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005a9e:	e000      	b.n	8005aa2 <gen_numname+0xfe>
 8005aa0:	2120      	movs	r1, #32
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	460a      	mov	r2, r1
 8005aae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	2b07      	cmp	r3, #7
 8005ab4:	d9e9      	bls.n	8005a8a <gen_numname+0xe6>
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	3730      	adds	r7, #48	@ 0x30
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005acc:	230b      	movs	r3, #11
 8005ace:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	0852      	lsrs	r2, r2, #1
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	6079      	str	r1, [r7, #4]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ed      	bne.n	8005ad0 <sum_sfn+0x10>
	return sum;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8005b16:	23ff      	movs	r3, #255	@ 0xff
 8005b18:	757b      	strb	r3, [r7, #21]
 8005b1a:	23ff      	movs	r3, #255	@ 0xff
 8005b1c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005b1e:	e081      	b.n	8005c24 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6938      	ldr	r0, [r7, #16]
 8005b28:	f7ff f83c 	bl	8004ba4 <move_window>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d17c      	bne.n	8005c30 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005b3e:	7dbb      	ldrb	r3, [r7, #22]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005b44:	2304      	movs	r3, #4
 8005b46:	75fb      	strb	r3, [r7, #23]
 8005b48:	e077      	b.n	8005c3a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	330b      	adds	r3, #11
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7bfa      	ldrb	r2, [r7, #15]
 8005b5c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005b5e:	7dbb      	ldrb	r3, [r7, #22]
 8005b60:	2be5      	cmp	r3, #229	@ 0xe5
 8005b62:	d00e      	beq.n	8005b82 <dir_read+0x80>
 8005b64:	7dbb      	ldrb	r3, [r7, #22]
 8005b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b68:	d00b      	beq.n	8005b82 <dir_read+0x80>
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	f023 0320 	bic.w	r3, r3, #32
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d002      	beq.n	8005b88 <dir_read+0x86>
				ord = 0xFF;
 8005b82:	23ff      	movs	r3, #255	@ 0xff
 8005b84:	757b      	strb	r3, [r7, #21]
 8005b86:	e044      	b.n	8005c12 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b0f      	cmp	r3, #15
 8005b8c:	d12f      	bne.n	8005bee <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005b8e:	7dbb      	ldrb	r3, [r7, #22]
 8005b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	7b5b      	ldrb	r3, [r3, #13]
 8005b9e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005ba0:	7dbb      	ldrb	r3, [r7, #22]
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba6:	75bb      	strb	r3, [r7, #22]
 8005ba8:	7dbb      	ldrb	r3, [r7, #22]
 8005baa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005bb4:	7dba      	ldrb	r2, [r7, #22]
 8005bb6:	7d7b      	ldrb	r3, [r7, #21]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d115      	bne.n	8005be8 <dir_read+0xe6>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	330d      	adds	r3, #13
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	7d3a      	ldrb	r2, [r7, #20]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10e      	bne.n	8005be8 <dir_read+0xe6>
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7ff fe19 	bl	800580c <pick_lfn>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <dir_read+0xe6>
 8005be0:	7d7b      	ldrb	r3, [r7, #21]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e000      	b.n	8005bea <dir_read+0xe8>
 8005be8:	23ff      	movs	r3, #255	@ 0xff
 8005bea:	757b      	strb	r3, [r7, #21]
 8005bec:	e011      	b.n	8005c12 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005bee:	7d7b      	ldrb	r3, [r7, #21]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <dir_read+0x106>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7ff ff61 	bl	8005ac0 <sum_sfn>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	461a      	mov	r2, r3
 8005c02:	7d3b      	ldrb	r3, [r7, #20]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d015      	beq.n	8005c34 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8005c10:	e010      	b.n	8005c34 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005c12:	2100      	movs	r1, #0
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fc2d 	bl	8005474 <dir_next>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <dir_read+0x136>
	while (dp->sect) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f47f af79 	bne.w	8005b20 <dir_read+0x1e>
 8005c2e:	e004      	b.n	8005c3a <dir_read+0x138>
		if (res != FR_OK) break;
 8005c30:	bf00      	nop
 8005c32:	e002      	b.n	8005c3a <dir_read+0x138>
					break;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <dir_read+0x138>
		if (res != FR_OK) break;
 8005c38:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <dir_read+0x144>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	61da      	str	r2, [r3, #28]
	return res;
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c5e:	2100      	movs	r1, #0
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fb7e 	bl	8005362 <dir_sdi>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <dir_find+0x24>
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	e0a9      	b.n	8005dc8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c74:	23ff      	movs	r3, #255	@ 0xff
 8005c76:	753b      	strb	r3, [r7, #20]
 8005c78:	7d3b      	ldrb	r3, [r7, #20]
 8005c7a:	757b      	strb	r3, [r7, #21]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6938      	ldr	r0, [r7, #16]
 8005c8c:	f7fe ff8a 	bl	8004ba4 <move_window>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 8090 	bne.w	8005dbc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005ca4:	7dbb      	ldrb	r3, [r7, #22]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <dir_find+0x60>
 8005caa:	2304      	movs	r3, #4
 8005cac:	75fb      	strb	r3, [r7, #23]
 8005cae:	e08a      	b.n	8005dc6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	330b      	adds	r3, #11
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cbc:	73fb      	strb	r3, [r7, #15]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	7bfa      	ldrb	r2, [r7, #15]
 8005cc2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005cc4:	7dbb      	ldrb	r3, [r7, #22]
 8005cc6:	2be5      	cmp	r3, #229	@ 0xe5
 8005cc8:	d007      	beq.n	8005cda <dir_find+0x8a>
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <dir_find+0x98>
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	d006      	beq.n	8005ce8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cda:	23ff      	movs	r3, #255	@ 0xff
 8005cdc:	757b      	strb	r3, [r7, #21]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ce6:	e05e      	b.n	8005da6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b0f      	cmp	r3, #15
 8005cec:	d136      	bne.n	8005d5c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d154      	bne.n	8005da6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005cfc:	7dbb      	ldrb	r3, [r7, #22]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	7b5b      	ldrb	r3, [r3, #13]
 8005d0c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d0e:	7dbb      	ldrb	r3, [r7, #22]
 8005d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d14:	75bb      	strb	r3, [r7, #22]
 8005d16:	7dbb      	ldrb	r3, [r7, #22]
 8005d18:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d22:	7dba      	ldrb	r2, [r7, #22]
 8005d24:	7d7b      	ldrb	r3, [r7, #21]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d115      	bne.n	8005d56 <dir_find+0x106>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	330d      	adds	r3, #13
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	7d3a      	ldrb	r2, [r7, #20]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d10e      	bne.n	8005d56 <dir_find+0x106>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f7ff fcf2 	bl	800572c <cmp_lfn>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <dir_find+0x106>
 8005d4e:	7d7b      	ldrb	r3, [r7, #21]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	e000      	b.n	8005d58 <dir_find+0x108>
 8005d56:	23ff      	movs	r3, #255	@ 0xff
 8005d58:	757b      	strb	r3, [r7, #21]
 8005d5a:	e024      	b.n	8005da6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d5c:	7d7b      	ldrb	r3, [r7, #21]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <dir_find+0x126>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff feaa 	bl	8005ac0 <sum_sfn>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	461a      	mov	r2, r3
 8005d70:	7d3b      	ldrb	r3, [r7, #20]
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d024      	beq.n	8005dc0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <dir_find+0x14a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a18      	ldr	r0, [r3, #32]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3324      	adds	r3, #36	@ 0x24
 8005d8c:	220b      	movs	r2, #11
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fe fd16 	bl	80047c0 <mem_cmp>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d014      	beq.n	8005dc4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d9a:	23ff      	movs	r3, #255	@ 0xff
 8005d9c:	757b      	strb	r3, [r7, #21]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005da6:	2100      	movs	r1, #0
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fb63 	bl	8005474 <dir_next>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f43f af65 	beq.w	8005c84 <dir_find+0x34>
 8005dba:	e004      	b.n	8005dc6 <dir_find+0x176>
		if (res != FR_OK) break;
 8005dbc:	bf00      	nop
 8005dbe:	e002      	b.n	8005dc6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005dc0:	bf00      	nop
 8005dc2:	e000      	b.n	8005dc6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005dc4:	bf00      	nop

	return res;
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	@ 0x30
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005de4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <dir_register+0x20>
 8005dec:	2306      	movs	r3, #6
 8005dee:	e0e0      	b.n	8005fb2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005df0:	2300      	movs	r3, #0
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df4:	e002      	b.n	8005dfc <dir_register+0x2c>
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	3301      	adds	r3, #1
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f4      	bne.n	8005df6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	220c      	movs	r2, #12
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe fc95 	bl	8004748 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e1e:	7dfb      	ldrb	r3, [r7, #23]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d032      	beq.n	8005e8e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2240      	movs	r2, #64	@ 0x40
 8005e2c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005e30:	2301      	movs	r3, #1
 8005e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e34:	e016      	b.n	8005e64 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	f107 010c 	add.w	r1, r7, #12
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	f7ff fdad 	bl	80059a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ff00 	bl	8005c50 <dir_find>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005e56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	3301      	adds	r3, #1
 8005e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	2b63      	cmp	r3, #99	@ 0x63
 8005e68:	d9e5      	bls.n	8005e36 <dir_register+0x66>
 8005e6a:	e000      	b.n	8005e6e <dir_register+0x9e>
			if (res != FR_OK) break;
 8005e6c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	2b64      	cmp	r3, #100	@ 0x64
 8005e72:	d101      	bne.n	8005e78 <dir_register+0xa8>
 8005e74:	2307      	movs	r3, #7
 8005e76:	e09c      	b.n	8005fb2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d002      	beq.n	8005e86 <dir_register+0xb6>
 8005e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e84:	e095      	b.n	8005fb2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005e86:	7dfa      	ldrb	r2, [r7, #23]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <dir_register+0xd8>
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	330c      	adds	r3, #12
 8005e9c:	4a47      	ldr	r2, [pc, #284]	@ (8005fbc <dir_register+0x1ec>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	089b      	lsrs	r3, r3, #2
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	e000      	b.n	8005eaa <dir_register+0xda>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005eac:	6a39      	ldr	r1, [r7, #32]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff fbb6 	bl	8005620 <dir_alloc>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d148      	bne.n	8005f54 <dir_register+0x184>
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	623b      	str	r3, [r7, #32]
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d042      	beq.n	8005f54 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	015b      	lsls	r3, r3, #5
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff fa41 	bl	8005362 <dir_sdi>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d132      	bne.n	8005f54 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3324      	adds	r3, #36	@ 0x24
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fde4 	bl	8005ac0 <sum_sfn>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4619      	mov	r1, r3
 8005f02:	69f8      	ldr	r0, [r7, #28]
 8005f04:	f7fe fe4e 	bl	8004ba4 <move_window>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d11d      	bne.n	8005f52 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	6918      	ldr	r0, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a19      	ldr	r1, [r3, #32]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	7efb      	ldrb	r3, [r7, #27]
 8005f24:	f7ff fcd6 	bl	80058d4 <put_lfn>
				fs->wflag = 1;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff fa9f 	bl	8005474 <dir_next>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <dir_register+0x184>
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1d5      	bne.n	8005efc <dir_register+0x12c>
 8005f50:	e000      	b.n	8005f54 <dir_register+0x184>
				if (res != FR_OK) break;
 8005f52:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d128      	bne.n	8005fae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	4619      	mov	r1, r3
 8005f62:	69f8      	ldr	r0, [r7, #28]
 8005f64:	f7fe fe1e 	bl	8004ba4 <move_window>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11b      	bne.n	8005fae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fc03 	bl	800478a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a18      	ldr	r0, [r3, #32]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3324      	adds	r3, #36	@ 0x24
 8005f8c:	220b      	movs	r2, #11
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f7fe fbda 	bl	8004748 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	f002 0218 	and.w	r2, r2, #24
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2201      	movs	r2, #1
 8005fac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3730      	adds	r7, #48	@ 0x30
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	4ec4ec4f 	.word	0x4ec4ec4f

08005fc0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80ca 	beq.w	8006174 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d032      	beq.n	8006050 <get_fileinfo+0x90>
			i = j = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005ff2:	e01b      	b.n	800602c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005ff4:	89fb      	ldrh	r3, [r7, #14]
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fdf7 	bl	8007bec <ff_convert>
 8005ffe:	4603      	mov	r3, r0
 8006000:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006002:	89fb      	ldrh	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d102      	bne.n	800600e <get_fileinfo+0x4e>
 8006008:	2300      	movs	r3, #0
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e01a      	b.n	8006044 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2bfe      	cmp	r3, #254	@ 0xfe
 8006012:	d902      	bls.n	800601a <get_fileinfo+0x5a>
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e014      	b.n	8006044 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	61fa      	str	r2, [r7, #28]
 8006020:	89fa      	ldrh	r2, [r7, #14]
 8006022:	b2d1      	uxtb	r1, r2
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	4413      	add	r3, r2
 8006028:	460a      	mov	r2, r1
 800602a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	61b9      	str	r1, [r7, #24]
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	81fb      	strh	r3, [r7, #14]
 800603e:	89fb      	ldrh	r3, [r7, #14]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1d7      	bne.n	8005ff4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	3316      	adds	r3, #22
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	3316      	adds	r3, #22
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006064:	e04d      	b.n	8006102 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1a      	ldr	r2, [r3, #32]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	1c59      	adds	r1, r3, #1
 800606e:	61f9      	str	r1, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006076:	7dfb      	ldrb	r3, [r7, #23]
 8006078:	2b20      	cmp	r3, #32
 800607a:	d041      	beq.n	8006100 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	2b05      	cmp	r3, #5
 8006080:	d101      	bne.n	8006086 <get_fileinfo+0xc6>
 8006082:	23e5      	movs	r3, #229	@ 0xe5
 8006084:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	2b09      	cmp	r3, #9
 800608a:	d10f      	bne.n	80060ac <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800608c:	89bb      	ldrh	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <get_fileinfo+0xde>
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4413      	add	r3, r2
 8006098:	3316      	adds	r3, #22
 800609a:	222e      	movs	r2, #46	@ 0x2e
 800609c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	61ba      	str	r2, [r7, #24]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	4413      	add	r3, r2
 80060a8:	222e      	movs	r2, #46	@ 0x2e
 80060aa:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	4413      	add	r3, r2
 80060b2:	3309      	adds	r3, #9
 80060b4:	7dfa      	ldrb	r2, [r7, #23]
 80060b6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80060b8:	89bb      	ldrh	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11c      	bne.n	80060f8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b40      	cmp	r3, #64	@ 0x40
 80060c2:	d913      	bls.n	80060ec <get_fileinfo+0x12c>
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	2b5a      	cmp	r3, #90	@ 0x5a
 80060c8:	d810      	bhi.n	80060ec <get_fileinfo+0x12c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	330c      	adds	r3, #12
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d901      	bls.n	80060de <get_fileinfo+0x11e>
 80060da:	2310      	movs	r3, #16
 80060dc:	e000      	b.n	80060e0 <get_fileinfo+0x120>
 80060de:	2308      	movs	r3, #8
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	3320      	adds	r3, #32
 80060ea:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	4413      	add	r3, r2
 80060f2:	3316      	adds	r3, #22
 80060f4:	7dfa      	ldrb	r2, [r7, #23]
 80060f6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	3301      	adds	r3, #1
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e000      	b.n	8006102 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006100:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	2b0a      	cmp	r3, #10
 8006106:	d9ae      	bls.n	8006066 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8006108:	89bb      	ldrh	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10d      	bne.n	800612a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	4413      	add	r3, r2
 8006114:	3316      	adds	r3, #22
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	330c      	adds	r3, #12
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <get_fileinfo+0x16a>
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4413      	add	r3, r2
 8006130:	3309      	adds	r3, #9
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	7ada      	ldrb	r2, [r3, #11]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	331c      	adds	r3, #28
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fa94 	bl	8004674 <ld_dword>
 800614c:	4602      	mov	r2, r0
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	3316      	adds	r3, #22
 8006158:	4618      	mov	r0, r3
 800615a:	f7fe fa8b 	bl	8004674 <ld_dword>
 800615e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	b29a      	uxth	r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	80da      	strh	r2, [r3, #6]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	b29a      	uxth	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	809a      	strh	r2, [r3, #4]
 8006172:	e000      	b.n	8006176 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006174:	bf00      	nop
}
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	61ba      	str	r2, [r7, #24]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80061aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ac:	2b1f      	cmp	r3, #31
 80061ae:	d940      	bls.n	8006232 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80061b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80061b4:	d006      	beq.n	80061c4 <create_name+0x48>
 80061b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80061ba:	d110      	bne.n	80061de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80061bc:	e002      	b.n	80061c4 <create_name+0x48>
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	3301      	adds	r3, #1
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4413      	add	r3, r2
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80061ce:	d0f6      	beq.n	80061be <create_name+0x42>
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	4413      	add	r3, r2
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80061da:	d0f0      	beq.n	80061be <create_name+0x42>
			break;
 80061dc:	e02a      	b.n	8006234 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80061e2:	d901      	bls.n	80061e8 <create_name+0x6c>
 80061e4:	2306      	movs	r3, #6
 80061e6:	e17d      	b.n	80064e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80061e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80061ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f0:	2101      	movs	r1, #1
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 fcfa 	bl	8007bec <ff_convert>
 80061f8:	4603      	mov	r3, r0
 80061fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <create_name+0x8a>
 8006202:	2306      	movs	r3, #6
 8006204:	e16e      	b.n	80064e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006208:	2b7f      	cmp	r3, #127	@ 0x7f
 800620a:	d809      	bhi.n	8006220 <create_name+0xa4>
 800620c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800620e:	4619      	mov	r1, r3
 8006210:	488d      	ldr	r0, [pc, #564]	@ (8006448 <create_name+0x2cc>)
 8006212:	f7fe fafc 	bl	800480e <chk_chr>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <create_name+0xa4>
 800621c:	2306      	movs	r3, #6
 800621e:	e161      	b.n	80064e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	617a      	str	r2, [r7, #20]
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800622e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006230:	e7b4      	b.n	800619c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006232:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	441a      	add	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800623e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006240:	2b1f      	cmp	r3, #31
 8006242:	d801      	bhi.n	8006248 <create_name+0xcc>
 8006244:	2304      	movs	r3, #4
 8006246:	e000      	b.n	800624a <create_name+0xce>
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800624e:	e011      	b.n	8006274 <create_name+0xf8>
		w = lfn[di - 1];
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006256:	3b01      	subs	r3, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006264:	2b20      	cmp	r3, #32
 8006266:	d002      	beq.n	800626e <create_name+0xf2>
 8006268:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800626a:	2b2e      	cmp	r3, #46	@ 0x2e
 800626c:	d106      	bne.n	800627c <create_name+0x100>
		di--;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	3b01      	subs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ea      	bne.n	8006250 <create_name+0xd4>
 800627a:	e000      	b.n	800627e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800627c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	2200      	movs	r2, #0
 8006288:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <create_name+0x118>
 8006290:	2306      	movs	r3, #6
 8006292:	e127      	b.n	80064e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3324      	adds	r3, #36	@ 0x24
 8006298:	220b      	movs	r2, #11
 800629a:	2120      	movs	r1, #32
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fa74 	bl	800478a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e002      	b.n	80062ae <create_name+0x132>
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d0f5      	beq.n	80062a8 <create_name+0x12c>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062c8:	d0ee      	beq.n	80062a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d009      	beq.n	80062e4 <create_name+0x168>
 80062d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062d4:	f043 0303 	orr.w	r3, r3, #3
 80062d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80062dc:	e002      	b.n	80062e4 <create_name+0x168>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d009      	beq.n	80062fe <create_name+0x182>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80062f0:	3b01      	subs	r3, #1
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80062fc:	d1ef      	bne.n	80062de <create_name+0x162>

	i = b = 0; ni = 8;
 80062fe:	2300      	movs	r3, #0
 8006300:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006304:	2300      	movs	r3, #0
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	2308      	movs	r3, #8
 800630a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	61ba      	str	r2, [r7, #24]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800631c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 8090 	beq.w	8006444 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006326:	2b20      	cmp	r3, #32
 8006328:	d006      	beq.n	8006338 <create_name+0x1bc>
 800632a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800632c:	2b2e      	cmp	r3, #46	@ 0x2e
 800632e:	d10a      	bne.n	8006346 <create_name+0x1ca>
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	429a      	cmp	r2, r3
 8006336:	d006      	beq.n	8006346 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800633c:	f043 0303 	orr.w	r3, r3, #3
 8006340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006344:	e07d      	b.n	8006442 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	429a      	cmp	r2, r3
 800634c:	d203      	bcs.n	8006356 <create_name+0x1da>
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d123      	bne.n	800639e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	2b0b      	cmp	r3, #11
 800635a:	d106      	bne.n	800636a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006360:	f043 0303 	orr.w	r3, r3, #3
 8006364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006368:	e075      	b.n	8006456 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	429a      	cmp	r2, r3
 8006370:	d005      	beq.n	800637e <create_name+0x202>
 8006372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006376:	f043 0303 	orr.w	r3, r3, #3
 800637a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	429a      	cmp	r2, r3
 8006384:	d866      	bhi.n	8006454 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	2308      	movs	r3, #8
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	230b      	movs	r3, #11
 8006390:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006392:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800639c:	e051      	b.n	8006442 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800639e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a2:	d914      	bls.n	80063ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80063a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fc1f 	bl	8007bec <ff_convert>
 80063ae:	4603      	mov	r3, r0
 80063b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80063b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <create_name+0x246>
 80063b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ba:	3b80      	subs	r3, #128	@ 0x80
 80063bc:	4a23      	ldr	r2, [pc, #140]	@ (800644c <create_name+0x2d0>)
 80063be:	5cd3      	ldrb	r3, [r2, r3]
 80063c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80063c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80063ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <create_name+0x268>
 80063d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063d6:	4619      	mov	r1, r3
 80063d8:	481d      	ldr	r0, [pc, #116]	@ (8006450 <create_name+0x2d4>)
 80063da:	f7fe fa18 	bl	800480e <chk_chr>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80063e4:	235f      	movs	r3, #95	@ 0x5f
 80063e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80063e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063ec:	f043 0303 	orr.w	r3, r3, #3
 80063f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063f4:	e01b      	b.n	800642e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80063f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f8:	2b40      	cmp	r3, #64	@ 0x40
 80063fa:	d909      	bls.n	8006410 <create_name+0x294>
 80063fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8006400:	d806      	bhi.n	8006410 <create_name+0x294>
					b |= 2;
 8006402:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006406:	f043 0302 	orr.w	r3, r3, #2
 800640a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800640e:	e00e      	b.n	800642e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006410:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006412:	2b60      	cmp	r3, #96	@ 0x60
 8006414:	d90b      	bls.n	800642e <create_name+0x2b2>
 8006416:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006418:	2b7a      	cmp	r3, #122	@ 0x7a
 800641a:	d808      	bhi.n	800642e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800641c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800642a:	3b20      	subs	r3, #32
 800642c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	623a      	str	r2, [r7, #32]
 8006434:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006436:	b2d1      	uxtb	r1, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	460a      	mov	r2, r1
 800643e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006442:	e763      	b.n	800630c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006444:	bf00      	nop
 8006446:	e006      	b.n	8006456 <create_name+0x2da>
 8006448:	080080d4 	.word	0x080080d4
 800644c:	08008134 	.word	0x08008134
 8006450:	080080e0 	.word	0x080080e0
			if (si > di) break;			/* No extension */
 8006454:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800645c:	2be5      	cmp	r3, #229	@ 0xe5
 800645e:	d103      	bne.n	8006468 <create_name+0x2ec>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2205      	movs	r2, #5
 8006464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b08      	cmp	r3, #8
 800646c:	d104      	bne.n	8006478 <create_name+0x2fc>
 800646e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800647c:	f003 030c 	and.w	r3, r3, #12
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d005      	beq.n	8006490 <create_name+0x314>
 8006484:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006488:	f003 0303 	and.w	r3, r3, #3
 800648c:	2b03      	cmp	r3, #3
 800648e:	d105      	bne.n	800649c <create_name+0x320>
 8006490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006494:	f043 0302 	orr.w	r3, r3, #2
 8006498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800649c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d117      	bne.n	80064d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80064a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d105      	bne.n	80064c0 <create_name+0x344>
 80064b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064b8:	f043 0310 	orr.w	r3, r3, #16
 80064bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80064c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80064c4:	f003 030c 	and.w	r3, r3, #12
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d105      	bne.n	80064d8 <create_name+0x35c>
 80064cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80064de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80064e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3728      	adds	r7, #40	@ 0x28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006500:	e002      	b.n	8006508 <follow_path+0x1c>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b2f      	cmp	r3, #47	@ 0x2f
 800650e:	d0f8      	beq.n	8006502 <follow_path+0x16>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b5c      	cmp	r3, #92	@ 0x5c
 8006516:	d0f4      	beq.n	8006502 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2200      	movs	r2, #0
 800651c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b1f      	cmp	r3, #31
 8006524:	d80a      	bhi.n	800653c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2280      	movs	r2, #128	@ 0x80
 800652a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800652e:	2100      	movs	r1, #0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fe ff16 	bl	8005362 <dir_sdi>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]
 800653a:	e048      	b.n	80065ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800653c:	463b      	mov	r3, r7
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff fe1b 	bl	800617c <create_name>
 8006546:	4603      	mov	r3, r0
 8006548:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d139      	bne.n	80065c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff fb7d 	bl	8005c50 <dir_find>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006560:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00a      	beq.n	800657e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b04      	cmp	r3, #4
 800656c:	d12c      	bne.n	80065c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d127      	bne.n	80065c8 <follow_path+0xdc>
 8006578:	2305      	movs	r3, #5
 800657a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800657c:	e024      	b.n	80065c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d121      	bne.n	80065cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	799b      	ldrb	r3, [r3, #6]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006594:	2305      	movs	r3, #5
 8006596:	75fb      	strb	r3, [r7, #23]
 8006598:	e019      	b.n	80065ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	8992      	ldrh	r2, [r2, #12]
 80065a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ac:	fb00 f202 	mul.w	r2, r0, r2
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	440b      	add	r3, r1
 80065b4:	4619      	mov	r1, r3
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff f879 	bl	80056ae <ld_clust>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065c2:	e7bb      	b.n	800653c <follow_path+0x50>
			if (res != FR_OK) break;
 80065c4:	bf00      	nop
 80065c6:	e002      	b.n	80065ce <follow_path+0xe2>
				break;
 80065c8:	bf00      	nop
 80065ca:	e000      	b.n	80065ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065cc:	bf00      	nop
			}
		}
	}

	return res;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d031      	beq.n	8006652 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e002      	b.n	80065fc <get_ldnumber+0x24>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	3301      	adds	r3, #1
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b1f      	cmp	r3, #31
 8006602:	d903      	bls.n	800660c <get_ldnumber+0x34>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b3a      	cmp	r3, #58	@ 0x3a
 800660a:	d1f4      	bne.n	80065f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b3a      	cmp	r3, #58	@ 0x3a
 8006612:	d11c      	bne.n	800664e <get_ldnumber+0x76>
			tp = *path;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	60fa      	str	r2, [r7, #12]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	3b30      	subs	r3, #48	@ 0x30
 8006624:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b09      	cmp	r3, #9
 800662a:	d80e      	bhi.n	800664a <get_ldnumber+0x72>
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	429a      	cmp	r2, r3
 8006632:	d10a      	bne.n	800664a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d107      	bne.n	800664a <get_ldnumber+0x72>
					vol = (int)i;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	3301      	adds	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	e002      	b.n	8006654 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006652:	693b      	ldr	r3, [r7, #16]
}
 8006654:	4618      	mov	r0, r3
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	70da      	strb	r2, [r3, #3]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f04f 32ff 	mov.w	r2, #4294967295
 8006676:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fe fa92 	bl	8004ba4 <move_window>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <check_fs+0x2a>
 8006686:	2304      	movs	r3, #4
 8006688:	e038      	b.n	80066fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	3338      	adds	r3, #56	@ 0x38
 800668e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd ffd6 	bl	8004644 <ld_word>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d001      	beq.n	80066a8 <check_fs+0x48>
 80066a4:	2303      	movs	r3, #3
 80066a6:	e029      	b.n	80066fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066ae:	2be9      	cmp	r3, #233	@ 0xe9
 80066b0:	d009      	beq.n	80066c6 <check_fs+0x66>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066b8:	2beb      	cmp	r3, #235	@ 0xeb
 80066ba:	d11e      	bne.n	80066fa <check_fs+0x9a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80066c2:	2b90      	cmp	r3, #144	@ 0x90
 80066c4:	d119      	bne.n	80066fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3338      	adds	r3, #56	@ 0x38
 80066ca:	3336      	adds	r3, #54	@ 0x36
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd ffd1 	bl	8004674 <ld_dword>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80066d8:	4a0a      	ldr	r2, [pc, #40]	@ (8006704 <check_fs+0xa4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d101      	bne.n	80066e2 <check_fs+0x82>
 80066de:	2300      	movs	r3, #0
 80066e0:	e00c      	b.n	80066fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3338      	adds	r3, #56	@ 0x38
 80066e6:	3352      	adds	r3, #82	@ 0x52
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fd ffc3 	bl	8004674 <ld_dword>
 80066ee:	4603      	mov	r3, r0
 80066f0:	4a05      	ldr	r2, [pc, #20]	@ (8006708 <check_fs+0xa8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <check_fs+0x9a>
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066fa:	2302      	movs	r3, #2
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	00544146 	.word	0x00544146
 8006708:	33544146 	.word	0x33544146

0800670c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b096      	sub	sp, #88	@ 0x58
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff ff59 	bl	80065d8 <get_ldnumber>
 8006726:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672a:	2b00      	cmp	r3, #0
 800672c:	da01      	bge.n	8006732 <find_volume+0x26>
 800672e:	230b      	movs	r3, #11
 8006730:	e265      	b.n	8006bfe <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006732:	4a9f      	ldr	r2, [pc, #636]	@ (80069b0 <find_volume+0x2a4>)
 8006734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <find_volume+0x3a>
 8006742:	230c      	movs	r3, #12
 8006744:	e25b      	b.n	8006bfe <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800674a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01a      	beq.n	8006792 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800675c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	4618      	mov	r0, r3
 8006762:	f7fd fecf 	bl	8004504 <disk_status>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800676c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10c      	bne.n	8006792 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <find_volume+0x82>
 800677e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800678a:	230a      	movs	r3, #10
 800678c:	e237      	b.n	8006bfe <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800678e:	2300      	movs	r3, #0
 8006790:	e235      	b.n	8006bfe <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679a:	b2da      	uxtb	r2, r3
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fd fec7 	bl	8004538 <disk_initialize>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80067b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067bc:	2303      	movs	r3, #3
 80067be:	e21e      	b.n	8006bfe <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <find_volume+0xca>
 80067c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80067d2:	230a      	movs	r3, #10
 80067d4:	e213      	b.n	8006bfe <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	7858      	ldrb	r0, [r3, #1]
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	330c      	adds	r3, #12
 80067de:	461a      	mov	r2, r3
 80067e0:	2102      	movs	r1, #2
 80067e2:	f7fd ff11 	bl	8004608 <disk_ioctl>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <find_volume+0xe4>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e206      	b.n	8006bfe <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	899b      	ldrh	r3, [r3, #12]
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f8:	d80d      	bhi.n	8006816 <find_volume+0x10a>
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	899b      	ldrh	r3, [r3, #12]
 80067fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006802:	d308      	bcc.n	8006816 <find_volume+0x10a>
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	899b      	ldrh	r3, [r3, #12]
 8006808:	461a      	mov	r2, r3
 800680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680c:	899b      	ldrh	r3, [r3, #12]
 800680e:	3b01      	subs	r3, #1
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <find_volume+0x10e>
 8006816:	2301      	movs	r3, #1
 8006818:	e1f1      	b.n	8006bfe <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800681e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006820:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006822:	f7ff ff1d 	bl	8006660 <check_fs>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800682c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006830:	2b02      	cmp	r3, #2
 8006832:	d149      	bne.n	80068c8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006834:	2300      	movs	r3, #0
 8006836:	643b      	str	r3, [r7, #64]	@ 0x40
 8006838:	e01e      	b.n	8006878 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006848:	4413      	add	r3, r2
 800684a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	3304      	adds	r3, #4
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d006      	beq.n	8006864 <find_volume+0x158>
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	3308      	adds	r3, #8
 800685a:	4618      	mov	r0, r3
 800685c:	f7fd ff0a 	bl	8004674 <ld_dword>
 8006860:	4602      	mov	r2, r0
 8006862:	e000      	b.n	8006866 <find_volume+0x15a>
 8006864:	2200      	movs	r2, #0
 8006866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	3358      	adds	r3, #88	@ 0x58
 800686c:	443b      	add	r3, r7
 800686e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006874:	3301      	adds	r3, #1
 8006876:	643b      	str	r3, [r7, #64]	@ 0x40
 8006878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800687a:	2b03      	cmp	r3, #3
 800687c:	d9dd      	bls.n	800683a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800687e:	2300      	movs	r3, #0
 8006880:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <find_volume+0x182>
 8006888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800688a:	3b01      	subs	r3, #1
 800688c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800688e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	3358      	adds	r3, #88	@ 0x58
 8006894:	443b      	add	r3, r7
 8006896:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800689a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800689c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <find_volume+0x1a2>
 80068a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80068a6:	f7ff fedb 	bl	8006660 <check_fs>
 80068aa:	4603      	mov	r3, r0
 80068ac:	e000      	b.n	80068b0 <find_volume+0x1a4>
 80068ae:	2303      	movs	r3, #3
 80068b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80068b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d905      	bls.n	80068c8 <find_volume+0x1bc>
 80068bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068be:	3301      	adds	r3, #1
 80068c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d9e2      	bls.n	800688e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d101      	bne.n	80068d4 <find_volume+0x1c8>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e194      	b.n	8006bfe <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d901      	bls.n	80068e0 <find_volume+0x1d4>
 80068dc:	230d      	movs	r3, #13
 80068de:	e18e      	b.n	8006bfe <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	3338      	adds	r3, #56	@ 0x38
 80068e4:	330b      	adds	r3, #11
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd feac 	bl	8004644 <ld_word>
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f2:	899b      	ldrh	r3, [r3, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <find_volume+0x1f0>
 80068f8:	230d      	movs	r3, #13
 80068fa:	e180      	b.n	8006bfe <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	3338      	adds	r3, #56	@ 0x38
 8006900:	3316      	adds	r3, #22
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd fe9e 	bl	8004644 <ld_word>
 8006908:	4603      	mov	r3, r0
 800690a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800690c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <find_volume+0x214>
 8006912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006914:	3338      	adds	r3, #56	@ 0x38
 8006916:	3324      	adds	r3, #36	@ 0x24
 8006918:	4618      	mov	r0, r3
 800691a:	f7fd feab 	bl	8004674 <ld_dword>
 800691e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006924:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006928:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	789b      	ldrb	r3, [r3, #2]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d005      	beq.n	8006944 <find_volume+0x238>
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	789b      	ldrb	r3, [r3, #2]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d001      	beq.n	8006944 <find_volume+0x238>
 8006940:	230d      	movs	r3, #13
 8006942:	e15c      	b.n	8006bfe <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	789b      	ldrb	r3, [r3, #2]
 8006948:	461a      	mov	r2, r3
 800694a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006958:	461a      	mov	r2, r3
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	895b      	ldrh	r3, [r3, #10]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <find_volume+0x26c>
 8006966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006968:	895b      	ldrh	r3, [r3, #10]
 800696a:	461a      	mov	r2, r3
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	895b      	ldrh	r3, [r3, #10]
 8006970:	3b01      	subs	r3, #1
 8006972:	4013      	ands	r3, r2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <find_volume+0x270>
 8006978:	230d      	movs	r3, #13
 800697a:	e140      	b.n	8006bfe <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	3338      	adds	r3, #56	@ 0x38
 8006980:	3311      	adds	r3, #17
 8006982:	4618      	mov	r0, r3
 8006984:	f7fd fe5e 	bl	8004644 <ld_word>
 8006988:	4603      	mov	r3, r0
 800698a:	461a      	mov	r2, r3
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	891b      	ldrh	r3, [r3, #8]
 8006994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006996:	8992      	ldrh	r2, [r2, #12]
 8006998:	0952      	lsrs	r2, r2, #5
 800699a:	b292      	uxth	r2, r2
 800699c:	fbb3 f1f2 	udiv	r1, r3, r2
 80069a0:	fb01 f202 	mul.w	r2, r1, r2
 80069a4:	1a9b      	subs	r3, r3, r2
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <find_volume+0x2a8>
 80069ac:	230d      	movs	r3, #13
 80069ae:	e126      	b.n	8006bfe <find_volume+0x4f2>
 80069b0:	20002f9c 	.word	0x20002f9c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	3338      	adds	r3, #56	@ 0x38
 80069b8:	3313      	adds	r3, #19
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fd fe42 	bl	8004644 <ld_word>
 80069c0:	4603      	mov	r3, r0
 80069c2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <find_volume+0x2cc>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069cc:	3338      	adds	r3, #56	@ 0x38
 80069ce:	3320      	adds	r3, #32
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd fe4f 	bl	8004674 <ld_dword>
 80069d6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	3338      	adds	r3, #56	@ 0x38
 80069dc:	330e      	adds	r3, #14
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fd fe30 	bl	8004644 <ld_word>
 80069e4:	4603      	mov	r3, r0
 80069e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <find_volume+0x2e6>
 80069ee:	230d      	movs	r3, #13
 80069f0:	e105      	b.n	8006bfe <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80069f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f6:	4413      	add	r3, r2
 80069f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069fa:	8911      	ldrh	r1, [r2, #8]
 80069fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069fe:	8992      	ldrh	r2, [r2, #12]
 8006a00:	0952      	lsrs	r2, r2, #5
 8006a02:	b292      	uxth	r2, r2
 8006a04:	fbb1 f2f2 	udiv	r2, r1, r2
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d201      	bcs.n	8006a1a <find_volume+0x30e>
 8006a16:	230d      	movs	r3, #13
 8006a18:	e0f1      	b.n	8006bfe <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a22:	8952      	ldrh	r2, [r2, #10]
 8006a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <find_volume+0x328>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e0e4      	b.n	8006bfe <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006a34:	2303      	movs	r3, #3
 8006a36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d802      	bhi.n	8006a4a <find_volume+0x33e>
 8006a44:	2302      	movs	r3, #2
 8006a46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d802      	bhi.n	8006a5a <find_volume+0x34e>
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a60:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a66:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a6c:	441a      	add	r2, r3
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006a72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	441a      	add	r2, r3
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d11e      	bne.n	8006ac2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	3338      	adds	r3, #56	@ 0x38
 8006a88:	332a      	adds	r3, #42	@ 0x2a
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fd fdda 	bl	8004644 <ld_word>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <find_volume+0x38e>
 8006a96:	230d      	movs	r3, #13
 8006a98:	e0b1      	b.n	8006bfe <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	891b      	ldrh	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <find_volume+0x39a>
 8006aa2:	230d      	movs	r3, #13
 8006aa4:	e0ab      	b.n	8006bfe <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	3338      	adds	r3, #56	@ 0x38
 8006aaa:	332c      	adds	r3, #44	@ 0x2c
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fd fde1 	bl	8004674 <ld_dword>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac0:	e01f      	b.n	8006b02 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac4:	891b      	ldrh	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <find_volume+0x3c2>
 8006aca:	230d      	movs	r3, #13
 8006acc:	e097      	b.n	8006bfe <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ad4:	441a      	add	r2, r3
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ada:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d103      	bne.n	8006aea <find_volume+0x3de>
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	e00a      	b.n	8006b00 <find_volume+0x3f4>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	4613      	mov	r3, r2
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	4413      	add	r3, r2
 8006af4:	085a      	lsrs	r2, r3, #1
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006b00:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b08:	899b      	ldrh	r3, [r3, #12]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b0e:	440b      	add	r3, r1
 8006b10:	3b01      	subs	r3, #1
 8006b12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b14:	8989      	ldrh	r1, [r1, #12]
 8006b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d201      	bcs.n	8006b22 <find_volume+0x416>
 8006b1e:	230d      	movs	r3, #13
 8006b20:	e06d      	b.n	8006bfe <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295
 8006b28:	619a      	str	r2, [r3, #24]
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	699a      	ldr	r2, [r3, #24]
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b30:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	2280      	movs	r2, #128	@ 0x80
 8006b36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d149      	bne.n	8006bd4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	3338      	adds	r3, #56	@ 0x38
 8006b44:	3330      	adds	r3, #48	@ 0x30
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fd7c 	bl	8004644 <ld_word>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d140      	bne.n	8006bd4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b54:	3301      	adds	r3, #1
 8006b56:	4619      	mov	r1, r3
 8006b58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b5a:	f7fe f823 	bl	8004ba4 <move_window>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d137      	bne.n	8006bd4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	2200      	movs	r2, #0
 8006b68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6c:	3338      	adds	r3, #56	@ 0x38
 8006b6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fd fd66 	bl	8004644 <ld_word>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d127      	bne.n	8006bd4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	3338      	adds	r3, #56	@ 0x38
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fd fd73 	bl	8004674 <ld_dword>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4a1d      	ldr	r2, [pc, #116]	@ (8006c08 <find_volume+0x4fc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d11e      	bne.n	8006bd4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	3338      	adds	r3, #56	@ 0x38
 8006b9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd fd68 	bl	8004674 <ld_dword>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4a19      	ldr	r2, [pc, #100]	@ (8006c0c <find_volume+0x500>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d113      	bne.n	8006bd4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	3338      	adds	r3, #56	@ 0x38
 8006bb0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd fd5d 	bl	8004674 <ld_dword>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	3338      	adds	r3, #56	@ 0x38
 8006bc4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fd fd53 	bl	8004674 <ld_dword>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006bda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c10 <find_volume+0x504>)
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c10 <find_volume+0x504>)
 8006be6:	801a      	strh	r2, [r3, #0]
 8006be8:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <find_volume+0x504>)
 8006bea:	881a      	ldrh	r2, [r3, #0]
 8006bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bee:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf2:	4a08      	ldr	r2, [pc, #32]	@ (8006c14 <find_volume+0x508>)
 8006bf4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006bf8:	f7fd ff6c 	bl	8004ad4 <clear_lock>
#endif
	return FR_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3758      	adds	r7, #88	@ 0x58
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	41615252 	.word	0x41615252
 8006c0c:	61417272 	.word	0x61417272
 8006c10:	20002fa0 	.word	0x20002fa0
 8006c14:	20002fc4 	.word	0x20002fc4

08006c18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c22:	2309      	movs	r3, #9
 8006c24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01c      	beq.n	8006c66 <validate+0x4e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d018      	beq.n	8006c66 <validate+0x4e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d013      	beq.n	8006c66 <validate+0x4e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	889a      	ldrh	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	88db      	ldrh	r3, [r3, #6]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d10c      	bne.n	8006c66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd fc56 	bl	8004504 <disk_status>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <validate+0x4e>
			res = FR_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <validate+0x5a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	e000      	b.n	8006c74 <validate+0x5c>
 8006c72:	2300      	movs	r3, #0
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	6013      	str	r3, [r2, #0]
	return res;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c96:	f107 0310 	add.w	r3, r7, #16
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fc9c 	bl	80065d8 <get_ldnumber>
 8006ca0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	da01      	bge.n	8006cac <f_mount+0x28>
 8006ca8:	230b      	movs	r3, #11
 8006caa:	e02b      	b.n	8006d04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006cac:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <f_mount+0x88>)
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006cbc:	69b8      	ldr	r0, [r7, #24]
 8006cbe:	f7fd ff09 	bl	8004ad4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	490d      	ldr	r1, [pc, #52]	@ (8006d0c <f_mount+0x88>)
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <f_mount+0x66>
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d001      	beq.n	8006cee <f_mount+0x6a>
 8006cea:	2300      	movs	r3, #0
 8006cec:	e00a      	b.n	8006d04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006cee:	f107 010c 	add.w	r1, r7, #12
 8006cf2:	f107 0308 	add.w	r3, r7, #8
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fd07 	bl	800670c <find_volume>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20002f9c 	.word	0x20002f9c

08006d10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b09a      	sub	sp, #104	@ 0x68
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <f_open+0x18>
 8006d24:	2309      	movs	r3, #9
 8006d26:	e1b7      	b.n	8007098 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d30:	79fa      	ldrb	r2, [r7, #7]
 8006d32:	f107 0114 	add.w	r1, r7, #20
 8006d36:	f107 0308 	add.w	r3, r7, #8
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fce6 	bl	800670c <find_volume>
 8006d40:	4603      	mov	r3, r0
 8006d42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006d46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 819b 	bne.w	8007086 <f_open+0x376>
		dj.obj.fs = fs;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	f107 0318 	add.w	r3, r7, #24
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fbc5 	bl	80064ec <follow_path>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d118      	bne.n	8006da2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d74:	b25b      	sxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da03      	bge.n	8006d82 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d80:	e00f      	b.n	8006da2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	bf8c      	ite	hi
 8006d88:	2301      	movhi	r3, #1
 8006d8a:	2300      	movls	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f107 0318 	add.w	r3, r7, #24
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd fd54 	bl	8004844 <chk_lock>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	f003 031c 	and.w	r3, r3, #28
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d07f      	beq.n	8006eac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006dac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d017      	beq.n	8006de4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006db4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d10e      	bne.n	8006dda <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006dbc:	f7fd fd9e 	bl	80048fc <enq_lock>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <f_open+0xc4>
 8006dc6:	f107 0318 	add.w	r3, r7, #24
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff f800 	bl	8005dd0 <dir_register>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	e000      	b.n	8006dd6 <f_open+0xc6>
 8006dd4:	2312      	movs	r3, #18
 8006dd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	f043 0308 	orr.w	r3, r3, #8
 8006de0:	71fb      	strb	r3, [r7, #7]
 8006de2:	e010      	b.n	8006e06 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006de4:	7fbb      	ldrb	r3, [r7, #30]
 8006de6:	f003 0311 	and.w	r3, r3, #17
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <f_open+0xe6>
					res = FR_DENIED;
 8006dee:	2307      	movs	r3, #7
 8006df0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006df4:	e007      	b.n	8006e06 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006df6:	79fb      	ldrb	r3, [r7, #7]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <f_open+0xf6>
 8006e00:	2308      	movs	r3, #8
 8006e02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006e06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d168      	bne.n	8006ee0 <f_open+0x1d0>
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d063      	beq.n	8006ee0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006e18:	f7fd fb16 	bl	8004448 <get_fattime>
 8006e1c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	330e      	adds	r3, #14
 8006e22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fd fc63 	bl	80046f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	3316      	adds	r3, #22
 8006e2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fd fc5d 	bl	80046f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	330b      	adds	r3, #11
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e42:	4611      	mov	r1, r2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fc32 	bl	80056ae <ld_clust>
 8006e4a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e50:	2200      	movs	r2, #0
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fe fc4a 	bl	80056ec <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	331c      	adds	r3, #28
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fd fc46 	bl	80046f0 <st_dword>
					fs->wflag = 1;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2201      	movs	r2, #1
 8006e68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d037      	beq.n	8006ee0 <f_open+0x1d0>
						dw = fs->winsect;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e74:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006e76:	f107 0318 	add.w	r3, r7, #24
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe f93a 	bl	80050f8 <remove_chain>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006e8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d126      	bne.n	8006ee0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd fe84 	bl	8004ba4 <move_window>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ea6:	3a01      	subs	r2, #1
 8006ea8:	615a      	str	r2, [r3, #20]
 8006eaa:	e019      	b.n	8006ee0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006eac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d115      	bne.n	8006ee0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006eb4:	7fbb      	ldrb	r3, [r7, #30]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006ec4:	e00c      	b.n	8006ee0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <f_open+0x1d0>
 8006ed0:	7fbb      	ldrb	r3, [r7, #30]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <f_open+0x1d0>
						res = FR_DENIED;
 8006eda:	2307      	movs	r3, #7
 8006edc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ee0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d126      	bne.n	8006f36 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006f02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	bf8c      	ite	hi
 8006f0e:	2301      	movhi	r3, #1
 8006f10:	2300      	movls	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fd fd0f 	bl	8004940 <inc_lock>
 8006f22:	4602      	mov	r2, r0
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <f_open+0x226>
 8006f30:	2302      	movs	r3, #2
 8006f32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 80a3 	bne.w	8007086 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fbb1 	bl	80056ae <ld_clust>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	331c      	adds	r3, #28
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fd fb8c 	bl	8004674 <ld_dword>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	88da      	ldrh	r2, [r3, #6]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	79fa      	ldrb	r2, [r7, #7]
 8006f7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3330      	adds	r3, #48	@ 0x30
 8006f92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fd fbf6 	bl	800478a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d06e      	beq.n	8007086 <f_open+0x376>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d06a      	beq.n	8007086 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	895b      	ldrh	r3, [r3, #10]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	899b      	ldrh	r3, [r3, #12]
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd4:	e016      	b.n	8007004 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd fe9f 	bl	8004d1e <get_fat>
 8006fe0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d802      	bhi.n	8006fee <f_open+0x2de>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d102      	bne.n	8006ffc <f_open+0x2ec>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ffc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007004:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <f_open+0x304>
 800700c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800700e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007010:	429a      	cmp	r2, r3
 8007012:	d8e0      	bhi.n	8006fd6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007018:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800701a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800701e:	2b00      	cmp	r3, #0
 8007020:	d131      	bne.n	8007086 <f_open+0x376>
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	899b      	ldrh	r3, [r3, #12]
 8007026:	461a      	mov	r2, r3
 8007028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800702a:	fbb3 f1f2 	udiv	r1, r3, r2
 800702e:	fb01 f202 	mul.w	r2, r1, r2
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d026      	beq.n	8007086 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800703c:	4618      	mov	r0, r3
 800703e:	f7fd fe4f 	bl	8004ce0 <clust2sect>
 8007042:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <f_open+0x342>
						res = FR_INT_ERR;
 800704a:	2302      	movs	r3, #2
 800704c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007050:	e019      	b.n	8007086 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	899b      	ldrh	r3, [r3, #12]
 8007056:	461a      	mov	r2, r3
 8007058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800705a:	fbb3 f2f2 	udiv	r2, r3, r2
 800705e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007060:	441a      	add	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	7858      	ldrb	r0, [r3, #1]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a1a      	ldr	r2, [r3, #32]
 8007074:	2301      	movs	r3, #1
 8007076:	f7fd fa87 	bl	8004588 <disk_read>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <f_open+0x376>
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007086:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <f_open+0x384>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007094:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007098:	4618      	mov	r0, r3
 800709a:	3768      	adds	r7, #104	@ 0x68
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	@ 0x38
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f107 0214 	add.w	r2, r7, #20
 80070be:	4611      	mov	r1, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fda9 	bl	8006c18 <validate>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d107      	bne.n	80070e4 <f_read+0x44>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	7d5b      	ldrb	r3, [r3, #21]
 80070d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80070dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <f_read+0x4a>
 80070e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070e8:	e135      	b.n	8007356 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	7d1b      	ldrb	r3, [r3, #20]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <f_read+0x5a>
 80070f6:	2307      	movs	r3, #7
 80070f8:	e12d      	b.n	8007356 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	429a      	cmp	r2, r3
 800710c:	f240 811e 	bls.w	800734c <f_read+0x2ac>
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007114:	e11a      	b.n	800734c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	8992      	ldrh	r2, [r2, #12]
 800711e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007122:	fb01 f202 	mul.w	r2, r1, r2
 8007126:	1a9b      	subs	r3, r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	f040 80d5 	bne.w	80072d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	8992      	ldrh	r2, [r2, #12]
 8007136:	fbb3 f3f2 	udiv	r3, r3, r2
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	8952      	ldrh	r2, [r2, #10]
 800713e:	3a01      	subs	r2, #1
 8007140:	4013      	ands	r3, r2
 8007142:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d12f      	bne.n	80071aa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	633b      	str	r3, [r7, #48]	@ 0x30
 8007158:	e013      	b.n	8007182 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	4619      	mov	r1, r3
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7fe f8c2 	bl	80052f2 <clmt_clust>
 800716e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007170:	e007      	b.n	8007182 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f7fd fdcf 	bl	8004d1e <get_fat>
 8007180:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	2b01      	cmp	r3, #1
 8007186:	d804      	bhi.n	8007192 <f_read+0xf2>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2202      	movs	r2, #2
 800718c:	755a      	strb	r2, [r3, #21]
 800718e:	2302      	movs	r3, #2
 8007190:	e0e1      	b.n	8007356 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007198:	d104      	bne.n	80071a4 <f_read+0x104>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	755a      	strb	r2, [r3, #21]
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0d8      	b.n	8007356 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fd fd94 	bl	8004ce0 <clust2sect>
 80071b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <f_read+0x12a>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2202      	movs	r2, #2
 80071c4:	755a      	strb	r2, [r3, #21]
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0c5      	b.n	8007356 <f_read+0x2b6>
			sect += csect;
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	4413      	add	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	899b      	ldrh	r3, [r3, #12]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	fbb3 f3f2 	udiv	r3, r3, r2
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d041      	beq.n	800726a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	4413      	add	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	8952      	ldrh	r2, [r2, #10]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d905      	bls.n	8007200 <f_read+0x160>
					cc = fs->csize - csect;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	895b      	ldrh	r3, [r3, #10]
 80071f8:	461a      	mov	r2, r3
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	7858      	ldrb	r0, [r3, #1]
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800720a:	f7fd f9bd 	bl	8004588 <disk_read>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <f_read+0x17e>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	755a      	strb	r2, [r3, #21]
 800721a:	2301      	movs	r3, #1
 800721c:	e09b      	b.n	8007356 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	7d1b      	ldrb	r3, [r3, #20]
 8007222:	b25b      	sxtb	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	da18      	bge.n	800725a <f_read+0x1ba>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1a      	ldr	r2, [r3, #32]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007232:	429a      	cmp	r2, r3
 8007234:	d911      	bls.n	800725a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a1a      	ldr	r2, [r3, #32]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	8992      	ldrh	r2, [r2, #12]
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007248:	18d0      	adds	r0, r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	899b      	ldrh	r3, [r3, #12]
 8007254:	461a      	mov	r2, r3
 8007256:	f7fd fa77 	bl	8004748 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	899b      	ldrh	r3, [r3, #12]
 800725e:	461a      	mov	r2, r3
 8007260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007262:	fb02 f303 	mul.w	r3, r2, r3
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007268:	e05c      	b.n	8007324 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	429a      	cmp	r2, r3
 8007272:	d02e      	beq.n	80072d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	7d1b      	ldrb	r3, [r3, #20]
 8007278:	b25b      	sxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	da18      	bge.n	80072b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	7858      	ldrb	r0, [r3, #1]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1a      	ldr	r2, [r3, #32]
 800728c:	2301      	movs	r3, #1
 800728e:	f7fd f99b 	bl	80045c8 <disk_write>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d004      	beq.n	80072a2 <f_read+0x202>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	755a      	strb	r2, [r3, #21]
 800729e:	2301      	movs	r3, #1
 80072a0:	e059      	b.n	8007356 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	7d1b      	ldrb	r3, [r3, #20]
 80072a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	7858      	ldrb	r0, [r3, #1]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072ba:	2301      	movs	r3, #1
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	f7fd f963 	bl	8004588 <disk_read>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <f_read+0x232>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	755a      	strb	r2, [r3, #21]
 80072ce:	2301      	movs	r3, #1
 80072d0:	e041      	b.n	8007356 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	899b      	ldrh	r3, [r3, #12]
 80072dc:	4618      	mov	r0, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	8992      	ldrh	r2, [r2, #12]
 80072e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80072ea:	fb01 f202 	mul.w	r2, r1, r2
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	1ac3      	subs	r3, r0, r3
 80072f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80072f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d901      	bls.n	8007300 <f_read+0x260>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	8992      	ldrh	r2, [r2, #12]
 800730e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007312:	fb00 f202 	mul.w	r2, r0, r2
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	440b      	add	r3, r1
 800731a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800731c:	4619      	mov	r1, r3
 800731e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007320:	f7fd fa12 	bl	8004748 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	4413      	add	r3, r2
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	441a      	add	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	619a      	str	r2, [r3, #24]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	441a      	add	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f47f aee1 	bne.w	8007116 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3738      	adds	r7, #56	@ 0x38
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b08c      	sub	sp, #48	@ 0x30
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
 800736a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f107 0210 	add.w	r2, r7, #16
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff fc4a 	bl	8006c18 <validate>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800738a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800738e:	2b00      	cmp	r3, #0
 8007390:	d107      	bne.n	80073a2 <f_write+0x44>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	7d5b      	ldrb	r3, [r3, #21]
 8007396:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800739a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <f_write+0x4a>
 80073a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073a6:	e16a      	b.n	800767e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	7d1b      	ldrb	r3, [r3, #20]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <f_write+0x5a>
 80073b4:	2307      	movs	r3, #7
 80073b6:	e162      	b.n	800767e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	441a      	add	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	f080 814c 	bcs.w	8007662 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	43db      	mvns	r3, r3
 80073d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80073d2:	e146      	b.n	8007662 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	8992      	ldrh	r2, [r2, #12]
 80073dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80073e0:	fb01 f202 	mul.w	r2, r1, r2
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f040 80f1 	bne.w	80075ce <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	8992      	ldrh	r2, [r2, #12]
 80073f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	8952      	ldrh	r2, [r2, #10]
 80073fc:	3a01      	subs	r2, #1
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d143      	bne.n	8007490 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10c      	bne.n	800742a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007418:	2b00      	cmp	r3, #0
 800741a:	d11a      	bne.n	8007452 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2100      	movs	r1, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f7fd fece 	bl	80051c2 <create_chain>
 8007426:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007428:	e013      	b.n	8007452 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d007      	beq.n	8007442 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	4619      	mov	r1, r3
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7fd ff5a 	bl	80052f2 <clmt_clust>
 800743e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007440:	e007      	b.n	8007452 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	f7fd feb9 	bl	80051c2 <create_chain>
 8007450:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8109 	beq.w	800766c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800745a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745c:	2b01      	cmp	r3, #1
 800745e:	d104      	bne.n	800746a <f_write+0x10c>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2202      	movs	r2, #2
 8007464:	755a      	strb	r2, [r3, #21]
 8007466:	2302      	movs	r3, #2
 8007468:	e109      	b.n	800767e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d104      	bne.n	800747c <f_write+0x11e>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	755a      	strb	r2, [r3, #21]
 8007478:	2301      	movs	r3, #1
 800747a:	e100      	b.n	800767e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007480:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <f_write+0x132>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800748e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	7d1b      	ldrb	r3, [r3, #20]
 8007494:	b25b      	sxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	da18      	bge.n	80074cc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	7858      	ldrb	r0, [r3, #1]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	2301      	movs	r3, #1
 80074aa:	f7fd f88d 	bl	80045c8 <disk_write>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <f_write+0x160>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	755a      	strb	r2, [r3, #21]
 80074ba:	2301      	movs	r3, #1
 80074bc:	e0df      	b.n	800767e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	7d1b      	ldrb	r3, [r3, #20]
 80074c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4610      	mov	r0, r2
 80074d6:	f7fd fc03 	bl	8004ce0 <clust2sect>
 80074da:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <f_write+0x18e>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2202      	movs	r2, #2
 80074e6:	755a      	strb	r2, [r3, #21]
 80074e8:	2302      	movs	r3, #2
 80074ea:	e0c8      	b.n	800767e <f_write+0x320>
			sect += csect;
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	4413      	add	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	899b      	ldrh	r3, [r3, #12]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007500:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d043      	beq.n	8007590 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	4413      	add	r3, r2
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	8952      	ldrh	r2, [r2, #10]
 8007512:	4293      	cmp	r3, r2
 8007514:	d905      	bls.n	8007522 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	895b      	ldrh	r3, [r3, #10]
 800751a:	461a      	mov	r2, r3
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	7858      	ldrb	r0, [r3, #1]
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	69f9      	ldr	r1, [r7, #28]
 800752c:	f7fd f84c 	bl	80045c8 <disk_write>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d004      	beq.n	8007540 <f_write+0x1e2>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	755a      	strb	r2, [r3, #21]
 800753c:	2301      	movs	r3, #1
 800753e:	e09e      	b.n	800767e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1a      	ldr	r2, [r3, #32]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	429a      	cmp	r2, r3
 800754c:	d918      	bls.n	8007580 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a1a      	ldr	r2, [r3, #32]
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	8992      	ldrh	r2, [r2, #12]
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	69fa      	ldr	r2, [r7, #28]
 8007566:	18d1      	adds	r1, r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	899b      	ldrh	r3, [r3, #12]
 800756c:	461a      	mov	r2, r3
 800756e:	f7fd f8eb 	bl	8004748 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	7d1b      	ldrb	r3, [r3, #20]
 8007576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	899b      	ldrh	r3, [r3, #12]
 8007584:	461a      	mov	r2, r3
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800758e:	e04b      	b.n	8007628 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	429a      	cmp	r2, r3
 8007598:	d016      	beq.n	80075c8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d210      	bcs.n	80075c8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	7858      	ldrb	r0, [r3, #1]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80075b0:	2301      	movs	r3, #1
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	f7fc ffe8 	bl	8004588 <disk_read>
 80075b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	755a      	strb	r2, [r3, #21]
 80075c4:	2301      	movs	r3, #1
 80075c6:	e05a      	b.n	800767e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	899b      	ldrh	r3, [r3, #12]
 80075d2:	4618      	mov	r0, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	8992      	ldrh	r2, [r2, #12]
 80075dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80075e0:	fb01 f202 	mul.w	r2, r1, r2
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	1ac3      	subs	r3, r0, r3
 80075e8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80075ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d901      	bls.n	80075f6 <f_write+0x298>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	8992      	ldrh	r2, [r2, #12]
 8007604:	fbb3 f0f2 	udiv	r0, r3, r2
 8007608:	fb00 f202 	mul.w	r2, r0, r2
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	440b      	add	r3, r1
 8007610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007612:	69f9      	ldr	r1, [r7, #28]
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd f897 	bl	8004748 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	7d1b      	ldrb	r3, [r3, #20]
 800761e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	4413      	add	r3, r2
 800762e:	61fb      	str	r3, [r7, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	441a      	add	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	619a      	str	r2, [r3, #24]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	429a      	cmp	r2, r3
 8007646:	bf38      	it	cc
 8007648:	461a      	movcc	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	441a      	add	r2, r3
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f47f aeb5 	bne.w	80073d4 <f_write+0x76>
 800766a:	e000      	b.n	800766e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800766c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	7d1b      	ldrb	r3, [r3, #20]
 8007672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007676:	b2da      	uxtb	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3730      	adds	r7, #48	@ 0x30
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f107 0208 	add.w	r2, r7, #8
 8007694:	4611      	mov	r1, r2
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff fabe 	bl	8006c18 <validate>
 800769c:	4603      	mov	r3, r0
 800769e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d168      	bne.n	8007778 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7d1b      	ldrb	r3, [r3, #20]
 80076aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d062      	beq.n	8007778 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7d1b      	ldrb	r3, [r3, #20]
 80076b6:	b25b      	sxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	da15      	bge.n	80076e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	7858      	ldrb	r0, [r3, #1]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1a      	ldr	r2, [r3, #32]
 80076ca:	2301      	movs	r3, #1
 80076cc:	f7fc ff7c 	bl	80045c8 <disk_write>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <f_sync+0x54>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e04f      	b.n	800777a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7d1b      	ldrb	r3, [r3, #20]
 80076de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80076e8:	f7fc feae 	bl	8004448 <get_fattime>
 80076ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f7fd fa54 	bl	8004ba4 <move_window>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d138      	bne.n	8007778 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	330b      	adds	r3, #11
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	330b      	adds	r3, #11
 8007716:	f042 0220 	orr.w	r2, r2, #32
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	461a      	mov	r2, r3
 8007728:	68f9      	ldr	r1, [r7, #12]
 800772a:	f7fd ffdf 	bl	80056ec <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f103 021c 	add.w	r2, r3, #28
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f7fc ffd8 	bl	80046f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3316      	adds	r3, #22
 8007744:	6939      	ldr	r1, [r7, #16]
 8007746:	4618      	mov	r0, r3
 8007748:	f7fc ffd2 	bl	80046f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3312      	adds	r3, #18
 8007750:	2100      	movs	r1, #0
 8007752:	4618      	mov	r0, r3
 8007754:	f7fc ffb1 	bl	80046ba <st_word>
					fs->wflag = 1;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2201      	movs	r2, #1
 800775c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4618      	mov	r0, r3
 8007762:	f7fd fa4d 	bl	8004c00 <sync_fs>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7d1b      	ldrb	r3, [r3, #20]
 800776e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007772:	b2da      	uxtb	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007778:	7dfb      	ldrb	r3, [r7, #23]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff ff7b 	bl	8007686 <f_sync>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d118      	bne.n	80077cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f107 0208 	add.w	r2, r7, #8
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff fa38 	bl	8006c18 <validate>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10c      	bne.n	80077cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fd f950 	bl	8004a5c <dec_lock>
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <f_opendir+0x14>
 80077e6:	2309      	movs	r3, #9
 80077e8:	e064      	b.n	80078b4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80077ee:	f107 010c 	add.w	r1, r7, #12
 80077f2:	463b      	mov	r3, r7
 80077f4:	2200      	movs	r2, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe ff88 	bl	800670c <find_volume>
 80077fc:	4603      	mov	r3, r0
 80077fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d14f      	bne.n	80078a6 <f_opendir+0xd0>
		obj->fs = fs;
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fe fe6b 	bl	80064ec <follow_path>
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d13d      	bne.n	800789c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007826:	b25b      	sxtb	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	db12      	blt.n	8007852 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	799b      	ldrb	r3, [r3, #6]
 8007830:	f003 0310 	and.w	r3, r3, #16
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	4619      	mov	r1, r3
 8007840:	4610      	mov	r0, r2
 8007842:	f7fd ff34 	bl	80056ae <ld_clust>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	e001      	b.n	8007852 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800784e:	2305      	movs	r3, #5
 8007850:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d121      	bne.n	800789c <f_opendir+0xc6>
				obj->id = fs->id;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	88da      	ldrh	r2, [r3, #6]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007860:	2100      	movs	r1, #0
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7fd fd7d 	bl	8005362 <dir_sdi>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d114      	bne.n	800789c <f_opendir+0xc6>
					if (obj->sclust) {
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fd f85f 	bl	8004940 <inc_lock>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <f_opendir+0xc6>
 8007890:	2312      	movs	r3, #18
 8007892:	75fb      	strb	r3, [r7, #23]
 8007894:	e002      	b.n	800789c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2200      	movs	r2, #0
 800789a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d101      	bne.n	80078a6 <f_opendir+0xd0>
 80078a2:	2305      	movs	r3, #5
 80078a4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <f_opendir+0xdc>
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f107 0208 	add.w	r2, r7, #8
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff f9a3 	bl	8006c18 <validate>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d110      	bne.n	80078fe <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d006      	beq.n	80078f2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd f8b7 	bl	8004a5c <dec_lock>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d102      	bne.n	80078fe <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f107 0208 	add.w	r2, r7, #8
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff f97c 	bl	8006c18 <validate>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d126      	bne.n	8007978 <f_readdir+0x70>
		if (!fno) {
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fd fd15 	bl	8005362 <dir_sdi>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]
 800793c:	e01c      	b.n	8007978 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800793e:	2100      	movs	r1, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7fe f8de 	bl	8005b02 <dir_read>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d101      	bne.n	8007954 <f_readdir+0x4c>
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10e      	bne.n	8007978 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7fe fb2f 	bl	8005fc0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8007962:	2100      	movs	r1, #0
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fd fd85 	bl	8005474 <dir_next>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d101      	bne.n	8007978 <f_readdir+0x70>
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b088      	sub	sp, #32
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007996:	e01c      	b.n	80079d2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007998:	f107 0310 	add.w	r3, r7, #16
 800799c:	f107 0114 	add.w	r1, r7, #20
 80079a0:	2201      	movs	r2, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fb7c 	bl	80070a0 <f_read>
		if (rc != 1) break;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d117      	bne.n	80079de <f_gets+0x5c>
		c = s[0];
 80079ae:	7d3b      	ldrb	r3, [r7, #20]
 80079b0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	2b0d      	cmp	r3, #13
 80079b6:	d00b      	beq.n	80079d0 <f_gets+0x4e>
		*p++ = c;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	61ba      	str	r2, [r7, #24]
 80079be:	7dfa      	ldrb	r2, [r7, #23]
 80079c0:	701a      	strb	r2, [r3, #0]
		n++;
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	3301      	adds	r3, #1
 80079c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b0a      	cmp	r3, #10
 80079cc:	d009      	beq.n	80079e2 <f_gets+0x60>
 80079ce:	e000      	b.n	80079d2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80079d0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	429a      	cmp	r2, r3
 80079da:	dbdd      	blt.n	8007998 <f_gets+0x16>
 80079dc:	e002      	b.n	80079e4 <f_gets+0x62>
		if (rc != 1) break;
 80079de:	bf00      	nop
 80079e0:	e000      	b.n	80079e4 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80079e2:	bf00      	nop
	}
	*p = 0;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2200      	movs	r2, #0
 80079e8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <f_gets+0x72>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	e000      	b.n	80079f6 <f_gets+0x74>
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	2b0a      	cmp	r3, #10
 8007a0e:	d103      	bne.n	8007a18 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007a10:	210d      	movs	r1, #13
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff fff3 	bl	80079fe <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db25      	blt.n	8007a70 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	60fa      	str	r2, [r7, #12]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2b3c      	cmp	r3, #60	@ 0x3c
 8007a36:	dd12      	ble.n	8007a5e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6818      	ldr	r0, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f103 010c 	add.w	r1, r3, #12
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f107 0308 	add.w	r3, r7, #8
 8007a48:	f7ff fc89 	bl	800735e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d101      	bne.n	8007a58 <putc_bfd+0x5a>
 8007a54:	2300      	movs	r3, #0
 8007a56:	e001      	b.n	8007a5c <putc_bfd+0x5e>
 8007a58:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	609a      	str	r2, [r3, #8]
 8007a6e:	e000      	b.n	8007a72 <putc_bfd+0x74>
	if (i < 0) return;
 8007a70:	bf00      	nop
}
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	db16      	blt.n	8007ab6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f103 010c 	add.w	r1, r3, #12
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f107 030c 	add.w	r3, r7, #12
 8007a9c:	f7ff fc5f 	bl	800735e <f_write>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d107      	bne.n	8007ab6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d102      	bne.n	8007ab6 <putc_flush+0x3e>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	e001      	b.n	8007aba <putc_flush+0x42>
	return EOF;
 8007ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	605a      	str	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b096      	sub	sp, #88	@ 0x58
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007af6:	f107 030c 	add.w	r3, r7, #12
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff ffe0 	bl	8007ac2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007b02:	e009      	b.n	8007b18 <f_puts+0x2c>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	781a      	ldrb	r2, [r3, #0]
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ff73 	bl	80079fe <putc_bfd>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f1      	bne.n	8007b04 <f_puts+0x18>
	return putc_flush(&pb);
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff ffa7 	bl	8007a78 <putc_flush>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3758      	adds	r7, #88	@ 0x58
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b4c:	7a5b      	ldrb	r3, [r3, #9]
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d131      	bne.n	8007bb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b54:	4b1c      	ldr	r3, [pc, #112]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b56:	7a5b      	ldrb	r3, [r3, #9]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b5e:	2100      	movs	r1, #0
 8007b60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b62:	4b19      	ldr	r3, [pc, #100]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b64:	7a5b      	ldrb	r3, [r3, #9]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4a17      	ldr	r2, [pc, #92]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b72:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b74:	7a5b      	ldrb	r3, [r3, #9]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4b13      	ldr	r3, [pc, #76]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b7c:	4413      	add	r3, r2
 8007b7e:	79fa      	ldrb	r2, [r7, #7]
 8007b80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b82:	4b11      	ldr	r3, [pc, #68]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b84:	7a5b      	ldrb	r3, [r3, #9]
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	b2d1      	uxtb	r1, r2
 8007b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8007bc8 <FATFS_LinkDriverEx+0x94>)
 8007b8e:	7251      	strb	r1, [r2, #9]
 8007b90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b92:	7dbb      	ldrb	r3, [r7, #22]
 8007b94:	3330      	adds	r3, #48	@ 0x30
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	223a      	movs	r2, #58	@ 0x3a
 8007ba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	3302      	adds	r3, #2
 8007ba8:	222f      	movs	r2, #47	@ 0x2f
 8007baa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	3303      	adds	r3, #3
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	371c      	adds	r7, #28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	200031c4 	.word	0x200031c4

08007bcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff ffaa 	bl	8007b34 <FATFS_LinkDriverEx>
 8007be0:	4603      	mov	r3, r0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007bfc:	d802      	bhi.n	8007c04 <ff_convert+0x18>
		c = chr;
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	81fb      	strh	r3, [r7, #14]
 8007c02:	e025      	b.n	8007c50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00b      	beq.n	8007c22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	2bff      	cmp	r3, #255	@ 0xff
 8007c0e:	d805      	bhi.n	8007c1c <ff_convert+0x30>
 8007c10:	88fb      	ldrh	r3, [r7, #6]
 8007c12:	3b80      	subs	r3, #128	@ 0x80
 8007c14:	4a12      	ldr	r2, [pc, #72]	@ (8007c60 <ff_convert+0x74>)
 8007c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c1a:	e000      	b.n	8007c1e <ff_convert+0x32>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	81fb      	strh	r3, [r7, #14]
 8007c20:	e016      	b.n	8007c50 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007c22:	2300      	movs	r3, #0
 8007c24:	81fb      	strh	r3, [r7, #14]
 8007c26:	e009      	b.n	8007c3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007c28:	89fb      	ldrh	r3, [r7, #14]
 8007c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8007c60 <ff_convert+0x74>)
 8007c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d006      	beq.n	8007c44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007c36:	89fb      	ldrh	r3, [r7, #14]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	81fb      	strh	r3, [r7, #14]
 8007c3c:	89fb      	ldrh	r3, [r7, #14]
 8007c3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007c40:	d9f2      	bls.n	8007c28 <ff_convert+0x3c>
 8007c42:	e000      	b.n	8007c46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007c44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007c46:	89fb      	ldrh	r3, [r7, #14]
 8007c48:	3380      	adds	r3, #128	@ 0x80
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007c50:	89fb      	ldrh	r3, [r7, #14]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	080081c4 	.word	0x080081c4

08007c64 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c74:	d201      	bcs.n	8007c7a <ff_wtoupper+0x16>
 8007c76:	4b3e      	ldr	r3, [pc, #248]	@ (8007d70 <ff_wtoupper+0x10c>)
 8007c78:	e000      	b.n	8007c7c <ff_wtoupper+0x18>
 8007c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d74 <ff_wtoupper+0x110>)
 8007c7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	1c9a      	adds	r2, r3, #2
 8007c82:	617a      	str	r2, [r7, #20]
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007c88:	8a7b      	ldrh	r3, [r7, #18]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d068      	beq.n	8007d60 <ff_wtoupper+0xfc>
 8007c8e:	88fa      	ldrh	r2, [r7, #6]
 8007c90:	8a7b      	ldrh	r3, [r7, #18]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d364      	bcc.n	8007d60 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	1c9a      	adds	r2, r3, #2
 8007c9a:	617a      	str	r2, [r7, #20]
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	823b      	strh	r3, [r7, #16]
 8007ca0:	8a3b      	ldrh	r3, [r7, #16]
 8007ca2:	0a1b      	lsrs	r3, r3, #8
 8007ca4:	81fb      	strh	r3, [r7, #14]
 8007ca6:	8a3b      	ldrh	r3, [r7, #16]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007cac:	88fa      	ldrh	r2, [r7, #6]
 8007cae:	8a79      	ldrh	r1, [r7, #18]
 8007cb0:	8a3b      	ldrh	r3, [r7, #16]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	da49      	bge.n	8007d4c <ff_wtoupper+0xe8>
			switch (cmd) {
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d84f      	bhi.n	8007d5e <ff_wtoupper+0xfa>
 8007cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc4 <ff_wtoupper+0x60>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cfb 	.word	0x08007cfb
 8007ccc:	08007d11 	.word	0x08007d11
 8007cd0:	08007d19 	.word	0x08007d19
 8007cd4:	08007d21 	.word	0x08007d21
 8007cd8:	08007d29 	.word	0x08007d29
 8007cdc:	08007d31 	.word	0x08007d31
 8007ce0:	08007d39 	.word	0x08007d39
 8007ce4:	08007d41 	.word	0x08007d41
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	8a7b      	ldrh	r3, [r7, #18]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	80fb      	strh	r3, [r7, #6]
 8007cf8:	e027      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007cfa:	88fa      	ldrh	r2, [r7, #6]
 8007cfc:	8a7b      	ldrh	r3, [r7, #18]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	80fb      	strh	r3, [r7, #6]
 8007d0e:	e01c      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	3b10      	subs	r3, #16
 8007d14:	80fb      	strh	r3, [r7, #6]
 8007d16:	e018      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	3b20      	subs	r3, #32
 8007d1c:	80fb      	strh	r3, [r7, #6]
 8007d1e:	e014      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007d20:	88fb      	ldrh	r3, [r7, #6]
 8007d22:	3b30      	subs	r3, #48	@ 0x30
 8007d24:	80fb      	strh	r3, [r7, #6]
 8007d26:	e010      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007d28:	88fb      	ldrh	r3, [r7, #6]
 8007d2a:	3b1a      	subs	r3, #26
 8007d2c:	80fb      	strh	r3, [r7, #6]
 8007d2e:	e00c      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	3308      	adds	r3, #8
 8007d34:	80fb      	strh	r3, [r7, #6]
 8007d36:	e008      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	3b50      	subs	r3, #80	@ 0x50
 8007d3c:	80fb      	strh	r3, [r7, #6]
 8007d3e:	e004      	b.n	8007d4a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007d40:	88fb      	ldrh	r3, [r7, #6]
 8007d42:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007d46:	80fb      	strh	r3, [r7, #6]
 8007d48:	bf00      	nop
			}
			break;
 8007d4a:	e008      	b.n	8007d5e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007d4c:	89fb      	ldrh	r3, [r7, #14]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d195      	bne.n	8007c7e <ff_wtoupper+0x1a>
 8007d52:	8a3b      	ldrh	r3, [r7, #16]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007d5c:	e78f      	b.n	8007c7e <ff_wtoupper+0x1a>
			break;
 8007d5e:	bf00      	nop
	}

	return chr;
 8007d60:	88fb      	ldrh	r3, [r7, #6]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	080082c4 	.word	0x080082c4
 8007d74:	080084b8 	.word	0x080084b8

08007d78 <atoi>:
 8007d78:	220a      	movs	r2, #10
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	f000 b87a 	b.w	8007e74 <strtol>

08007d80 <_strtol_l.constprop.0>:
 8007d80:	2b24      	cmp	r3, #36	@ 0x24
 8007d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d86:	4686      	mov	lr, r0
 8007d88:	4690      	mov	r8, r2
 8007d8a:	d801      	bhi.n	8007d90 <_strtol_l.constprop.0+0x10>
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d106      	bne.n	8007d9e <_strtol_l.constprop.0+0x1e>
 8007d90:	f000 f882 	bl	8007e98 <__errno>
 8007d94:	2316      	movs	r3, #22
 8007d96:	6003      	str	r3, [r0, #0]
 8007d98:	2000      	movs	r0, #0
 8007d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9e:	4834      	ldr	r0, [pc, #208]	@ (8007e70 <_strtol_l.constprop.0+0xf0>)
 8007da0:	460d      	mov	r5, r1
 8007da2:	462a      	mov	r2, r5
 8007da4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007da8:	5d06      	ldrb	r6, [r0, r4]
 8007daa:	f016 0608 	ands.w	r6, r6, #8
 8007dae:	d1f8      	bne.n	8007da2 <_strtol_l.constprop.0+0x22>
 8007db0:	2c2d      	cmp	r4, #45	@ 0x2d
 8007db2:	d12d      	bne.n	8007e10 <_strtol_l.constprop.0+0x90>
 8007db4:	782c      	ldrb	r4, [r5, #0]
 8007db6:	2601      	movs	r6, #1
 8007db8:	1c95      	adds	r5, r2, #2
 8007dba:	f033 0210 	bics.w	r2, r3, #16
 8007dbe:	d109      	bne.n	8007dd4 <_strtol_l.constprop.0+0x54>
 8007dc0:	2c30      	cmp	r4, #48	@ 0x30
 8007dc2:	d12a      	bne.n	8007e1a <_strtol_l.constprop.0+0x9a>
 8007dc4:	782a      	ldrb	r2, [r5, #0]
 8007dc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007dca:	2a58      	cmp	r2, #88	@ 0x58
 8007dcc:	d125      	bne.n	8007e1a <_strtol_l.constprop.0+0x9a>
 8007dce:	786c      	ldrb	r4, [r5, #1]
 8007dd0:	2310      	movs	r3, #16
 8007dd2:	3502      	adds	r5, #2
 8007dd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007dd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ddc:	2200      	movs	r2, #0
 8007dde:	fbbc f9f3 	udiv	r9, ip, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	fb03 ca19 	mls	sl, r3, r9, ip
 8007de8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007dec:	2f09      	cmp	r7, #9
 8007dee:	d81b      	bhi.n	8007e28 <_strtol_l.constprop.0+0xa8>
 8007df0:	463c      	mov	r4, r7
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	dd27      	ble.n	8007e46 <_strtol_l.constprop.0+0xc6>
 8007df6:	1c57      	adds	r7, r2, #1
 8007df8:	d007      	beq.n	8007e0a <_strtol_l.constprop.0+0x8a>
 8007dfa:	4581      	cmp	r9, r0
 8007dfc:	d320      	bcc.n	8007e40 <_strtol_l.constprop.0+0xc0>
 8007dfe:	d101      	bne.n	8007e04 <_strtol_l.constprop.0+0x84>
 8007e00:	45a2      	cmp	sl, r4
 8007e02:	db1d      	blt.n	8007e40 <_strtol_l.constprop.0+0xc0>
 8007e04:	fb00 4003 	mla	r0, r0, r3, r4
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e0e:	e7eb      	b.n	8007de8 <_strtol_l.constprop.0+0x68>
 8007e10:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e12:	bf04      	itt	eq
 8007e14:	782c      	ldrbeq	r4, [r5, #0]
 8007e16:	1c95      	addeq	r5, r2, #2
 8007e18:	e7cf      	b.n	8007dba <_strtol_l.constprop.0+0x3a>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1da      	bne.n	8007dd4 <_strtol_l.constprop.0+0x54>
 8007e1e:	2c30      	cmp	r4, #48	@ 0x30
 8007e20:	bf0c      	ite	eq
 8007e22:	2308      	moveq	r3, #8
 8007e24:	230a      	movne	r3, #10
 8007e26:	e7d5      	b.n	8007dd4 <_strtol_l.constprop.0+0x54>
 8007e28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e2c:	2f19      	cmp	r7, #25
 8007e2e:	d801      	bhi.n	8007e34 <_strtol_l.constprop.0+0xb4>
 8007e30:	3c37      	subs	r4, #55	@ 0x37
 8007e32:	e7de      	b.n	8007df2 <_strtol_l.constprop.0+0x72>
 8007e34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e38:	2f19      	cmp	r7, #25
 8007e3a:	d804      	bhi.n	8007e46 <_strtol_l.constprop.0+0xc6>
 8007e3c:	3c57      	subs	r4, #87	@ 0x57
 8007e3e:	e7d8      	b.n	8007df2 <_strtol_l.constprop.0+0x72>
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295
 8007e44:	e7e1      	b.n	8007e0a <_strtol_l.constprop.0+0x8a>
 8007e46:	1c53      	adds	r3, r2, #1
 8007e48:	d108      	bne.n	8007e5c <_strtol_l.constprop.0+0xdc>
 8007e4a:	2322      	movs	r3, #34	@ 0x22
 8007e4c:	f8ce 3000 	str.w	r3, [lr]
 8007e50:	4660      	mov	r0, ip
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	d0a0      	beq.n	8007d9a <_strtol_l.constprop.0+0x1a>
 8007e58:	1e69      	subs	r1, r5, #1
 8007e5a:	e006      	b.n	8007e6a <_strtol_l.constprop.0+0xea>
 8007e5c:	b106      	cbz	r6, 8007e60 <_strtol_l.constprop.0+0xe0>
 8007e5e:	4240      	negs	r0, r0
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	d099      	beq.n	8007d9a <_strtol_l.constprop.0+0x1a>
 8007e66:	2a00      	cmp	r2, #0
 8007e68:	d1f6      	bne.n	8007e58 <_strtol_l.constprop.0+0xd8>
 8007e6a:	f8c8 1000 	str.w	r1, [r8]
 8007e6e:	e794      	b.n	8007d9a <_strtol_l.constprop.0+0x1a>
 8007e70:	08008575 	.word	0x08008575

08007e74 <strtol>:
 8007e74:	4613      	mov	r3, r2
 8007e76:	460a      	mov	r2, r1
 8007e78:	4601      	mov	r1, r0
 8007e7a:	4802      	ldr	r0, [pc, #8]	@ (8007e84 <strtol+0x10>)
 8007e7c:	6800      	ldr	r0, [r0, #0]
 8007e7e:	f7ff bf7f 	b.w	8007d80 <_strtol_l.constprop.0>
 8007e82:	bf00      	nop
 8007e84:	20000024 	.word	0x20000024

08007e88 <memset>:
 8007e88:	4402      	add	r2, r0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d100      	bne.n	8007e92 <memset+0xa>
 8007e90:	4770      	bx	lr
 8007e92:	f803 1b01 	strb.w	r1, [r3], #1
 8007e96:	e7f9      	b.n	8007e8c <memset+0x4>

08007e98 <__errno>:
 8007e98:	4b01      	ldr	r3, [pc, #4]	@ (8007ea0 <__errno+0x8>)
 8007e9a:	6818      	ldr	r0, [r3, #0]
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000024 	.word	0x20000024

08007ea4 <__libc_init_array>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4d0d      	ldr	r5, [pc, #52]	@ (8007edc <__libc_init_array+0x38>)
 8007ea8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee0 <__libc_init_array+0x3c>)
 8007eaa:	1b64      	subs	r4, r4, r5
 8007eac:	10a4      	asrs	r4, r4, #2
 8007eae:	2600      	movs	r6, #0
 8007eb0:	42a6      	cmp	r6, r4
 8007eb2:	d109      	bne.n	8007ec8 <__libc_init_array+0x24>
 8007eb4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ee4 <__libc_init_array+0x40>)
 8007eb6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee8 <__libc_init_array+0x44>)
 8007eb8:	f000 f820 	bl	8007efc <_init>
 8007ebc:	1b64      	subs	r4, r4, r5
 8007ebe:	10a4      	asrs	r4, r4, #2
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	42a6      	cmp	r6, r4
 8007ec4:	d105      	bne.n	8007ed2 <__libc_init_array+0x2e>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ecc:	4798      	blx	r3
 8007ece:	3601      	adds	r6, #1
 8007ed0:	e7ee      	b.n	8007eb0 <__libc_init_array+0xc>
 8007ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed6:	4798      	blx	r3
 8007ed8:	3601      	adds	r6, #1
 8007eda:	e7f2      	b.n	8007ec2 <__libc_init_array+0x1e>
 8007edc:	08008680 	.word	0x08008680
 8007ee0:	08008680 	.word	0x08008680
 8007ee4:	08008680 	.word	0x08008680
 8007ee8:	08008684 	.word	0x08008684

08007eec <strcpy>:
 8007eec:	4603      	mov	r3, r0
 8007eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef2:	f803 2b01 	strb.w	r2, [r3], #1
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	d1f9      	bne.n	8007eee <strcpy+0x2>
 8007efa:	4770      	bx	lr

08007efc <_init>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr

08007f08 <_fini>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	bf00      	nop
 8007f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0e:	bc08      	pop	{r3}
 8007f10:	469e      	mov	lr, r3
 8007f12:	4770      	bx	lr
