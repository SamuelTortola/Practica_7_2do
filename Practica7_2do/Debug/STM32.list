
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08007988  08007988  00008988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a8  080080a8  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  080080a8  080080a8  000090a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b0  080080b0  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b0  080080b0  000090b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080b4  080080b4  000090b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080080b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001674  20000074  0800812c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016e8  0800812c  0000a6e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f298  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  0001933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001bad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2b  00000000  00000000  0001c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fee  00000000  00000000  0001d22b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013742  00000000  00000000  00040219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd99  00000000  00000000  0005395b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  0011f738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00122ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007970 	.word	0x08007970

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	08007970 	.word	0x08007970

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2140      	movs	r1, #64	@ 0x40
 800050c:	4803      	ldr	r0, [pc, #12]	@ (800051c <SELECT+0x18>)
 800050e:	f001 fccd 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f001 f962 	bl	80017dc <HAL_Delay>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40020400 	.word	0x40020400

08000520 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2140      	movs	r1, #64	@ 0x40
 8000528:	4803      	ldr	r0, [pc, #12]	@ (8000538 <DESELECT+0x18>)
 800052a:	f001 fcbf 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f001 f954 	bl	80017dc <HAL_Delay>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40020400 	.word	0x40020400

0800053c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000546:	bf00      	nop
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <SPI_TxByte+0x30>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	2b02      	cmp	r3, #2
 8000554:	d1f8      	bne.n	8000548 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000556:	1df9      	adds	r1, r7, #7
 8000558:	2364      	movs	r3, #100	@ 0x64
 800055a:	2201      	movs	r2, #1
 800055c:	4803      	ldr	r0, [pc, #12]	@ (800056c <SPI_TxByte+0x30>)
 800055e:	f002 faaa 	bl	8002ab6 <HAL_SPI_Transmit>
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000098 	.word	0x20000098

08000570 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057c:	bf00      	nop
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <SPI_TxBuffer+0x30>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	2b02      	cmp	r3, #2
 800058a:	d1f8      	bne.n	800057e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <SPI_TxBuffer+0x30>)
 8000594:	f002 fa8f 	bl	8002ab6 <HAL_SPI_Transmit>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000098 	.word	0x20000098

080005a4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80005aa:	23ff      	movs	r3, #255	@ 0xff
 80005ac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ae:	bf00      	nop
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <SPI_RxByte+0x34>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d1f8      	bne.n	80005b0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005be:	1dba      	adds	r2, r7, #6
 80005c0:	1df9      	adds	r1, r7, #7
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2301      	movs	r3, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <SPI_RxByte+0x34>)
 80005ca:	f002 fbb8 	bl	8002d3e <HAL_SPI_TransmitReceive>

	return data;
 80005ce:	79bb      	ldrb	r3, [r7, #6]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000098 	.word	0x20000098

080005dc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005e4:	f7ff ffde 	bl	80005a4 <SPI_RxByte>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <SD_ReadyWait+0x30>)
 8000600:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000604:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000606:	f7ff ffcd 	bl	80005a4 <SPI_RxByte>
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2bff      	cmp	r3, #255	@ 0xff
 8000612:	d003      	beq.n	800061c <SD_ReadyWait+0x24>
 8000614:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <SD_ReadyWait+0x30>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f4      	bne.n	8000606 <SD_ReadyWait+0xe>

	return res;
 800061c:	79fb      	ldrb	r3, [r7, #7]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000092 	.word	0x20000092

0800062c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000632:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000636:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000638:	f7ff ff72 	bl	8000520 <DESELECT>
	for(int i = 0; i < 10; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e005      	b.n	800064e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	f7ff ff7a 	bl	800053c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3301      	adds	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b09      	cmp	r3, #9
 8000652:	ddf6      	ble.n	8000642 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000654:	f7ff ff56 	bl	8000504 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000658:	2340      	movs	r3, #64	@ 0x40
 800065a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800066c:	2395      	movs	r3, #149	@ 0x95
 800066e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000670:	463b      	mov	r3, r7
 8000672:	2106      	movs	r1, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff7b 	bl	8000570 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800067a:	e002      	b.n	8000682 <SD_PowerOn+0x56>
	{
		cnt--;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3b01      	subs	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000682:	f7ff ff8f 	bl	80005a4 <SPI_RxByte>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d002      	beq.n	8000692 <SD_PowerOn+0x66>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000692:	f7ff ff45 	bl	8000520 <DESELECT>
	SPI_TxByte(0XFF);
 8000696:	20ff      	movs	r0, #255	@ 0xff
 8000698:	f7ff ff50 	bl	800053c <SPI_TxByte>

	PowerFlag = 1;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <SD_PowerOn+0x80>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000095 	.word	0x20000095

080006b0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006b4:	4b03      	ldr	r3, [pc, #12]	@ (80006c4 <SD_PowerOff+0x14>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	20000095 	.word	0x20000095

080006c8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <SD_CheckPower+0x14>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000095 	.word	0x20000095

080006e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <SD_RxDataBlock+0x58>)
 80006ec:	22c8      	movs	r2, #200	@ 0xc8
 80006ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006f0:	f7ff ff58 	bl	80005a4 <SPI_RxByte>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2bff      	cmp	r3, #255	@ 0xff
 80006fc:	d103      	bne.n	8000706 <SD_RxDataBlock+0x26>
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SD_RxDataBlock+0x58>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1f4      	bne.n	80006f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2bfe      	cmp	r3, #254	@ 0xfe
 800070a:	d001      	beq.n	8000710 <SD_RxDataBlock+0x30>
 800070c:	2300      	movs	r3, #0
 800070e:	e00f      	b.n	8000730 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	607a      	str	r2, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff60 	bl	80005dc <SPI_RxBytePtr>
	} while(len--);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	603a      	str	r2, [r7, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f4      	bne.n	8000710 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000726:	f7ff ff3d 	bl	80005a4 <SPI_RxByte>
	SPI_RxByte();
 800072a:	f7ff ff3b 	bl	80005a4 <SPI_RxByte>

	return TRUE;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000090 	.word	0x20000090

0800073c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800074c:	f7ff ff54 	bl	80005f8 <SD_ReadyWait>
 8000750:	4603      	mov	r3, r0
 8000752:	2bff      	cmp	r3, #255	@ 0xff
 8000754:	d001      	beq.n	800075a <SD_TxDataBlock+0x1e>
 8000756:	2300      	movs	r3, #0
 8000758:	e02f      	b.n	80007ba <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feed 	bl	800053c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2bfd      	cmp	r3, #253	@ 0xfd
 8000766:	d020      	beq.n	80007aa <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff feff 	bl	8000570 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000772:	f7ff ff17 	bl	80005a4 <SPI_RxByte>
		SPI_RxByte();
 8000776:	f7ff ff15 	bl	80005a4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800077a:	e00b      	b.n	8000794 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800077c:	f7ff ff12 	bl	80005a4 <SPI_RxByte>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	2b05      	cmp	r3, #5
 800078c:	d006      	beq.n	800079c <SD_TxDataBlock+0x60>
			i++;
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	3301      	adds	r3, #1
 8000792:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	2b40      	cmp	r3, #64	@ 0x40
 8000798:	d9f0      	bls.n	800077c <SD_TxDataBlock+0x40>
 800079a:	e000      	b.n	800079e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800079c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800079e:	bf00      	nop
 80007a0:	f7ff ff00 	bl	80005a4 <SPI_RxByte>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d0fa      	beq.n	80007a0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d101      	bne.n	80007b8 <SD_TxDataBlock+0x7c>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <SD_TxDataBlock+0x7e>

	return FALSE;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	6039      	str	r1, [r7, #0]
 80007cc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007ce:	f7ff ff13 	bl	80005f8 <SD_ReadyWait>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2bff      	cmp	r3, #255	@ 0xff
 80007d6:	d001      	beq.n	80007dc <SD_SendCmd+0x1a>
 80007d8:	23ff      	movs	r3, #255	@ 0xff
 80007da:	e042      	b.n	8000862 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff feac 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	0e1b      	lsrs	r3, r3, #24
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fea6 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fea0 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe9a 	bl	800053c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe95 	bl	800053c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b40      	cmp	r3, #64	@ 0x40
 8000816:	d102      	bne.n	800081e <SD_SendCmd+0x5c>
 8000818:	2395      	movs	r3, #149	@ 0x95
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	e007      	b.n	800082e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b48      	cmp	r3, #72	@ 0x48
 8000822:	d102      	bne.n	800082a <SD_SendCmd+0x68>
 8000824:	2387      	movs	r3, #135	@ 0x87
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	e001      	b.n	800082e <SD_SendCmd+0x6c>
	else crc = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe83 	bl	800053c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b4c      	cmp	r3, #76	@ 0x4c
 800083a:	d101      	bne.n	8000840 <SD_SendCmd+0x7e>
 800083c:	f7ff feb2 	bl	80005a4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000840:	230a      	movs	r3, #10
 8000842:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000844:	f7ff feae 	bl	80005a4 <SPI_RxByte>
 8000848:	4603      	mov	r3, r0
 800084a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800084c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000850:	2b00      	cmp	r3, #0
 8000852:	da05      	bge.n	8000860 <SD_SendCmd+0x9e>
 8000854:	7bbb      	ldrb	r3, [r7, #14]
 8000856:	3b01      	subs	r3, #1
 8000858:	73bb      	strb	r3, [r7, #14]
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1f1      	bne.n	8000844 <SD_SendCmd+0x82>

	return res;
 8000860:	7b7b      	ldrb	r3, [r7, #13]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SD_disk_initialize+0x14>
 800087c:	2301      	movs	r3, #1
 800087e:	e0d1      	b.n	8000a24 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000880:	4b6a      	ldr	r3, [pc, #424]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <SD_disk_initialize+0x2a>
 800088e:	4b67      	ldr	r3, [pc, #412]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	e0c6      	b.n	8000a24 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000896:	f7ff fec9 	bl	800062c <SD_PowerOn>

	/* slave select */
	SELECT();
 800089a:	f7ff fe33 	bl	8000504 <SELECT>

	/* check disk type */
	type = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2040      	movs	r0, #64	@ 0x40
 80008a6:	f7ff ff8c 	bl	80007c2 <SD_SendCmd>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	f040 80a1 	bne.w	80009f4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008b2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80008b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008ba:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008be:	2048      	movs	r0, #72	@ 0x48
 80008c0:	f7ff ff7f 	bl	80007c2 <SD_SendCmd>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d155      	bne.n	8000976 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e00c      	b.n	80008ea <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008d0:	7bfc      	ldrb	r4, [r7, #15]
 80008d2:	f7ff fe67 	bl	80005a4 <SPI_RxByte>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	f104 0310 	add.w	r3, r4, #16
 80008de:	443b      	add	r3, r7
 80008e0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3301      	adds	r3, #1
 80008e8:	73fb      	strb	r3, [r7, #15]
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d9ef      	bls.n	80008d0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d17e      	bne.n	80009f4 <SD_disk_initialize+0x188>
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	2baa      	cmp	r3, #170	@ 0xaa
 80008fa:	d17b      	bne.n	80009f4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008fc:	2100      	movs	r1, #0
 80008fe:	2077      	movs	r0, #119	@ 0x77
 8000900:	f7ff ff5f 	bl	80007c2 <SD_SendCmd>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	d807      	bhi.n	800091a <SD_disk_initialize+0xae>
 800090a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800090e:	2069      	movs	r0, #105	@ 0x69
 8000910:	f7ff ff57 	bl	80007c2 <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800091a:	4b45      	ldr	r3, [pc, #276]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1ec      	bne.n	80008fc <SD_disk_initialize+0x90>
 8000922:	e000      	b.n	8000926 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000924:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000926:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d062      	beq.n	80009f4 <SD_disk_initialize+0x188>
 800092e:	2100      	movs	r1, #0
 8000930:	207a      	movs	r0, #122	@ 0x7a
 8000932:	f7ff ff46 	bl	80007c2 <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d15b      	bne.n	80009f4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e00c      	b.n	800095c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000942:	7bfc      	ldrb	r4, [r7, #15]
 8000944:	f7ff fe2e 	bl	80005a4 <SPI_RxByte>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	f104 0310 	add.w	r3, r4, #16
 8000950:	443b      	add	r3, r7
 8000952:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	3301      	adds	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d9ef      	bls.n	8000942 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000962:	7a3b      	ldrb	r3, [r7, #8]
 8000964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SD_disk_initialize+0x104>
 800096c:	230c      	movs	r3, #12
 800096e:	e000      	b.n	8000972 <SD_disk_initialize+0x106>
 8000970:	2304      	movs	r3, #4
 8000972:	73bb      	strb	r3, [r7, #14]
 8000974:	e03e      	b.n	80009f4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000976:	2100      	movs	r1, #0
 8000978:	2077      	movs	r0, #119	@ 0x77
 800097a:	f7ff ff22 	bl	80007c2 <SD_SendCmd>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d808      	bhi.n	8000996 <SD_disk_initialize+0x12a>
 8000984:	2100      	movs	r1, #0
 8000986:	2069      	movs	r0, #105	@ 0x69
 8000988:	f7ff ff1b 	bl	80007c2 <SD_SendCmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d801      	bhi.n	8000996 <SD_disk_initialize+0x12a>
 8000992:	2302      	movs	r3, #2
 8000994:	e000      	b.n	8000998 <SD_disk_initialize+0x12c>
 8000996:	2301      	movs	r3, #1
 8000998:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d10e      	bne.n	80009be <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009a0:	2100      	movs	r1, #0
 80009a2:	2077      	movs	r0, #119	@ 0x77
 80009a4:	f7ff ff0d 	bl	80007c2 <SD_SendCmd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d80e      	bhi.n	80009cc <SD_disk_initialize+0x160>
 80009ae:	2100      	movs	r1, #0
 80009b0:	2069      	movs	r0, #105	@ 0x69
 80009b2:	f7ff ff06 	bl	80007c2 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d107      	bne.n	80009cc <SD_disk_initialize+0x160>
 80009bc:	e00c      	b.n	80009d8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009be:	2100      	movs	r1, #0
 80009c0:	2041      	movs	r0, #65	@ 0x41
 80009c2:	f7ff fefe 	bl	80007c2 <SD_SendCmd>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80009cc:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e2      	bne.n	800099a <SD_disk_initialize+0x12e>
 80009d4:	e000      	b.n	80009d8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009d8:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <SD_disk_initialize+0x1c4>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d007      	beq.n	80009f0 <SD_disk_initialize+0x184>
 80009e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e4:	2050      	movs	r0, #80	@ 0x50
 80009e6:	f7ff feec 	bl	80007c2 <SD_SendCmd>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SD_disk_initialize+0x188>
 80009f0:	2300      	movs	r3, #0
 80009f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <SD_disk_initialize+0x1c8>)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009fa:	f7ff fd91 	bl	8000520 <DESELECT>
	SPI_RxByte();
 80009fe:	f7ff fdd1 	bl	80005a4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a16:	701a      	strb	r2, [r3, #0]
 8000a18:	e001      	b.n	8000a1e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a1a:	f7ff fe49 	bl	80006b0 <SD_PowerOff>
	}

	return Stat;
 8000a1e:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <SD_disk_initialize+0x1c0>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000090 	.word	0x20000090
 8000a34:	20000094 	.word	0x20000094

08000a38 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SD_disk_status+0x14>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e002      	b.n	8000a52 <SD_disk_status+0x1a>
	return Stat;
 8000a4c:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SD_disk_status+0x28>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000000 	.word	0x20000000

08000a64 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <SD_disk_read+0x1c>
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d101      	bne.n	8000a84 <SD_disk_read+0x20>
 8000a80:	2304      	movs	r3, #4
 8000a82:	e051      	b.n	8000b28 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <SD_disk_read+0xcc>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SD_disk_read+0x32>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e048      	b.n	8000b28 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a96:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <SD_disk_read+0xd0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <SD_disk_read+0x44>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aa8:	f7ff fd2c 	bl	8000504 <SELECT>

	if (count == 1)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d111      	bne.n	8000ad6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2051      	movs	r0, #81	@ 0x51
 8000ab6:	f7ff fe84 	bl	80007c2 <SD_SendCmd>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d129      	bne.n	8000b14 <SD_disk_read+0xb0>
 8000ac0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac4:	68b8      	ldr	r0, [r7, #8]
 8000ac6:	f7ff fe0b 	bl	80006e0 <SD_RxDataBlock>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d021      	beq.n	8000b14 <SD_disk_read+0xb0>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	e01e      	b.n	8000b14 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2052      	movs	r0, #82	@ 0x52
 8000ada:	f7ff fe72 	bl	80007c2 <SD_SendCmd>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d117      	bne.n	8000b14 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f7ff fdf9 	bl	80006e0 <SD_RxDataBlock>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00a      	beq.n	8000b0a <SD_disk_read+0xa6>
				buff += 512;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000afa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1ed      	bne.n	8000ae4 <SD_disk_read+0x80>
 8000b08:	e000      	b.n	8000b0c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b0a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	204c      	movs	r0, #76	@ 0x4c
 8000b10:	f7ff fe57 	bl	80007c2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b14:	f7ff fd04 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000b18:	f7ff fd44 	bl	80005a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bf14      	ite	ne
 8000b22:	2301      	movne	r3, #1
 8000b24:	2300      	moveq	r3, #0
 8000b26:	b2db      	uxtb	r3, r3
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000094 	.word	0x20000094

08000b38 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d102      	bne.n	8000b54 <SD_disk_write+0x1c>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <SD_disk_write+0x20>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e06b      	b.n	8000c30 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b58:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <SD_disk_write+0x100>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SD_disk_write+0x32>
 8000b66:	2303      	movs	r3, #3
 8000b68:	e062      	b.n	8000c30 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <SD_disk_write+0x100>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SD_disk_write+0x44>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e059      	b.n	8000c30 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <SD_disk_write+0x104>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <SD_disk_write+0x56>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	025b      	lsls	r3, r3, #9
 8000b8c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b8e:	f7ff fcb9 	bl	8000504 <SELECT>

	if (count == 1)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d110      	bne.n	8000bba <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	2058      	movs	r0, #88	@ 0x58
 8000b9c:	f7ff fe11 	bl	80007c2 <SD_SendCmd>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d13a      	bne.n	8000c1c <SD_disk_write+0xe4>
 8000ba6:	21fe      	movs	r1, #254	@ 0xfe
 8000ba8:	68b8      	ldr	r0, [r7, #8]
 8000baa:	f7ff fdc7 	bl	800073c <SD_TxDataBlock>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d033      	beq.n	8000c1c <SD_disk_write+0xe4>
			count = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	e030      	b.n	8000c1c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bba:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <SD_disk_write+0x104>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2077      	movs	r0, #119	@ 0x77
 8000bca:	f7ff fdfa 	bl	80007c2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	2057      	movs	r0, #87	@ 0x57
 8000bd2:	f7ff fdf6 	bl	80007c2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2059      	movs	r0, #89	@ 0x59
 8000bda:	f7ff fdf2 	bl	80007c2 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be4:	21fc      	movs	r1, #252	@ 0xfc
 8000be6:	68b8      	ldr	r0, [r7, #8]
 8000be8:	f7ff fda8 	bl	800073c <SD_TxDataBlock>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <SD_disk_write+0xd0>
				buff += 512;
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bf8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1ee      	bne.n	8000be4 <SD_disk_write+0xac>
 8000c06:	e000      	b.n	8000c0a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c08:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c0a:	21fd      	movs	r1, #253	@ 0xfd
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fd95 	bl	800073c <SD_TxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <SD_disk_write+0xe4>
			{
				count = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c1c:	f7ff fc80 	bl	8000520 <DESELECT>
	SPI_RxByte();
 8000c20:	f7ff fcc0 	bl	80005a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000094 	.word	0x20000094

08000c40 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08b      	sub	sp, #44	@ 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	603a      	str	r2, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SD_disk_ioctl+0x1e>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	e113      	b.n	8000e86 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b05      	cmp	r3, #5
 8000c68:	d124      	bne.n	8000cb4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d012      	beq.n	8000c98 <SD_disk_ioctl+0x58>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc1a      	bgt.n	8000cac <SD_disk_ioctl+0x6c>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <SD_disk_ioctl+0x40>
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d006      	beq.n	8000c8c <SD_disk_ioctl+0x4c>
 8000c7e:	e015      	b.n	8000cac <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c80:	f7ff fd16 	bl	80006b0 <SD_PowerOff>
			res = RES_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c8a:	e0fa      	b.n	8000e82 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c8c:	f7ff fcce 	bl	800062c <SD_PowerOn>
			res = RES_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c96:	e0f4      	b.n	8000e82 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	1c5c      	adds	r4, r3, #1
 8000c9c:	f7ff fd14 	bl	80006c8 <SD_CheckPower>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000caa:	e0ea      	b.n	8000e82 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000cac:	2304      	movs	r3, #4
 8000cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cb2:	e0e6      	b.n	8000e82 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cb4:	4b76      	ldr	r3, [pc, #472]	@ (8000e90 <SD_disk_ioctl+0x250>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SD_disk_ioctl+0x86>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e0df      	b.n	8000e86 <SD_disk_ioctl+0x246>

		SELECT();
 8000cc6:	f7ff fc1d 	bl	8000504 <SELECT>

		switch (ctrl)
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b0d      	cmp	r3, #13
 8000cce:	f200 80c9 	bhi.w	8000e64 <SD_disk_ioctl+0x224>
 8000cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <SD_disk_ioctl+0x98>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000dcf 	.word	0x08000dcf
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000dbf 	.word	0x08000dbf
 8000ce4:	08000e65 	.word	0x08000e65
 8000ce8:	08000e65 	.word	0x08000e65
 8000cec:	08000e65 	.word	0x08000e65
 8000cf0:	08000e65 	.word	0x08000e65
 8000cf4:	08000e65 	.word	0x08000e65
 8000cf8:	08000e65 	.word	0x08000e65
 8000cfc:	08000e65 	.word	0x08000e65
 8000d00:	08000e65 	.word	0x08000e65
 8000d04:	08000de1 	.word	0x08000de1
 8000d08:	08000e05 	.word	0x08000e05
 8000d0c:	08000e29 	.word	0x08000e29
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d10:	2100      	movs	r1, #0
 8000d12:	2049      	movs	r0, #73	@ 0x49
 8000d14:	f7ff fd55 	bl	80007c2 <SD_SendCmd>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 80a6 	bne.w	8000e6c <SD_disk_ioctl+0x22c>
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	2110      	movs	r1, #16
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fcda 	bl	80006e0 <SD_RxDataBlock>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 809c 	beq.w	8000e6c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d34:	7b3b      	ldrb	r3, [r7, #12]
 8000d36:	099b      	lsrs	r3, r3, #6
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10d      	bne.n	8000d5a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	461a      	mov	r2, r3
 8000d42:	7d3b      	ldrb	r3, [r7, #20]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d50:	8bfb      	ldrh	r3, [r7, #30]
 8000d52:	029a      	lsls	r2, r3, #10
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e02d      	b.n	8000db6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d5a:	7c7b      	ldrb	r3, [r7, #17]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	09db      	lsrs	r3, r3, #7
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	7d7b      	ldrb	r3, [r7, #21]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0306 	and.w	r3, r3, #6
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d82:	7d3b      	ldrb	r3, [r7, #20]
 8000d84:	099b      	lsrs	r3, r3, #6
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	7cfb      	ldrb	r3, [r7, #19]
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	7cbb      	ldrb	r3, [r7, #18]
 8000d96:	029b      	lsls	r3, r3, #10
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4413      	add	r3, r2
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	3301      	adds	r3, #1
 8000da6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000da8:	8bfa      	ldrh	r2, [r7, #30]
 8000daa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000dae:	3b09      	subs	r3, #9
 8000db0:	409a      	lsls	r2, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dbc:	e056      	b.n	8000e6c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dcc:	e055      	b.n	8000e7a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dce:	f7ff fc13 	bl	80005f8 <SD_ReadyWait>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2bff      	cmp	r3, #255	@ 0xff
 8000dd6:	d14b      	bne.n	8000e70 <SD_disk_ioctl+0x230>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dde:	e047      	b.n	8000e70 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de0:	2100      	movs	r1, #0
 8000de2:	2049      	movs	r0, #73	@ 0x49
 8000de4:	f7ff fced 	bl	80007c2 <SD_SendCmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d142      	bne.n	8000e74 <SD_disk_ioctl+0x234>
 8000dee:	2110      	movs	r1, #16
 8000df0:	6a38      	ldr	r0, [r7, #32]
 8000df2:	f7ff fc75 	bl	80006e0 <SD_RxDataBlock>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d03b      	beq.n	8000e74 <SD_disk_ioctl+0x234>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e02:	e037      	b.n	8000e74 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e04:	2100      	movs	r1, #0
 8000e06:	204a      	movs	r0, #74	@ 0x4a
 8000e08:	f7ff fcdb 	bl	80007c2 <SD_SendCmd>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d132      	bne.n	8000e78 <SD_disk_ioctl+0x238>
 8000e12:	2110      	movs	r1, #16
 8000e14:	6a38      	ldr	r0, [r7, #32]
 8000e16:	f7ff fc63 	bl	80006e0 <SD_RxDataBlock>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02b      	beq.n	8000e78 <SD_disk_ioctl+0x238>
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e26:	e027      	b.n	8000e78 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	207a      	movs	r0, #122	@ 0x7a
 8000e2c:	f7ff fcc9 	bl	80007c2 <SD_SendCmd>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e3c:	e00b      	b.n	8000e56 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e3e:	6a3c      	ldr	r4, [r7, #32]
 8000e40:	1c63      	adds	r3, r4, #1
 8000e42:	623b      	str	r3, [r7, #32]
 8000e44:	f7ff fbae 	bl	80005a4 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d9ef      	bls.n	8000e3e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e64:	2304      	movs	r3, #4
 8000e66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e6a:	e006      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e6c:	bf00      	nop
 8000e6e:	e004      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e70:	bf00      	nop
 8000e72:	e002      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e74:	bf00      	nop
 8000e76:	e000      	b.n	8000e7a <SD_disk_ioctl+0x23a>
			break;
 8000e78:	bf00      	nop
		}

		DESELECT();
 8000e7a:	f7ff fb51 	bl	8000520 <DESELECT>
		SPI_RxByte();
 8000e7e:	f7ff fb91 	bl	80005a4 <SPI_RxByte>
	}

	return res;
 8000e82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	372c      	adds	r7, #44	@ 0x2c
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0d6      	sub	sp, #344	@ 0x158
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f000 fc2d 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f907 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea2:	f000 f9c5 	bl	8001230 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ea6:	f000 f963 	bl	8001170 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000eaa:	f000 f997 	bl	80011dc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000eae:	f003 fa21 	bl	80042f4 <MX_FATFS_Init>


  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,rx_data, 1);  // Empezar la recepción por UART1 en modo interrupción
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	496c      	ldr	r1, [pc, #432]	@ (8001068 <main+0x1d4>)
 8000eb6:	486d      	ldr	r0, [pc, #436]	@ (800106c <main+0x1d8>)
 8000eb8:	f002 faa1 	bl	80033fe <HAL_UART_Receive_IT>
  HAL_Delay(500);
 8000ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ec0:	f000 fc8c 	bl	80017dc <HAL_Delay>

  // Montar SD
  fres = f_mount(&fs,"/" , 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	496a      	ldr	r1, [pc, #424]	@ (8001070 <main+0x1dc>)
 8000ec8:	486a      	ldr	r0, [pc, #424]	@ (8001074 <main+0x1e0>)
 8000eca:	f005 fe43 	bl	8006b54 <f_mount>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b69      	ldr	r3, [pc, #420]	@ (8001078 <main+0x1e4>)
 8000ed4:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK){
 8000ed6:	4b68      	ldr	r3, [pc, #416]	@ (8001078 <main+0x1e4>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <main+0x52>
      transmit_uart("Micro SD is mounted successfully\n\n\n\n");
 8000ede:	4867      	ldr	r0, [pc, #412]	@ (800107c <main+0x1e8>)
 8000ee0:	f000 f9f6 	bl	80012d0 <transmit_uart>
 8000ee4:	e002      	b.n	8000eec <main+0x58>
  } else {
      transmit_uart("Micro SD is mounted bad\n\n\n\n");
 8000ee6:	4866      	ldr	r0, [pc, #408]	@ (8001080 <main+0x1ec>)
 8000ee8:	f000 f9f2 	bl	80012d0 <transmit_uart>
  }


  transmit_uart("******************Bienvenido/a*************************\n\n");
 8000eec:	4865      	ldr	r0, [pc, #404]	@ (8001084 <main+0x1f0>)
 8000eee:	f000 f9ef 	bl	80012d0 <transmit_uart>
  transmit_uart("Coloque A para leer la lista de archivos, B para desmostar unidad, D para montar unidad\n");
 8000ef2:	4865      	ldr	r0, [pc, #404]	@ (8001088 <main+0x1f4>)
 8000ef4:	f000 f9ec 	bl	80012d0 <transmit_uart>
  transmit_uart("Coloque C y el identificador del archivo para leer\n\n");
 8000ef8:	4864      	ldr	r0, [pc, #400]	@ (800108c <main+0x1f8>)
 8000efa:	f000 f9e9 	bl	80012d0 <transmit_uart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(activa == 1){      //Si se desea leer la lista de archivos que tiene el archivo
 8000efe:	4b64      	ldr	r3, [pc, #400]	@ (8001090 <main+0x1fc>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d15e      	bne.n	8000fc4 <main+0x130>

		  DIR dir;
		     FILINFO fno;
		     file_count = 0;  // Reiniciar el contador de archivos
 8000f06:	4b63      	ldr	r3, [pc, #396]	@ (8001094 <main+0x200>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]

		     FRESULT fres = f_opendir(&dir, "/");
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4958      	ldr	r1, [pc, #352]	@ (8001070 <main+0x1dc>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fa34 	bl	800737e <f_opendir>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
		     if (fres == FR_OK) {
 8000f1c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d12c      	bne.n	8000f7e <main+0xea>
		         while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] && file_count < MAX_FILES) {
 8000f24:	e012      	b.n	8000f4c <main+0xb8>
		             // Almacenar el nombre del archivo en la lista
		             strcpy(file_list[file_count], fno.fname);
 8000f26:	4b5b      	ldr	r3, [pc, #364]	@ (8001094 <main+0x200>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2232      	movs	r2, #50	@ 0x32
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4a59      	ldr	r2, [pc, #356]	@ (8001098 <main+0x204>)
 8000f32:	441a      	add	r2, r3
 8000f34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f38:	3316      	adds	r3, #22
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f006 fd0f 	bl	8007960 <strcpy>
		             file_count++;
 8000f42:	4b54      	ldr	r3, [pc, #336]	@ (8001094 <main+0x200>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a52      	ldr	r2, [pc, #328]	@ (8001094 <main+0x200>)
 8000f4a:	6013      	str	r3, [r2, #0]
		         while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] && file_count < MAX_FILES) {
 8000f4c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f006 faab 	bl	80074b0 <f_readdir>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10a      	bne.n	8000f76 <main+0xe2>
 8000f60:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8000f64:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f68:	7d9b      	ldrb	r3, [r3, #22]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <main+0xe2>
 8000f6e:	4b49      	ldr	r3, [pc, #292]	@ (8001094 <main+0x200>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b09      	cmp	r3, #9
 8000f74:	ddd7      	ble.n	8000f26 <main+0x92>
		         }
		         f_closedir(&dir);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fa73 	bl	8007464 <f_closedir>
		     }

		     // Enviar la lista de archivos por UART a Python
		     for (int i = 0; i < file_count; i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000f84:	e011      	b.n	8000faa <main+0x116>
		         transmit_uart(file_list[i]);
 8000f86:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000f8a:	2232      	movs	r2, #50	@ 0x32
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	4a41      	ldr	r2, [pc, #260]	@ (8001098 <main+0x204>)
 8000f92:	4413      	add	r3, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f99b 	bl	80012d0 <transmit_uart>
		         transmit_uart("\n");
 8000f9a:	4840      	ldr	r0, [pc, #256]	@ (800109c <main+0x208>)
 8000f9c:	f000 f998 	bl	80012d0 <transmit_uart>
		     for (int i = 0; i < file_count; i++) {
 8000fa0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000faa:	4b3a      	ldr	r3, [pc, #232]	@ (8001094 <main+0x200>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbe7      	blt.n	8000f86 <main+0xf2>
		     }

			 HAL_Delay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fba:	f000 fc0f 	bl	80017dc <HAL_Delay>
			 activa = 0;
 8000fbe:	4b34      	ldr	r3, [pc, #208]	@ (8001090 <main+0x1fc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
	  }

	  if(activa == 2){         //Si se desea desmontar el archivo
 8000fc4:	4b32      	ldr	r3, [pc, #200]	@ (8001090 <main+0x1fc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d116      	bne.n	8000ffa <main+0x166>
		  // Desmontar SD
				  f_mount(NULL, "", 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4934      	ldr	r1, [pc, #208]	@ (80010a0 <main+0x20c>)
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f005 fdbf 	bl	8006b54 <f_mount>
				  if(fres == FR_OK){
 8000fd6:	4b28      	ldr	r3, [pc, #160]	@ (8001078 <main+0x1e4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <main+0x152>
					  transmit_uart("Micro SD was unmounted\n");
 8000fde:	4831      	ldr	r0, [pc, #196]	@ (80010a4 <main+0x210>)
 8000fe0:	f000 f976 	bl	80012d0 <transmit_uart>
 8000fe4:	e002      	b.n	8000fec <main+0x158>
				  } else {
					  transmit_uart("Micro SD was not unmounted\n");
 8000fe6:	4830      	ldr	r0, [pc, #192]	@ (80010a8 <main+0x214>)
 8000fe8:	f000 f972 	bl	80012d0 <transmit_uart>
				  }

				 HAL_Delay(500);
 8000fec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ff0:	f000 fbf4 	bl	80017dc <HAL_Delay>
				 activa = 0;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <main+0x1fc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
	  }

	   if(activa == 3 && activa1 != 0){         //Si se desea abrir un archivo
 8000ffa:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <main+0x1fc>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d112      	bne.n	8001028 <main+0x194>
 8001002:	4b2a      	ldr	r3, [pc, #168]	@ (80010ac <main+0x218>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00e      	beq.n	8001028 <main+0x194>


		   read_file_by_index(activa1);  // Leer el archivo correspondiente
 800100a:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <main+0x218>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f9b8 	bl	8001384 <read_file_by_index>
		      f_close(&fil);
		  } else {
		      transmit_uart("Error opening file\n");
		  }*/

		  HAL_Delay(500);
 8001014:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001018:	f000 fbe0 	bl	80017dc <HAL_Delay>
		  activa = 0;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <main+0x1fc>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
		  activa1 = 0;
 8001022:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <main+0x218>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]

	  }

	   if(activa == 4){
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <main+0x1fc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b04      	cmp	r3, #4
 800102e:	f47f af66 	bne.w	8000efe <main+0x6a>
		   // Montar SD
		     fres = f_mount(&fs,"/" , 0);
 8001032:	2200      	movs	r2, #0
 8001034:	490e      	ldr	r1, [pc, #56]	@ (8001070 <main+0x1dc>)
 8001036:	480f      	ldr	r0, [pc, #60]	@ (8001074 <main+0x1e0>)
 8001038:	f005 fd8c 	bl	8006b54 <f_mount>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <main+0x1e4>)
 8001042:	701a      	strb	r2, [r3, #0]
		     if(fres == FR_OK){
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <main+0x1e4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d103      	bne.n	8001054 <main+0x1c0>
		         transmit_uart("Micro SD is mounted successfully\n\n\n\n");
 800104c:	480b      	ldr	r0, [pc, #44]	@ (800107c <main+0x1e8>)
 800104e:	f000 f93f 	bl	80012d0 <transmit_uart>
 8001052:	e002      	b.n	800105a <main+0x1c6>
		     } else {
		         transmit_uart("Micro SD is mounted bad\n\n\n\n");
 8001054:	480a      	ldr	r0, [pc, #40]	@ (8001080 <main+0x1ec>)
 8001056:	f000 f93b 	bl	80012d0 <transmit_uart>
		     }
		     activa = 0;
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <main+0x1fc>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		    activa1 = 0;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <main+0x218>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
	  if(activa == 1){      //Si se desea leer la lista de archivos que tiene el archivo
 8001066:	e74a      	b.n	8000efe <main+0x6a>
 8001068:	20001174 	.word	0x20001174
 800106c:	2000112c 	.word	0x2000112c
 8001070:	08007988 	.word	0x08007988
 8001074:	200000f0 	.word	0x200000f0
 8001078:	20001128 	.word	0x20001128
 800107c:	0800798c 	.word	0x0800798c
 8001080:	080079b4 	.word	0x080079b4
 8001084:	080079d0 	.word	0x080079d0
 8001088:	08007a0c 	.word	0x08007a0c
 800108c:	08007a68 	.word	0x08007a68
 8001090:	20001175 	.word	0x20001175
 8001094:	2000136c 	.word	0x2000136c
 8001098:	20001178 	.word	0x20001178
 800109c:	08007aa0 	.word	0x08007aa0
 80010a0:	08007aa4 	.word	0x08007aa4
 80010a4:	08007aa8 	.word	0x08007aa8
 80010a8:	08007ac0 	.word	0x08007ac0
 80010ac:	20001176 	.word	0x20001176

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	@ 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2234      	movs	r2, #52	@ 0x34
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f006 fc1c 	bl	80078fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <SystemClock_Config+0xb8>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	4a22      	ldr	r2, [pc, #136]	@ (8001168 <SystemClock_Config+0xb8>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e4:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <SystemClock_Config+0xb8>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010f0:	2300      	movs	r3, #0
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <SystemClock_Config+0xbc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010fc:	4a1b      	ldr	r2, [pc, #108]	@ (800116c <SystemClock_Config+0xbc>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <SystemClock_Config+0xbc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f99f 	bl	8002468 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001130:	f000 f98c 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fec6 	bl	8001ee0 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800115a:	f000 f977 	bl	800144c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	@ 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_SPI1_Init+0x64>)
 8001176:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <MX_SPI1_Init+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <MX_SPI1_Init+0x64>)
 800117c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_SPI1_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_SPI1_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_SPI1_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_SPI1_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_SPI1_Init+0x64>)
 800119c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_SPI1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <MX_SPI1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_SPI1_Init+0x64>)
 80011bc:	220a      	movs	r2, #10
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_SPI1_Init+0x64>)
 80011c2:	f001 fbef 	bl	80029a4 <HAL_SPI_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011cc:	f000 f93e 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000098 	.word	0x20000098
 80011d8:	40013000 	.word	0x40013000

080011dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <MX_USART2_UART_Init+0x50>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_USART2_UART_Init+0x4c>)
 8001214:	f002 f818 	bl	8003248 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f915 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000112c 	.word	0x2000112c
 800122c:	40004400 	.word	0x40004400

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <MX_GPIO_Init+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <MX_GPIO_Init+0x98>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_GPIO_Init+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 800129a:	2201      	movs	r2, #1
 800129c:	2140      	movs	r1, #64	@ 0x40
 800129e:	480b      	ldr	r0, [pc, #44]	@ (80012cc <MX_GPIO_Init+0x9c>)
 80012a0:	f000 fe04 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_SS_Pin */
  GPIO_InitStruct.Pin = SD_SS_Pin;
 80012a4:	2340      	movs	r3, #64	@ 0x40
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_GPIO_Init+0x9c>)
 80012bc:	f000 fc62 	bl	8001b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400

080012d0 <transmit_uart>:

/* USER CODE BEGIN 4 */
void transmit_uart(char *data) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7fe ff93 	bl	8000204 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <transmit_uart+0x28>)
 80012ea:	f001 fffd 	bl	80032e8 <HAL_UART_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000112c 	.word	0x2000112c

080012fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	 if (huart->Instance == USART2) // Verificar si la interrupción es de UART2
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <HAL_UART_RxCpltCallback+0x74>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d126      	bne.n	800135c <HAL_UART_RxCpltCallback+0x60>
	  {
		 if (rx_data[0] == 'A'){
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b41      	cmp	r3, #65	@ 0x41
 8001314:	d103      	bne.n	800131e <HAL_UART_RxCpltCallback+0x22>
			 activa = 1;
 8001316:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e01e      	b.n	800135c <HAL_UART_RxCpltCallback+0x60>
		 }

		 else if (rx_data[0] == 'B'){
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b42      	cmp	r3, #66	@ 0x42
 8001324:	d103      	bne.n	800132e <HAL_UART_RxCpltCallback+0x32>
			 activa = 2;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 8001328:	2202      	movs	r2, #2
 800132a:	701a      	strb	r2, [r3, #0]
 800132c:	e016      	b.n	800135c <HAL_UART_RxCpltCallback+0x60>

		 }

		 else if (rx_data[0] == 'C'){
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b43      	cmp	r3, #67	@ 0x43
 8001334:	d103      	bne.n	800133e <HAL_UART_RxCpltCallback+0x42>
			 activa = 3;
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e00e      	b.n	800135c <HAL_UART_RxCpltCallback+0x60>

				}

		 else if (rx_data[0] == 'D'){
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b44      	cmp	r3, #68	@ 0x44
 8001344:	d103      	bne.n	800134e <HAL_UART_RxCpltCallback+0x52>
					 activa = 4;
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_UART_RxCpltCallback+0x7c>)
 8001348:	2204      	movs	r2, #4
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e006      	b.n	800135c <HAL_UART_RxCpltCallback+0x60>

				}
		 else{
			 activa1 = atoi((char*)rx_data);  // Usa un cast a char*
 800134e:	4809      	ldr	r0, [pc, #36]	@ (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001350:	f006 fa4c 	bl	80077ec <atoi>
 8001354:	4603      	mov	r3, r0
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_UART_RxCpltCallback+0x80>)
 800135a:	701a      	strb	r2, [r3, #0]

		 }
	  }

	 // Volver a habilitar la recepción por UART2
	    HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800135c:	2201      	movs	r2, #1
 800135e:	4905      	ldr	r1, [pc, #20]	@ (8001374 <HAL_UART_RxCpltCallback+0x78>)
 8001360:	4807      	ldr	r0, [pc, #28]	@ (8001380 <HAL_UART_RxCpltCallback+0x84>)
 8001362:	f002 f84c 	bl	80033fe <HAL_UART_Receive_IT>

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40004400 	.word	0x40004400
 8001374:	20001174 	.word	0x20001174
 8001378:	20001175 	.word	0x20001175
 800137c:	20001176 	.word	0x20001176
 8001380:	2000112c 	.word	0x2000112c

08001384 <read_file_by_index>:


// Función para leer el archivo basado en el índice
void read_file_by_index(int index) {
 8001384:	b580      	push	{r7, lr}
 8001386:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
 800138a:	af00      	add	r7, sp, #0
 800138c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001390:	f843 0c9c 	str.w	r0, [r3, #-156]
    if (index < file_count && index >= 0) {
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <read_file_by_index+0xb8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800139c:	f852 2c9c 	ldr.w	r2, [r2, #-156]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	da41      	bge.n	8001428 <read_file_by_index+0xa4>
 80013a4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80013a8:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db3b      	blt.n	8001428 <read_file_by_index+0xa4>
        FIL fil;
        FRESULT fres = f_open(&fil, file_list[index], FA_READ);
 80013b0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80013b4:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 80013b8:	2232      	movs	r2, #50	@ 0x32
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	4a20      	ldr	r2, [pc, #128]	@ (8001440 <read_file_by_index+0xbc>)
 80013c0:	1899      	adds	r1, r3, r2
 80013c2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80013c6:	3b14      	subs	r3, #20
 80013c8:	2201      	movs	r2, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 fc08 	bl	8006be0 <f_open>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 80013d6:	f102 021f 	add.w	r2, r2, #31
 80013da:	7013      	strb	r3, [r2, #0]
        if (fres == FR_OK) {
 80013dc:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 80013e0:	f103 031f 	add.w	r3, r3, #31
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11a      	bne.n	8001420 <read_file_by_index+0x9c>
            char line[100];
            while (f_gets(line, sizeof(line), &fil)) {
 80013ea:	e005      	b.n	80013f8 <read_file_by_index+0x74>
                transmit_uart(line);
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	3b18      	subs	r3, #24
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff6c 	bl	80012d0 <transmit_uart>
            while (f_gets(line, sizeof(line), &fil)) {
 80013f8:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80013fc:	3a14      	subs	r2, #20
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	3b18      	subs	r3, #24
 8001404:	2164      	movs	r1, #100	@ 0x64
 8001406:	4618      	mov	r0, r3
 8001408:	f006 f88f 	bl	800752a <f_gets>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ec      	bne.n	80013ec <read_file_by_index+0x68>
            }
            f_close(&fil);
 8001412:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001416:	3b14      	subs	r3, #20
 8001418:	4618      	mov	r0, r3
 800141a:	f005 ff86 	bl	800732a <f_close>
    if (index < file_count && index >= 0) {
 800141e:	e007      	b.n	8001430 <read_file_by_index+0xac>
        } else {
            transmit_uart("Error opening file\n");
 8001420:	4808      	ldr	r0, [pc, #32]	@ (8001444 <read_file_by_index+0xc0>)
 8001422:	f7ff ff55 	bl	80012d0 <transmit_uart>
    if (index < file_count && index >= 0) {
 8001426:	e003      	b.n	8001430 <read_file_by_index+0xac>
        }
    } else {
        transmit_uart("Invalid file index\n");
 8001428:	4807      	ldr	r0, [pc, #28]	@ (8001448 <read_file_by_index+0xc4>)
 800142a:	f7ff ff51 	bl	80012d0 <transmit_uart>
    }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	f507 5785 	add.w	r7, r7, #4256	@ 0x10a0
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000136c 	.word	0x2000136c
 8001440:	20001178 	.word	0x20001178
 8001444:	08007adc 	.word	0x08007adc
 8001448:	08007af0 	.word	0x08007af0

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <Error_Handler+0x8>

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	@ (80014a4 <HAL_MspInit+0x4c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	@ (800152c <HAL_SPI_MspInit+0x84>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12b      	bne.n	8001522 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <HAL_SPI_MspInit+0x88>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_SPI_MspInit+0x88>)
 80014d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_SPI_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <HAL_SPI_MspInit+0x88>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <HAL_SPI_MspInit+0x88>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <HAL_SPI_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001502:	23e0      	movs	r3, #224	@ 0xe0
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001512:	2305      	movs	r3, #5
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <HAL_SPI_MspInit+0x8c>)
 800151e:	f000 fb31 	bl	8001b84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40013000 	.word	0x40013000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1d      	ldr	r2, [pc, #116]	@ (80015cc <HAL_UART_MspInit+0x94>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d133      	bne.n	80015c2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <HAL_UART_MspInit+0x98>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a1b      	ldr	r2, [pc, #108]	@ (80015d0 <HAL_UART_MspInit+0x98>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_UART_MspInit+0x98>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_UART_MspInit+0x98>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a14      	ldr	r2, [pc, #80]	@ (80015d0 <HAL_UART_MspInit+0x98>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_UART_MspInit+0x98>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a2:	2307      	movs	r3, #7
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <HAL_UART_MspInit+0x9c>)
 80015ae:	f000 fae9 	bl	8001b84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2026      	movs	r0, #38	@ 0x26
 80015b8:	f000 fa0f 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015bc:	2026      	movs	r0, #38	@ 0x26
 80015be:	f000 fa28 	bl	8001a12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004400 	.word	0x40004400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <NMI_Handler+0x4>

080015e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <MemManage_Handler+0x4>

080015f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <UsageFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 >0){
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <SysTick_Handler+0x38>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <SysTick_Handler+0x18>
		Timer1--;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <SysTick_Handler+0x38>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <SysTick_Handler+0x38>)
 8001642:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 >0){
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <SysTick_Handler+0x3c>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <SysTick_Handler+0x2c>
		Timer2--;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <SysTick_Handler+0x3c>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SysTick_Handler+0x3c>)
 8001656:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001658:	f000 f8a0 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800165c:	f000 f9f3 	bl	8001a46 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000090 	.word	0x20000090
 8001668:	20000092 	.word	0x20000092

0800166c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <USART2_IRQHandler+0x10>)
 8001672:	f001 fee9 	bl	8003448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000112c 	.word	0x2000112c

08001680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a8:	f7ff ffea 	bl	8001680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ae:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c4:	4c0a      	ldr	r4, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f006 f921 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff fbdd 	bl	8000e94 <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016e8:	080080b8 	.word	0x080080b8
  ldr r2, =_sbss
 80016ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016f0:	200016e8 	.word	0x200016e8

080016f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <HAL_Init+0x40>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_Init+0x40>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_Init+0x40>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f94f 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fe94 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f967 	bl	8001a2e <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f92f 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000004 	.word	0x20000004
 8001794:	2000000c 	.word	0x2000000c
 8001798:	20000008 	.word	0x20000008

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	20001370 	.word	0x20001370

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20001370 	.word	0x20001370

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d005      	beq.n	8001802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_Delay+0x44>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001802:	bf00      	nop
 8001804:	f7ff ffde 	bl	80017c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d8f7      	bhi.n	8001804 <HAL_Delay+0x28>
  {
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000000c 	.word	0x2000000c

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	@ (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	@ (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	@ (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	@ 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	@ 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a4a:	f000 f802 	bl	8001a52 <HAL_SYSTICK_Callback>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a6e:	f7ff fea9 	bl	80017c4 <HAL_GetTick>
 8001a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d008      	beq.n	8001a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e052      	b.n	8001b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0216 	bic.w	r2, r2, #22
 8001aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <HAL_DMA_Abort+0x62>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0208 	bic.w	r2, r2, #8
 8001ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae2:	e013      	b.n	8001b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae4:	f7ff fe6e 	bl	80017c4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d90c      	bls.n	8001b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e015      	b.n	8001b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1e4      	bne.n	8001ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	223f      	movs	r2, #63	@ 0x3f
 8001b20:	409a      	lsls	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d004      	beq.n	8001b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00c      	b.n	8001b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2205      	movs	r2, #5
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	@ 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e165      	b.n	8001e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8154 	bne.w	8001e66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d130      	bne.n	8001c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ae 	beq.w	8001e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_GPIO_Init+0x300>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a5c      	ldr	r2, [pc, #368]	@ (8001e84 <HAL_GPIO_Init+0x300>)
 8001d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e84 <HAL_GPIO_Init+0x300>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d26:	4a58      	ldr	r2, [pc, #352]	@ (8001e88 <HAL_GPIO_Init+0x304>)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	089b      	lsrs	r3, r3, #2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e8c <HAL_GPIO_Init+0x308>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d025      	beq.n	8001d9e <HAL_GPIO_Init+0x21a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4e      	ldr	r2, [pc, #312]	@ (8001e90 <HAL_GPIO_Init+0x30c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_Init+0x216>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e94 <HAL_GPIO_Init+0x310>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x212>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	@ (8001e98 <HAL_GPIO_Init+0x314>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x20e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e9c <HAL_GPIO_Init+0x318>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x20a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea0 <HAL_GPIO_Init+0x31c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	@ (8001ea4 <HAL_GPIO_Init+0x320>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x202>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00c      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d86:	2307      	movs	r3, #7
 8001d88:	e00a      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	e008      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d92:	2303      	movs	r3, #3
 8001d94:	e004      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e002      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	4093      	lsls	r3, r2
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db0:	4935      	ldr	r1, [pc, #212]	@ (8001e88 <HAL_GPIO_Init+0x304>)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a31      	ldr	r2, [pc, #196]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e12:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e60:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	f67f ae96 	bls.w	8001ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40013800 	.word	0x40013800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020400 	.word	0x40020400
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40021400 	.word	0x40021400
 8001ea4:	40021800 	.word	0x40021800
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0cc      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b68      	ldr	r3, [pc, #416]	@ (8002098 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d90c      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b65      	ldr	r3, [pc, #404]	@ (8002098 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b63      	ldr	r3, [pc, #396]	@ (8002098 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b8      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f34:	4b59      	ldr	r3, [pc, #356]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4a58      	ldr	r2, [pc, #352]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a52      	ldr	r2, [pc, #328]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b50      	ldr	r3, [pc, #320]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	494d      	ldr	r1, [pc, #308]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d044      	beq.n	8002000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d119      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07f      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d003      	beq.n	8001f9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e06f      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e067      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b37      	ldr	r3, [pc, #220]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4934      	ldr	r1, [pc, #208]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fbf8 	bl	80017c4 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7ff fbf4 	bl	80017c4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e04f      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <HAL_RCC_ClockConfig+0x1b8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d20c      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <HAL_RCC_ClockConfig+0x1b8>)
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e032      	b.n	800208e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4916      	ldr	r1, [pc, #88]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	490e      	ldr	r1, [pc, #56]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002066:	f000 f855 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 800206a:	4602      	mov	r2, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	490a      	ldr	r1, [pc, #40]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fb58 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023c00 	.word	0x40023c00
 800209c:	40023800 	.word	0x40023800
 80020a0:	08007b4c 	.word	0x08007b4c
 80020a4:	20000004 	.word	0x20000004
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c8:	f7ff fff0 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0a9b      	lsrs	r3, r3, #10
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4903      	ldr	r1, [pc, #12]	@ (80020e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40023800 	.word	0x40023800
 80020e8:	08007b5c 	.word	0x08007b5c

080020ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f0:	f7ff ffdc 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0b5b      	lsrs	r3, r3, #13
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	@ (8002110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08007b5c 	.word	0x08007b5c

08002114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002118:	b0a6      	sub	sp, #152	@ 0x98
 800211a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800213a:	4bc8      	ldr	r3, [pc, #800]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b0c      	cmp	r3, #12
 8002144:	f200 817e 	bhi.w	8002444 <HAL_RCC_GetSysClockFreq+0x330>
 8002148:	a201      	add	r2, pc, #4	@ (adr r2, 8002150 <HAL_RCC_GetSysClockFreq+0x3c>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002185 	.word	0x08002185
 8002154:	08002445 	.word	0x08002445
 8002158:	08002445 	.word	0x08002445
 800215c:	08002445 	.word	0x08002445
 8002160:	0800218d 	.word	0x0800218d
 8002164:	08002445 	.word	0x08002445
 8002168:	08002445 	.word	0x08002445
 800216c:	08002445 	.word	0x08002445
 8002170:	08002195 	.word	0x08002195
 8002174:	08002445 	.word	0x08002445
 8002178:	08002445 	.word	0x08002445
 800217c:	08002445 	.word	0x08002445
 8002180:	080022ff 	.word	0x080022ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002184:	4bb6      	ldr	r3, [pc, #728]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800218a:	e15f      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800218c:	4bb5      	ldr	r3, [pc, #724]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x350>)
 800218e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002192:	e15b      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002194:	4bb1      	ldr	r3, [pc, #708]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800219c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a0:	4bae      	ldr	r3, [pc, #696]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d031      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ac:	4bab      	ldr	r3, [pc, #684]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	2200      	movs	r2, #0
 80021b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	663b      	str	r3, [r7, #96]	@ 0x60
 80021c0:	2300      	movs	r3, #0
 80021c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80021c4:	4ba7      	ldr	r3, [pc, #668]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x350>)
 80021c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021ca:	462a      	mov	r2, r5
 80021cc:	fb03 f202 	mul.w	r2, r3, r2
 80021d0:	2300      	movs	r3, #0
 80021d2:	4621      	mov	r1, r4
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	4aa2      	ldr	r2, [pc, #648]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x350>)
 80021dc:	4621      	mov	r1, r4
 80021de:	fba1 1202 	umull	r1, r2, r1, r2
 80021e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80021e4:	460a      	mov	r2, r1
 80021e6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80021e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021ea:	4413      	add	r3, r2
 80021ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021f2:	2200      	movs	r2, #0
 80021f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002200:	f7fe f808 	bl	8000214 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800220e:	e064      	b.n	80022da <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002210:	4b92      	ldr	r3, [pc, #584]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	2200      	movs	r2, #0
 8002218:	653b      	str	r3, [r7, #80]	@ 0x50
 800221a:	657a      	str	r2, [r7, #84]	@ 0x54
 800221c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800221e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002228:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800222c:	4622      	mov	r2, r4
 800222e:	462b      	mov	r3, r5
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	0159      	lsls	r1, r3, #5
 800223a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223e:	0150      	lsls	r0, r2, #5
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4621      	mov	r1, r4
 8002246:	1a51      	subs	r1, r2, r1
 8002248:	6139      	str	r1, [r7, #16]
 800224a:	4629      	mov	r1, r5
 800224c:	eb63 0301 	sbc.w	r3, r3, r1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800225e:	4659      	mov	r1, fp
 8002260:	018b      	lsls	r3, r1, #6
 8002262:	4651      	mov	r1, sl
 8002264:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002268:	4651      	mov	r1, sl
 800226a:	018a      	lsls	r2, r1, #6
 800226c:	4651      	mov	r1, sl
 800226e:	ebb2 0801 	subs.w	r8, r2, r1
 8002272:	4659      	mov	r1, fp
 8002274:	eb63 0901 	sbc.w	r9, r3, r1
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002284:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002288:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	4623      	mov	r3, r4
 8002292:	eb18 0303 	adds.w	r3, r8, r3
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	462b      	mov	r3, r5
 800229a:	eb49 0303 	adc.w	r3, r9, r3
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ac:	4629      	mov	r1, r5
 80022ae:	028b      	lsls	r3, r1, #10
 80022b0:	4621      	mov	r1, r4
 80022b2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b6:	4621      	mov	r1, r4
 80022b8:	028a      	lsls	r2, r1, #10
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c2:	2200      	movs	r2, #0
 80022c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80022c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022cc:	f7fd ffa2 	bl	8000214 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022da:	4b60      	ldr	r3, [pc, #384]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	3301      	adds	r3, #1
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80022ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80022fc:	e0a6      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022fe:	4b57      	ldr	r3, [pc, #348]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002306:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230a:	4b54      	ldr	r3, [pc, #336]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02a      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b51      	ldr	r3, [pc, #324]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002324:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002328:	2100      	movs	r1, #0
 800232a:	4b4e      	ldr	r3, [pc, #312]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x350>)
 800232c:	fb03 f201 	mul.w	r2, r3, r1
 8002330:	2300      	movs	r3, #0
 8002332:	fb00 f303 	mul.w	r3, r0, r3
 8002336:	4413      	add	r3, r2
 8002338:	4a4a      	ldr	r2, [pc, #296]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x350>)
 800233a:	fba0 1202 	umull	r1, r2, r0, r2
 800233e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002340:	460a      	mov	r2, r1
 8002342:	673a      	str	r2, [r7, #112]	@ 0x70
 8002344:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002346:	4413      	add	r3, r2
 8002348:	677b      	str	r3, [r7, #116]	@ 0x74
 800234a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800234e:	2200      	movs	r2, #0
 8002350:	633b      	str	r3, [r7, #48]	@ 0x30
 8002352:	637a      	str	r2, [r7, #52]	@ 0x34
 8002354:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002358:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800235c:	f7fd ff5a 	bl	8000214 <__aeabi_uldivmod>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4613      	mov	r3, r2
 8002366:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800236a:	e05b      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b3b      	ldr	r3, [pc, #236]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	2200      	movs	r2, #0
 8002374:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
 8002384:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002388:	4642      	mov	r2, r8
 800238a:	464b      	mov	r3, r9
 800238c:	f04f 0000 	mov.w	r0, #0
 8002390:	f04f 0100 	mov.w	r1, #0
 8002394:	0159      	lsls	r1, r3, #5
 8002396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800239a:	0150      	lsls	r0, r2, #5
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4641      	mov	r1, r8
 80023a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80023a6:	4649      	mov	r1, r9
 80023a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023c0:	ebb2 040a 	subs.w	r4, r2, sl
 80023c4:	eb63 050b 	sbc.w	r5, r3, fp
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	00eb      	lsls	r3, r5, #3
 80023d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d6:	00e2      	lsls	r2, r4, #3
 80023d8:	4614      	mov	r4, r2
 80023da:	461d      	mov	r5, r3
 80023dc:	4643      	mov	r3, r8
 80023de:	18e3      	adds	r3, r4, r3
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	464b      	mov	r3, r9
 80023e4:	eb45 0303 	adc.w	r3, r5, r3
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023f6:	4629      	mov	r1, r5
 80023f8:	028b      	lsls	r3, r1, #10
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002400:	4621      	mov	r1, r4
 8002402:	028a      	lsls	r2, r1, #10
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800240c:	2200      	movs	r2, #0
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	61fa      	str	r2, [r7, #28]
 8002412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002416:	f7fd fefd 	bl	8000214 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4613      	mov	r3, r2
 8002420:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_GetSysClockFreq+0x348>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0f1b      	lsrs	r3, r3, #28
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002436:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002442:	e003      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800244a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002450:	4618      	mov	r0, r3
 8002452:	3798      	adds	r7, #152	@ 0x98
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	017d7840 	.word	0x017d7840

08002468 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e28d      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8083 	beq.w	800258e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002488:	4b94      	ldr	r3, [pc, #592]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	d019      	beq.n	80024c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002494:	4b91      	ldr	r3, [pc, #580]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
        || \
 800249c:	2b08      	cmp	r3, #8
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024a0:	4b8e      	ldr	r3, [pc, #568]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024ac:	d00c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b8b      	ldr	r3, [pc, #556]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d112      	bne.n	80024e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b88      	ldr	r3, [pc, #544]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	4b84      	ldr	r3, [pc, #528]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d05b      	beq.n	800258c <HAL_RCC_OscConfig+0x124>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d157      	bne.n	800258c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e25a      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x90>
 80024ea:	4b7c      	ldr	r3, [pc, #496]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7b      	ldr	r2, [pc, #492]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xcc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0xb4>
 8002502:	4b76      	ldr	r3, [pc, #472]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a75      	ldr	r2, [pc, #468]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b73      	ldr	r3, [pc, #460]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a72      	ldr	r2, [pc, #456]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xcc>
 800251c:	4b6f      	ldr	r3, [pc, #444]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6e      	ldr	r2, [pc, #440]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b6c      	ldr	r3, [pc, #432]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6b      	ldr	r2, [pc, #428]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff f942 	bl	80017c4 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7ff f93e 	bl	80017c4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e21f      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b61      	ldr	r3, [pc, #388]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xdc>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff f92e 	bl	80017c4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff f92a 	bl	80017c4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e20b      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257e:	4b57      	ldr	r3, [pc, #348]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x104>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06f      	beq.n	800267a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800259a:	4b50      	ldr	r3, [pc, #320]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d017      	beq.n	80025d6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025a6:	4b4d      	ldr	r3, [pc, #308]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
        || \
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025b2:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d116      	bne.n	8002604 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d6:	4b41      	ldr	r3, [pc, #260]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_RCC_OscConfig+0x186>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e1d3      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4937      	ldr	r1, [pc, #220]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	e03a      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d020      	beq.n	800264e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800260c:	4b34      	ldr	r3, [pc, #208]	@ (80026e0 <HAL_RCC_OscConfig+0x278>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff f8d7 	bl	80017c4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7ff f8d3 	bl	80017c4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1b4      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4925      	ldr	r1, [pc, #148]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002648:	4313      	orrs	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	e015      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <HAL_RCC_OscConfig+0x278>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff f8b6 	bl	80017c4 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7ff f8b2 	bl	80017c4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e193      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d036      	beq.n	80026f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <HAL_RCC_OscConfig+0x27c>)
 8002690:	2201      	movs	r2, #1
 8002692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7ff f896 	bl	80017c4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269c:	f7ff f892 	bl	80017c4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e173      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x234>
 80026ba:	e01b      	b.n	80026f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_RCC_OscConfig+0x27c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7ff f87f 	bl	80017c4 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e00e      	b.n	80026e8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ca:	f7ff f87b 	bl	80017c4 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d907      	bls.n	80026e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e15c      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	42470000 	.word	0x42470000
 80026e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ea      	bne.n	80026ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8097 	beq.w	8002830 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b83      	ldr	r3, [pc, #524]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b7f      	ldr	r3, [pc, #508]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a7e      	ldr	r2, [pc, #504]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b7c      	ldr	r3, [pc, #496]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b79      	ldr	r3, [pc, #484]	@ (8002918 <HAL_RCC_OscConfig+0x4b0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b76      	ldr	r3, [pc, #472]	@ (8002918 <HAL_RCC_OscConfig+0x4b0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a75      	ldr	r2, [pc, #468]	@ (8002918 <HAL_RCC_OscConfig+0x4b0>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7ff f83b 	bl	80017c4 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002752:	f7ff f837 	bl	80017c4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e118      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002764:	4b6c      	ldr	r3, [pc, #432]	@ (8002918 <HAL_RCC_OscConfig+0x4b0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d106      	bne.n	8002786 <HAL_RCC_OscConfig+0x31e>
 8002778:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	e01c      	b.n	80027c0 <HAL_RCC_OscConfig+0x358>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x340>
 800278e:	4b61      	ldr	r3, [pc, #388]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002792:	4a60      	ldr	r2, [pc, #384]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6713      	str	r3, [r2, #112]	@ 0x70
 800279a:	4b5e      	ldr	r3, [pc, #376]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	4a5d      	ldr	r2, [pc, #372]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x358>
 80027a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	4a59      	ldr	r2, [pc, #356]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b4:	4b57      	ldr	r3, [pc, #348]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b8:	4a56      	ldr	r2, [pc, #344]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fffc 	bl	80017c4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d0:	f7fe fff8 	bl	80017c4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0d7      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ee      	beq.n	80027d0 <HAL_RCC_OscConfig+0x368>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe ffe6 	bl	80017c4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe ffe2 	bl	80017c4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0c1      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002812:	4b40      	ldr	r3, [pc, #256]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1ee      	bne.n	80027fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d105      	bne.n	8002830 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002824:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	4a3a      	ldr	r2, [pc, #232]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 800282a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80ad 	beq.w	8002994 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283a:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b08      	cmp	r3, #8
 8002844:	d060      	beq.n	8002908 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d145      	bne.n	80028da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b33      	ldr	r3, [pc, #204]	@ (800291c <HAL_RCC_OscConfig+0x4b4>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe ffb6 	bl	80017c4 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe ffb2 	bl	80017c4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e093      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b29      	ldr	r3, [pc, #164]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69da      	ldr	r2, [r3, #28]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	041b      	lsls	r3, r3, #16
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a4:	071b      	lsls	r3, r3, #28
 80028a6:	491b      	ldr	r1, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <HAL_RCC_OscConfig+0x4b4>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe ff87 	bl	80017c4 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ba:	f7fe ff83 	bl	80017c4 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e064      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x452>
 80028d8:	e05c      	b.n	8002994 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_RCC_OscConfig+0x4b4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe ff70 	bl	80017c4 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe ff6c 	bl	80017c4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e04d      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x480>
 8002906:	e045      	b.n	8002994 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e040      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000
 800291c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002920:	4b1f      	ldr	r3, [pc, #124]	@ (80029a0 <HAL_RCC_OscConfig+0x538>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d030      	beq.n	8002990 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d129      	bne.n	8002990 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d122      	bne.n	8002990 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002958:	4293      	cmp	r3, r2
 800295a:	d119      	bne.n	8002990 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	3b01      	subs	r3, #1
 800296a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d10f      	bne.n	8002990 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d107      	bne.n	8002990 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07b      	b.n	8002aae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029c6:	d009      	beq.n	80029dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
 80029ce:	e005      	b.n	80029dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fd56 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a60:	ea42 0103 	orr.w	r1, r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0104 	and.w	r1, r3, #4
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	f003 0210 	and.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac6:	f7fe fe7d 	bl	80017c4 <HAL_GetTick>
 8002aca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d001      	beq.n	8002ae0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e12a      	b.n	8002d36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_SPI_Transmit+0x36>
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e122      	b.n	8002d36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_Transmit+0x48>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e11b      	b.n	8002d36 <HAL_SPI_Transmit+0x280>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	88fa      	ldrh	r2, [r7, #6]
 8002b24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b4c:	d10f      	bne.n	8002b6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b78:	2b40      	cmp	r3, #64	@ 0x40
 8002b7a:	d007      	beq.n	8002b8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b94:	d152      	bne.n	8002c3c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_Transmit+0xee>
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d145      	bne.n	8002c30 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	1c9a      	adds	r2, r3, #2
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bc8:	e032      	b.n	8002c30 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d112      	bne.n	8002bfe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002bfc:	e018      	b.n	8002c30 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bfe:	f7fe fde1 	bl	80017c4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d803      	bhi.n	8002c16 <HAL_SPI_Transmit+0x160>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d102      	bne.n	8002c1c <HAL_SPI_Transmit+0x166>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d109      	bne.n	8002c30 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e082      	b.n	8002d36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1c7      	bne.n	8002bca <HAL_SPI_Transmit+0x114>
 8002c3a:	e053      	b.n	8002ce4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_Transmit+0x194>
 8002c44:	8b7b      	ldrh	r3, [r7, #26]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d147      	bne.n	8002cda <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c70:	e033      	b.n	8002cda <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d113      	bne.n	8002ca8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ca6:	e018      	b.n	8002cda <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca8:	f7fe fd8c 	bl	80017c4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d803      	bhi.n	8002cc0 <HAL_SPI_Transmit+0x20a>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d102      	bne.n	8002cc6 <HAL_SPI_Transmit+0x210>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e02d      	b.n	8002d36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1c6      	bne.n	8002c72 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fa59 	bl	80031a0 <SPI_EndRxTxTransaction>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b08a      	sub	sp, #40	@ 0x28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d50:	f7fe fd38 	bl	80017c4 <HAL_GetTick>
 8002d54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d00c      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x4a>
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d74:	d106      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d102      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x46>
 8002d7e:	7ffb      	ldrb	r3, [r7, #31]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d001      	beq.n	8002d88 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
 8002d86:	e17f      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x5c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_TransmitReceive+0x5c>
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e174      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x6e>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e16d      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d003      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	887a      	ldrh	r2, [r7, #2]
 8002dde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	887a      	ldrh	r2, [r7, #2]
 8002dea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e08:	2b40      	cmp	r3, #64	@ 0x40
 8002e0a:	d007      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e24:	d17e      	bne.n	8002f24 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_TransmitReceive+0xf6>
 8002e2e:	8afb      	ldrh	r3, [r7, #22]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d16c      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e58:	e059      	b.n	8002f0e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d11b      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x162>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x162>
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d113      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d119      	bne.n	8002ee2 <HAL_SPI_TransmitReceive+0x1a4>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d014      	beq.n	8002ee2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	1c9a      	adds	r2, r3, #2
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ee2:	f7fe fc6f 	bl	80017c4 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d80d      	bhi.n	8002f0e <HAL_SPI_TransmitReceive+0x1d0>
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d009      	beq.n	8002f0e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0bc      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1a0      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x11c>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d19b      	bne.n	8002e5a <HAL_SPI_TransmitReceive+0x11c>
 8002f22:	e082      	b.n	800302a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_SPI_TransmitReceive+0x1f4>
 8002f2c:	8afb      	ldrh	r3, [r7, #22]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d171      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f58:	e05d      	b.n	8003016 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d11c      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x264>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d017      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x264>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d114      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d119      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x2a6>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d014      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fe4:	f7fe fbee 	bl	80017c4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d803      	bhi.n	8002ffc <HAL_SPI_TransmitReceive+0x2be>
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d102      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x2c4>
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e038      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d19c      	bne.n	8002f5a <HAL_SPI_TransmitReceive+0x21c>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d197      	bne.n	8002f5a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8b6 	bl	80031a0 <SPI_EndRxTxTransaction>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01d      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003086:	2300      	movs	r3, #0
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3728      	adds	r7, #40	@ 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030a0:	f7fe fb90 	bl	80017c4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030b0:	f7fe fb88 	bl	80017c4 <HAL_GetTick>
 80030b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030b6:	4b39      	ldr	r3, [pc, #228]	@ (800319c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	0d1b      	lsrs	r3, r3, #20
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
 80030c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c6:	e054      	b.n	8003172 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d050      	beq.n	8003172 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030d0:	f7fe fb78 	bl	80017c4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d902      	bls.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d13d      	bne.n	8003162 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030fe:	d111      	bne.n	8003124 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003108:	d004      	beq.n	8003114 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003112:	d107      	bne.n	8003124 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800312c:	d10f      	bne.n	800314e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800314c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e017      	b.n	8003192 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3b01      	subs	r3, #1
 8003170:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	429a      	cmp	r2, r3
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	429a      	cmp	r2, r3
 800318e:	d19b      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000004 	.word	0x20000004

080031a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2201      	movs	r2, #1
 80031b4:	2102      	movs	r1, #2
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff ff6a 	bl	8003090 <SPI_WaitFlagStateUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e032      	b.n	8003238 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <SPI_EndRxTxTransaction+0xa0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <SPI_EndRxTxTransaction+0xa4>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	0d5b      	lsrs	r3, r3, #21
 80031de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031f0:	d112      	bne.n	8003218 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2180      	movs	r1, #128	@ 0x80
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff ff47 	bl	8003090 <SPI_WaitFlagStateUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d016      	beq.n	8003236 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e00f      	b.n	8003238 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	3b01      	subs	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d0f2      	beq.n	8003218 <SPI_EndRxTxTransaction+0x78>
 8003232:	e000      	b.n	8003236 <SPI_EndRxTxTransaction+0x96>
        break;
 8003234:	bf00      	nop
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000004 	.word	0x20000004
 8003244:	165e9f81 	.word	0x165e9f81

08003248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e042      	b.n	80032e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe f962 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	@ 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800328a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fdbd 	bl	8003e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	@ 0x28
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b20      	cmp	r3, #32
 8003306:	d175      	bne.n	80033f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_UART_Transmit+0x2c>
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e06e      	b.n	80033f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2221      	movs	r2, #33	@ 0x21
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003326:	f7fe fa4d 	bl	80017c4 <HAL_GetTick>
 800332a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003340:	d108      	bne.n	8003354 <HAL_UART_Transmit+0x6c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e003      	b.n	800335c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800335c:	e02e      	b.n	80033bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2180      	movs	r1, #128	@ 0x80
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fb1f 	bl	80039ac <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e03a      	b.n	80033f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3302      	adds	r3, #2
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e007      	b.n	80033ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	781a      	ldrb	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1cb      	bne.n	800335e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2140      	movs	r1, #64	@ 0x40
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 faeb 	bl	80039ac <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e006      	b.n	80033f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	4613      	mov	r3, r2
 800340a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b20      	cmp	r3, #32
 8003416:	d112      	bne.n	800343e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Receive_IT+0x26>
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e00b      	b.n	8003440 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	461a      	mov	r2, r3
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fb12 	bl	8003a5e <UART_Start_Receive_IT>
 800343a:	4603      	mov	r3, r0
 800343c:	e000      	b.n	8003440 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0ba      	sub	sp, #232	@ 0xe8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_UART_IRQHandler+0x66>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fbf2 	bl	8003c90 <UART_Receive_IT>
      return;
 80034ac:	e25b      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80de 	beq.w	8003674 <HAL_UART_IRQHandler+0x22c>
 80034b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80d1 	beq.w	8003674 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_UART_IRQHandler+0xae>
 80034de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00b      	beq.n	800351a <HAL_UART_IRQHandler+0xd2>
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f043 0202 	orr.w	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800351a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_UART_IRQHandler+0xf6>
 8003526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	f043 0204 	orr.w	r2, r3, #4
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d011      	beq.n	800356e <HAL_UART_IRQHandler+0x126>
 800354a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	f043 0208 	orr.w	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 81f2 	beq.w	800395c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x14e>
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fb7d 	bl	8003c90 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <HAL_UART_IRQHandler+0x17a>
 80035ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d04f      	beq.n	8003662 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa85 	bl	8003ad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b40      	cmp	r3, #64	@ 0x40
 80035d4:	d141      	bne.n	800365a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3314      	adds	r3, #20
 80035dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003602:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800360e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800361a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1d9      	bne.n	80035d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362e:	4a7e      	ldr	r2, [pc, #504]	@ (8003828 <HAL_UART_IRQHandler+0x3e0>)
 8003630:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fa82 	bl	8001b40 <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800364c:	4610      	mov	r0, r2
 800364e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	e00e      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f994 	bl	8003980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	e00a      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f990 	bl	8003980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003660:	e006      	b.n	8003670 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f98c 	bl	8003980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800366e:	e175      	b.n	800395c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	bf00      	nop
    return;
 8003672:	e173      	b.n	800395c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 814f 	bne.w	800391c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8148 	beq.w	800391c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8141 	beq.w	800391c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ba:	2b40      	cmp	r3, #64	@ 0x40
 80036bc:	f040 80b6 	bne.w	800382c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8145 	beq.w	8003960 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036de:	429a      	cmp	r2, r3
 80036e0:	f080 813e 	bcs.w	8003960 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036f6:	f000 8088 	beq.w	800380a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	330c      	adds	r3, #12
 8003700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003726:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800372a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003732:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800373e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1d9      	bne.n	80036fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3314      	adds	r3, #20
 800374c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800376a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800376e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800377c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e1      	bne.n	8003746 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e3      	bne.n	8003782 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037da:	f023 0310 	bic.w	r3, r3, #16
 80037de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e3      	bne.n	80037c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe f92b 	bl	8001a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4619      	mov	r1, r3
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8b7 	bl	8003994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003826:	e09b      	b.n	8003960 <HAL_UART_IRQHandler+0x518>
 8003828:	08003b99 	.word	0x08003b99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003834:	b29b      	uxth	r3, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 808e 	beq.w	8003964 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8089 	beq.w	8003964 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003868:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003876:	647a      	str	r2, [r7, #68]	@ 0x44
 8003878:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800387c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e3      	bne.n	8003852 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	623b      	str	r3, [r7, #32]
   return(result);
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3314      	adds	r3, #20
 80038aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e3      	bne.n	800388a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038f4:	61fa      	str	r2, [r7, #28]
 80038f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	617b      	str	r3, [r7, #20]
   return(result);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e3      	bne.n	80038d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800390e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f83d 	bl	8003994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800391a:	e023      	b.n	8003964 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800391c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_UART_IRQHandler+0x4f4>
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800392c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f943 	bl	8003bc0 <UART_Transmit_IT>
    return;
 800393a:	e014      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <HAL_UART_IRQHandler+0x51e>
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800394c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f983 	bl	8003c60 <UART_EndTransmit_IT>
    return;
 800395a:	e004      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
    return;
 800395c:	bf00      	nop
 800395e:	e002      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
      return;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <HAL_UART_IRQHandler+0x51e>
      return;
 8003964:	bf00      	nop
  }
}
 8003966:	37e8      	adds	r7, #232	@ 0xe8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039bc:	e03b      	b.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d037      	beq.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fd fefd 	bl	80017c4 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <UART_WaitOnFlagUntilTimeout+0x30>
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e03a      	b.n	8003a56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d023      	beq.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b80      	cmp	r3, #128	@ 0x80
 80039f2:	d020      	beq.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b40      	cmp	r3, #64	@ 0x40
 80039f8:	d01d      	beq.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d116      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f857 	bl	8003ad2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2208      	movs	r2, #8
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00f      	b.n	8003a56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d0b4      	beq.n	80039be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2222      	movs	r2, #34	@ 0x22
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b095      	sub	sp, #84	@ 0x54
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003afa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e5      	bne.n	8003b0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d119      	bne.n	8003b7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f023 0310 	bic.w	r3, r3, #16
 8003b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b6a:	61ba      	str	r2, [r7, #24]
 8003b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6979      	ldr	r1, [r7, #20]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	613b      	str	r3, [r7, #16]
   return(result);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e5      	bne.n	8003b4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b8c:	bf00      	nop
 8003b8e:	3754      	adds	r7, #84	@ 0x54
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff fee4 	bl	8003980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b21      	cmp	r3, #33	@ 0x21
 8003bd2:	d13e      	bne.n	8003c52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bdc:	d114      	bne.n	8003c08 <UART_Transmit_IT+0x48>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d110      	bne.n	8003c08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	1c9a      	adds	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]
 8003c06:	e008      	b.n	8003c1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	1c59      	adds	r1, r3, #1
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6211      	str	r1, [r2, #32]
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4619      	mov	r1, r3
 8003c28:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c76:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe73 	bl	800396c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	@ 0x30
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b22      	cmp	r3, #34	@ 0x22
 8003ca2:	f040 80ae 	bne.w	8003e02 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	d117      	bne.n	8003ce0 <UART_Receive_IT+0x50>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d113      	bne.n	8003ce0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd8:	1c9a      	adds	r2, r3, #2
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cde:	e026      	b.n	8003d2e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf2:	d007      	beq.n	8003d04 <UART_Receive_IT+0x74>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <UART_Receive_IT+0x82>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	701a      	strb	r2, [r3, #0]
 8003d10:	e008      	b.n	8003d24 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d22:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d15d      	bne.n	8003dfe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0220 	bic.w	r2, r2, #32
 8003d50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0201 	bic.w	r2, r2, #1
 8003d70:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d135      	bne.n	8003df4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dae:	623a      	str	r2, [r7, #32]
 8003db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	69f9      	ldr	r1, [r7, #28]
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d10a      	bne.n	8003de6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fdd1 	bl	8003994 <HAL_UARTEx_RxEventCallback>
 8003df2:	e002      	b.n	8003dfa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fd fa81 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e002      	b.n	8003e04 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3730      	adds	r7, #48	@ 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e10:	b0c0      	sub	sp, #256	@ 0x100
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	68d9      	ldr	r1, [r3, #12]
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	ea40 0301 	orr.w	r3, r0, r1
 8003e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e64:	f021 010c 	bic.w	r1, r1, #12
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e72:	430b      	orrs	r3, r1
 8003e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e86:	6999      	ldr	r1, [r3, #24]
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	ea40 0301 	orr.w	r3, r0, r1
 8003e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b8f      	ldr	r3, [pc, #572]	@ (80040d8 <UART_SetConfig+0x2cc>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d005      	beq.n	8003eac <UART_SetConfig+0xa0>
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80040dc <UART_SetConfig+0x2d0>)
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d104      	bne.n	8003eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7fe f91e 	bl	80020ec <HAL_RCC_GetPCLK2Freq>
 8003eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003eb4:	e003      	b.n	8003ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb6:	f7fe f905 	bl	80020c4 <HAL_RCC_GetPCLK1Freq>
 8003eba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ec8:	f040 810c 	bne.w	80040e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	1891      	adds	r1, r2, r2
 8003ee4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ee6:	415b      	adcs	r3, r3
 8003ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003eee:	4621      	mov	r1, r4
 8003ef0:	eb12 0801 	adds.w	r8, r2, r1
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	eb43 0901 	adc.w	r9, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb18 0303 	adds.w	r3, r8, r3
 8003f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	eb49 0303 	adc.w	r3, r9, r3
 8003f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	18db      	adds	r3, r3, r3
 8003f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f40:	4613      	mov	r3, r2
 8003f42:	eb42 0303 	adc.w	r3, r2, r3
 8003f46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f50:	f7fc f960 	bl	8000214 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4b61      	ldr	r3, [pc, #388]	@ (80040e0 <UART_SetConfig+0x2d4>)
 8003f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	011c      	lsls	r4, r3, #4
 8003f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	1891      	adds	r1, r2, r2
 8003f7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f7c:	415b      	adcs	r3, r3
 8003f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f84:	4641      	mov	r1, r8
 8003f86:	eb12 0a01 	adds.w	sl, r2, r1
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa4:	4692      	mov	sl, r2
 8003fa6:	469b      	mov	fp, r3
 8003fa8:	4643      	mov	r3, r8
 8003faa:	eb1a 0303 	adds.w	r3, sl, r3
 8003fae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	18db      	adds	r3, r3, r3
 8003fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	eb42 0303 	adc.w	r3, r2, r3
 8003fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fe6:	f7fc f915 	bl	8000214 <__aeabi_uldivmod>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <UART_SetConfig+0x2d4>)
 8003ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2264      	movs	r2, #100	@ 0x64
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	1acb      	subs	r3, r1, r3
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004006:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <UART_SetConfig+0x2d4>)
 8004008:	fba3 2302 	umull	r2, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004014:	441c      	add	r4, r3
 8004016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401a:	2200      	movs	r2, #0
 800401c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004020:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004030:	415b      	adcs	r3, r3
 8004032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6339      	str	r1, [r7, #48]	@ 0x30
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800406c:	464b      	mov	r3, r9
 800406e:	460a      	mov	r2, r1
 8004070:	eb42 0303 	adc.w	r3, r2, r3
 8004074:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800408c:	460b      	mov	r3, r1
 800408e:	18db      	adds	r3, r3, r3
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004092:	4613      	mov	r3, r2
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800409a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800409e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040a2:	f7fc f8b7 	bl	8000214 <__aeabi_uldivmod>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <UART_SetConfig+0x2d4>)
 80040ac:	fba3 1302 	umull	r1, r3, r3, r2
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	2164      	movs	r1, #100	@ 0x64
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	3332      	adds	r3, #50	@ 0x32
 80040be:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <UART_SetConfig+0x2d4>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	f003 0207 	and.w	r2, r3, #7
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4422      	add	r2, r4
 80040d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040d4:	e106      	b.n	80042e4 <UART_SetConfig+0x4d8>
 80040d6:	bf00      	nop
 80040d8:	40011000 	.word	0x40011000
 80040dc:	40011400 	.word	0x40011400
 80040e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040f6:	4642      	mov	r2, r8
 80040f8:	464b      	mov	r3, r9
 80040fa:	1891      	adds	r1, r2, r2
 80040fc:	6239      	str	r1, [r7, #32]
 80040fe:	415b      	adcs	r3, r3
 8004100:	627b      	str	r3, [r7, #36]	@ 0x24
 8004102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004106:	4641      	mov	r1, r8
 8004108:	1854      	adds	r4, r2, r1
 800410a:	4649      	mov	r1, r9
 800410c:	eb43 0501 	adc.w	r5, r3, r1
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	00eb      	lsls	r3, r5, #3
 800411a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800411e:	00e2      	lsls	r2, r4, #3
 8004120:	4614      	mov	r4, r2
 8004122:	461d      	mov	r5, r3
 8004124:	4643      	mov	r3, r8
 8004126:	18e3      	adds	r3, r4, r3
 8004128:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800412c:	464b      	mov	r3, r9
 800412e:	eb45 0303 	adc.w	r3, r5, r3
 8004132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004152:	4629      	mov	r1, r5
 8004154:	008b      	lsls	r3, r1, #2
 8004156:	4621      	mov	r1, r4
 8004158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800415c:	4621      	mov	r1, r4
 800415e:	008a      	lsls	r2, r1, #2
 8004160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004164:	f7fc f856 	bl	8000214 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4b60      	ldr	r3, [pc, #384]	@ (80042f0 <UART_SetConfig+0x4e4>)
 800416e:	fba3 2302 	umull	r2, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	011c      	lsls	r4, r3, #4
 8004176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004180:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	1891      	adds	r1, r2, r2
 800418e:	61b9      	str	r1, [r7, #24]
 8004190:	415b      	adcs	r3, r3
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004198:	4641      	mov	r1, r8
 800419a:	1851      	adds	r1, r2, r1
 800419c:	6139      	str	r1, [r7, #16]
 800419e:	4649      	mov	r1, r9
 80041a0:	414b      	adcs	r3, r1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b0:	4659      	mov	r1, fp
 80041b2:	00cb      	lsls	r3, r1, #3
 80041b4:	4651      	mov	r1, sl
 80041b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ba:	4651      	mov	r1, sl
 80041bc:	00ca      	lsls	r2, r1, #3
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	4642      	mov	r2, r8
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041cc:	464b      	mov	r3, r9
 80041ce:	460a      	mov	r2, r1
 80041d0:	eb42 0303 	adc.w	r3, r2, r3
 80041d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041f0:	4649      	mov	r1, r9
 80041f2:	008b      	lsls	r3, r1, #2
 80041f4:	4641      	mov	r1, r8
 80041f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fa:	4641      	mov	r1, r8
 80041fc:	008a      	lsls	r2, r1, #2
 80041fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004202:	f7fc f807 	bl	8000214 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4611      	mov	r1, r2
 800420c:	4b38      	ldr	r3, [pc, #224]	@ (80042f0 <UART_SetConfig+0x4e4>)
 800420e:	fba3 2301 	umull	r2, r3, r3, r1
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	2264      	movs	r2, #100	@ 0x64
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	1acb      	subs	r3, r1, r3
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	3332      	adds	r3, #50	@ 0x32
 8004220:	4a33      	ldr	r2, [pc, #204]	@ (80042f0 <UART_SetConfig+0x4e4>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800422c:	441c      	add	r4, r3
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	673b      	str	r3, [r7, #112]	@ 0x70
 8004236:	677a      	str	r2, [r7, #116]	@ 0x74
 8004238:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	415b      	adcs	r3, r3
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6039      	str	r1, [r7, #0]
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	607b      	str	r3, [r7, #4]
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800427e:	464b      	mov	r3, r9
 8004280:	460a      	mov	r2, r1
 8004282:	eb42 0303 	adc.w	r3, r2, r3
 8004286:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	663b      	str	r3, [r7, #96]	@ 0x60
 8004292:	667a      	str	r2, [r7, #100]	@ 0x64
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042a0:	4649      	mov	r1, r9
 80042a2:	008b      	lsls	r3, r1, #2
 80042a4:	4641      	mov	r1, r8
 80042a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042aa:	4641      	mov	r1, r8
 80042ac:	008a      	lsls	r2, r1, #2
 80042ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042b2:	f7fb ffaf 	bl	8000214 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <UART_SetConfig+0x4e4>)
 80042bc:	fba3 1302 	umull	r1, r3, r3, r2
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	2164      	movs	r1, #100	@ 0x64
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	3332      	adds	r3, #50	@ 0x32
 80042ce:	4a08      	ldr	r2, [pc, #32]	@ (80042f0 <UART_SetConfig+0x4e4>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	f003 020f 	and.w	r2, r3, #15
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4422      	add	r2, r4
 80042e2:	609a      	str	r2, [r3, #8]
}
 80042e4:	bf00      	nop
 80042e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042ea:	46bd      	mov	sp, r7
 80042ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80042f8:	4904      	ldr	r1, [pc, #16]	@ (800430c <MX_FATFS_Init+0x18>)
 80042fa:	4805      	ldr	r0, [pc, #20]	@ (8004310 <MX_FATFS_Init+0x1c>)
 80042fc:	f003 f9a0 	bl	8007640 <FATFS_LinkDriver>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	4b03      	ldr	r3, [pc, #12]	@ (8004314 <MX_FATFS_Init+0x20>)
 8004306:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20001378 	.word	0x20001378
 8004310:	20000010 	.word	0x20000010
 8004314:	20001374 	.word	0x20001374

08004318 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800431c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  //  Stat = STA_NOINIT;
  //  return Stat;
 SD_disk_initialize (pdrv);
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	4618      	mov	r0, r3
 8004336:	f7fc fa99 	bl	800086c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800433a:	bf00      	nop
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  //  Stat = STA_NOINIT;
  //  return Stat;
 SD_disk_status (pdrv);
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc fb71 	bl	8000a38 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8004356:	bf00      	nop
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
   // return RES_OK;
	SD_disk_read (pdrv,buff,sector,count);
 8004370:	7bf8      	ldrb	r0, [r7, #15]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	f7fc fb74 	bl	8000a64 <SD_disk_read>
  /* USER CODE END READ */
}
 800437c:	bf00      	nop
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	4603      	mov	r3, r0
 8004394:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	SD_disk_write (pdrv,buff, sector,count);
 8004396:	7bf8      	ldrb	r0, [r7, #15]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	f7fc fbcb 	bl	8000b38 <SD_disk_write>
  /* USER CODE END WRITE */
}
 80043a2:	bf00      	nop
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	603a      	str	r2, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
 80043b8:	460b      	mov	r3, r1
 80043ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   // DRESULT res = RES_ERROR;
  //  return res;
SD_disk_ioctl (pdrv,cmd,buff);
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	79b9      	ldrb	r1, [r7, #6]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fc fc3c 	bl	8000c40 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 80043c8:	bf00      	nop
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <disk_status+0x30>)
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	79fa      	ldrb	r2, [r7, #7]
 80043ec:	4905      	ldr	r1, [pc, #20]	@ (8004404 <disk_status+0x30>)
 80043ee:	440a      	add	r2, r1
 80043f0:	7a12      	ldrb	r2, [r2, #8]
 80043f2:	4610      	mov	r0, r2
 80043f4:	4798      	blx	r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200015a4 	.word	0x200015a4

08004408 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	4a0e      	ldr	r2, [pc, #56]	@ (8004454 <disk_initialize+0x4c>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	4a0c      	ldr	r2, [pc, #48]	@ (8004454 <disk_initialize+0x4c>)
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	79fa      	ldrb	r2, [r7, #7]
 800442e:	4909      	ldr	r1, [pc, #36]	@ (8004454 <disk_initialize+0x4c>)
 8004430:	440a      	add	r2, r1
 8004432:	7a12      	ldrb	r2, [r2, #8]
 8004434:	4610      	mov	r0, r2
 8004436:	4798      	blx	r3
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	4a03      	ldr	r2, [pc, #12]	@ (8004454 <disk_initialize+0x4c>)
 8004446:	2101      	movs	r1, #1
 8004448:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200015a4 	.word	0x200015a4

08004458 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	4a0a      	ldr	r2, [pc, #40]	@ (8004494 <disk_read+0x3c>)
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	689c      	ldr	r4, [r3, #8]
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	4a07      	ldr	r2, [pc, #28]	@ (8004494 <disk_read+0x3c>)
 8004478:	4413      	add	r3, r2
 800447a:	7a18      	ldrb	r0, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	47a0      	blx	r4
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]
  return res;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
}
 800448a:	4618      	mov	r0, r3
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd90      	pop	{r4, r7, pc}
 8004492:	bf00      	nop
 8004494:	200015a4 	.word	0x200015a4

08004498 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	4a0a      	ldr	r2, [pc, #40]	@ (80044d4 <disk_write+0x3c>)
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	68dc      	ldr	r4, [r3, #12]
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	4a07      	ldr	r2, [pc, #28]	@ (80044d4 <disk_write+0x3c>)
 80044b8:	4413      	add	r3, r2
 80044ba:	7a18      	ldrb	r0, [r3, #8]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	47a0      	blx	r4
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200015a4 	.word	0x200015a4

080044d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	603a      	str	r2, [r7, #0]
 80044e2:	71fb      	strb	r3, [r7, #7]
 80044e4:	460b      	mov	r3, r1
 80044e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	4a09      	ldr	r2, [pc, #36]	@ (8004510 <disk_ioctl+0x38>)
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	79fa      	ldrb	r2, [r7, #7]
 80044f6:	4906      	ldr	r1, [pc, #24]	@ (8004510 <disk_ioctl+0x38>)
 80044f8:	440a      	add	r2, r1
 80044fa:	7a10      	ldrb	r0, [r2, #8]
 80044fc:	79b9      	ldrb	r1, [r7, #6]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	4798      	blx	r3
 8004502:	4603      	mov	r3, r0
 8004504:	73fb      	strb	r3, [r7, #15]
  return res;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200015a4 	.word	0x200015a4

08004514 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3301      	adds	r3, #1
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004524:	89fb      	ldrh	r3, [r7, #14]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	b21a      	sxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b21b      	sxth	r3, r3
 8004530:	4313      	orrs	r3, r2
 8004532:	b21b      	sxth	r3, r3
 8004534:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004536:	89fb      	ldrh	r3, [r7, #14]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3303      	adds	r3, #3
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	3202      	adds	r2, #2
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	3201      	adds	r2, #1
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	021b      	lsls	r3, r3, #8
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
	return rv;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	887a      	ldrh	r2, [r7, #2]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	887a      	ldrh	r2, [r7, #2]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	0a1b      	lsrs	r3, r3, #8
 80045ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	1c53      	adds	r3, r2, #1
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	6179      	str	r1, [r7, #20]
 800463e:	7812      	ldrb	r2, [r2, #0]
 8004640:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3b01      	subs	r3, #1
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f1      	bne.n	8004632 <mem_cpy+0x1a>
	}
}
 800464e:	bf00      	nop
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800465a:	b480      	push	{r7}
 800465c:	b087      	sub	sp, #28
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	617a      	str	r2, [r7, #20]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3b01      	subs	r3, #1
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f3      	bne.n	800466a <mem_set+0x10>
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	371c      	adds	r7, #28
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	@ 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	61fa      	str	r2, [r7, #28]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	61ba      	str	r2, [r7, #24]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	1acb      	subs	r3, r1, r3
 80046bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <mem_cmp+0x40>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0eb      	beq.n	80046a8 <mem_cmp+0x18>

	return r;
 80046d0:	697b      	ldr	r3, [r7, #20]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3724      	adds	r7, #36	@ 0x24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80046e8:	e002      	b.n	80046f0 <chk_chr+0x12>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3301      	adds	r3, #1
 80046ee:	607b      	str	r3, [r7, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <chk_chr+0x26>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	4293      	cmp	r3, r2
 8004702:	d1f2      	bne.n	80046ea <chk_chr+0xc>
	return *str;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	e029      	b.n	800477c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004728:	4a27      	ldr	r2, [pc, #156]	@ (80047c8 <chk_lock+0xb4>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	4413      	add	r3, r2
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01d      	beq.n	8004772 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004736:	4a24      	ldr	r2, [pc, #144]	@ (80047c8 <chk_lock+0xb4>)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	4413      	add	r3, r2
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d116      	bne.n	8004776 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004748:	4a1f      	ldr	r2, [pc, #124]	@ (80047c8 <chk_lock+0xb4>)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	4413      	add	r3, r2
 8004750:	3304      	adds	r3, #4
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004758:	429a      	cmp	r2, r3
 800475a:	d10c      	bne.n	8004776 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800475c:	4a1a      	ldr	r2, [pc, #104]	@ (80047c8 <chk_lock+0xb4>)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	4413      	add	r3, r2
 8004764:	3308      	adds	r3, #8
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800476c:	429a      	cmp	r2, r3
 800476e:	d102      	bne.n	8004776 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004770:	e007      	b.n	8004782 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d9d2      	bls.n	8004728 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d109      	bne.n	800479c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <chk_lock+0x80>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d101      	bne.n	8004798 <chk_lock+0x84>
 8004794:	2300      	movs	r3, #0
 8004796:	e010      	b.n	80047ba <chk_lock+0xa6>
 8004798:	2312      	movs	r3, #18
 800479a:	e00e      	b.n	80047ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d108      	bne.n	80047b4 <chk_lock+0xa0>
 80047a2:	4a09      	ldr	r2, [pc, #36]	@ (80047c8 <chk_lock+0xb4>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	4413      	add	r3, r2
 80047aa:	330c      	adds	r3, #12
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b2:	d101      	bne.n	80047b8 <chk_lock+0xa4>
 80047b4:	2310      	movs	r3, #16
 80047b6:	e000      	b.n	80047ba <chk_lock+0xa6>
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20001384 	.word	0x20001384

080047cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	e002      	b.n	80047de <enq_lock+0x12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3301      	adds	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d806      	bhi.n	80047f2 <enq_lock+0x26>
 80047e4:	4a09      	ldr	r2, [pc, #36]	@ (800480c <enq_lock+0x40>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	4413      	add	r3, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f2      	bne.n	80047d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20001384 	.word	0x20001384

08004810 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e01f      	b.n	8004860 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004820:	4a41      	ldr	r2, [pc, #260]	@ (8004928 <inc_lock+0x118>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	4413      	add	r3, r2
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d113      	bne.n	800485a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004832:	4a3d      	ldr	r2, [pc, #244]	@ (8004928 <inc_lock+0x118>)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	4413      	add	r3, r2
 800483a:	3304      	adds	r3, #4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004842:	429a      	cmp	r2, r3
 8004844:	d109      	bne.n	800485a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004846:	4a38      	ldr	r2, [pc, #224]	@ (8004928 <inc_lock+0x118>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	4413      	add	r3, r2
 800484e:	3308      	adds	r3, #8
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004856:	429a      	cmp	r2, r3
 8004858:	d006      	beq.n	8004868 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3301      	adds	r3, #1
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d9dc      	bls.n	8004820 <inc_lock+0x10>
 8004866:	e000      	b.n	800486a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004868:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d132      	bne.n	80048d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e002      	b.n	800487c <inc_lock+0x6c>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d806      	bhi.n	8004890 <inc_lock+0x80>
 8004882:	4a29      	ldr	r2, [pc, #164]	@ (8004928 <inc_lock+0x118>)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4413      	add	r3, r2
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f2      	bne.n	8004876 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d101      	bne.n	800489a <inc_lock+0x8a>
 8004896:	2300      	movs	r3, #0
 8004898:	e040      	b.n	800491c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4922      	ldr	r1, [pc, #136]	@ (8004928 <inc_lock+0x118>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	440b      	add	r3, r1
 80048a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	491e      	ldr	r1, [pc, #120]	@ (8004928 <inc_lock+0x118>)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	440b      	add	r3, r1
 80048b4:	3304      	adds	r3, #4
 80048b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	491a      	ldr	r1, [pc, #104]	@ (8004928 <inc_lock+0x118>)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	440b      	add	r3, r1
 80048c4:	3308      	adds	r3, #8
 80048c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <inc_lock+0x118>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	4413      	add	r3, r2
 80048d0:	330c      	adds	r3, #12
 80048d2:	2200      	movs	r2, #0
 80048d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <inc_lock+0xe0>
 80048dc:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <inc_lock+0x118>)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	4413      	add	r3, r2
 80048e4:	330c      	adds	r3, #12
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <inc_lock+0xe0>
 80048ec:	2300      	movs	r3, #0
 80048ee:	e015      	b.n	800491c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d108      	bne.n	8004908 <inc_lock+0xf8>
 80048f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004928 <inc_lock+0x118>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	4413      	add	r3, r2
 80048fe:	330c      	adds	r3, #12
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	e001      	b.n	800490c <inc_lock+0xfc>
 8004908:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800490c:	4906      	ldr	r1, [pc, #24]	@ (8004928 <inc_lock+0x118>)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	440b      	add	r3, r1
 8004914:	330c      	adds	r3, #12
 8004916:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	20001384 	.word	0x20001384

0800492c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3b01      	subs	r3, #1
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d825      	bhi.n	800498c <dec_lock+0x60>
		n = Files[i].ctr;
 8004940:	4a17      	ldr	r2, [pc, #92]	@ (80049a0 <dec_lock+0x74>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	4413      	add	r3, r2
 8004948:	330c      	adds	r3, #12
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800494e:	89fb      	ldrh	r3, [r7, #14]
 8004950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004954:	d101      	bne.n	800495a <dec_lock+0x2e>
 8004956:	2300      	movs	r3, #0
 8004958:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800495a:	89fb      	ldrh	r3, [r7, #14]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <dec_lock+0x3a>
 8004960:	89fb      	ldrh	r3, [r7, #14]
 8004962:	3b01      	subs	r3, #1
 8004964:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004966:	4a0e      	ldr	r2, [pc, #56]	@ (80049a0 <dec_lock+0x74>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	4413      	add	r3, r2
 800496e:	330c      	adds	r3, #12
 8004970:	89fa      	ldrh	r2, [r7, #14]
 8004972:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d105      	bne.n	8004986 <dec_lock+0x5a>
 800497a:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <dec_lock+0x74>)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	4413      	add	r3, r2
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	737b      	strb	r3, [r7, #13]
 800498a:	e001      	b.n	8004990 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800498c:	2302      	movs	r3, #2
 800498e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004990:	7b7b      	ldrb	r3, [r7, #13]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20001384 	.word	0x20001384

080049a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e010      	b.n	80049d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049b2:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <clear_lock+0x44>)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4413      	add	r3, r2
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d105      	bne.n	80049ce <clear_lock+0x2a>
 80049c2:	4a09      	ldr	r2, [pc, #36]	@ (80049e8 <clear_lock+0x44>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d9eb      	bls.n	80049b2 <clear_lock+0xe>
	}
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	20001384 	.word	0x20001384

080049ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	78db      	ldrb	r3, [r3, #3]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d034      	beq.n	8004a6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7858      	ldrb	r0, [r3, #1]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a10:	2301      	movs	r3, #1
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	f7ff fd40 	bl	8004498 <disk_write>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	e022      	b.n	8004a6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d217      	bcs.n	8004a6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	789b      	ldrb	r3, [r3, #2]
 8004a3e:	613b      	str	r3, [r7, #16]
 8004a40:	e010      	b.n	8004a64 <sync_window+0x78>
					wsect += fs->fsize;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4413      	add	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7858      	ldrb	r0, [r3, #1]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004a56:	2301      	movs	r3, #1
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	f7ff fd1d 	bl	8004498 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d8eb      	bhi.n	8004a42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d01b      	beq.n	8004ac4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ffad 	bl	80049ec <sync_window>
 8004a92:	4603      	mov	r3, r0
 8004a94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d113      	bne.n	8004ac4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7858      	ldrb	r0, [r3, #1]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	f7ff fcd5 	bl	8004458 <disk_read>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff87 	bl	80049ec <sync_window>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d159      	bne.n	8004b9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d149      	bne.n	8004b84 <sync_fs+0xb4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	791b      	ldrb	r3, [r3, #4]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d145      	bne.n	8004b84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	899b      	ldrh	r3, [r3, #12]
 8004b02:	461a      	mov	r2, r3
 8004b04:	2100      	movs	r1, #0
 8004b06:	f7ff fda8 	bl	800465a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3338      	adds	r3, #56	@ 0x38
 8004b0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004b12:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fd37 	bl	800458a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3338      	adds	r3, #56	@ 0x38
 8004b20:	4921      	ldr	r1, [pc, #132]	@ (8004ba8 <sync_fs+0xd8>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fd4c 	bl	80045c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3338      	adds	r3, #56	@ 0x38
 8004b2c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004b30:	491e      	ldr	r1, [pc, #120]	@ (8004bac <sync_fs+0xdc>)
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fd44 	bl	80045c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3338      	adds	r3, #56	@ 0x38
 8004b3c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7ff fd3a 	bl	80045c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3338      	adds	r3, #56	@ 0x38
 8004b50:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f7ff fd30 	bl	80045c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7858      	ldrb	r0, [r3, #1]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f7ff fc8d 	bl	8004498 <disk_write>
			fs->fsi_flag = 0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff fca3 	bl	80044d8 <disk_ioctl>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <sync_fs+0xcc>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	41615252 	.word	0x41615252
 8004bac:	61417272 	.word	0x61417272

08004bb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	3b02      	subs	r3, #2
 8004bbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	3b02      	subs	r3, #2
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d301      	bcc.n	8004bd0 <clust2sect+0x20>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	e008      	b.n	8004be2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	895b      	ldrh	r3, [r3, #10]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	fb03 f202 	mul.w	r2, r3, r2
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be0:	4413      	add	r3, r2
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d904      	bls.n	8004c0e <get_fat+0x20>
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e0ba      	b.n	8004d8a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295
 8004c18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b03      	cmp	r3, #3
 8004c20:	f000 8082 	beq.w	8004d28 <get_fat+0x13a>
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	f300 80a6 	bgt.w	8004d76 <get_fat+0x188>
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <get_fat+0x46>
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d055      	beq.n	8004cde <get_fat+0xf0>
 8004c32:	e0a0      	b.n	8004d76 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	899b      	ldrh	r3, [r3, #12]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c52:	4413      	add	r3, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	6938      	ldr	r0, [r7, #16]
 8004c58:	f7ff ff0c 	bl	8004a74 <move_window>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 808c 	bne.w	8004d7c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	60fa      	str	r2, [r7, #12]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	8992      	ldrh	r2, [r2, #12]
 8004c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c72:	fb01 f202 	mul.w	r2, r1, r2
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	899b      	ldrh	r3, [r3, #12]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c92:	4413      	add	r3, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	6938      	ldr	r0, [r7, #16]
 8004c98:	f7ff feec 	bl	8004a74 <move_window>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d16e      	bne.n	8004d80 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	899b      	ldrh	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cae:	fb01 f202 	mul.w	r2, r1, r2
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <get_fat+0xe6>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	e002      	b.n	8004cda <get_fat+0xec>
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	617b      	str	r3, [r7, #20]
			break;
 8004cdc:	e055      	b.n	8004d8a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	899b      	ldrh	r3, [r3, #12]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	4619      	mov	r1, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cf2:	4413      	add	r3, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6938      	ldr	r0, [r7, #16]
 8004cf8:	f7ff febc 	bl	8004a74 <move_window>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d140      	bne.n	8004d84 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	8992      	ldrh	r2, [r2, #12]
 8004d10:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d14:	fb00 f202 	mul.w	r2, r0, r2
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fbf9 	bl	8004514 <ld_word>
 8004d22:	4603      	mov	r3, r0
 8004d24:	617b      	str	r3, [r7, #20]
			break;
 8004d26:	e030      	b.n	8004d8a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	899b      	ldrh	r3, [r3, #12]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	4619      	mov	r1, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d3c:	4413      	add	r3, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6938      	ldr	r0, [r7, #16]
 8004d42:	f7ff fe97 	bl	8004a74 <move_window>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11d      	bne.n	8004d88 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	8992      	ldrh	r2, [r2, #12]
 8004d5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d5e:	fb00 f202 	mul.w	r2, r0, r2
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	440b      	add	r3, r1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fbec 	bl	8004544 <ld_dword>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d72:	617b      	str	r3, [r7, #20]
			break;
 8004d74:	e009      	b.n	8004d8a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004d76:	2301      	movs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e006      	b.n	8004d8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d88:	bf00      	nop
		}
	}

	return val;
 8004d8a:	697b      	ldr	r3, [r7, #20]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b089      	sub	sp, #36	@ 0x24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004da0:	2302      	movs	r3, #2
 8004da2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f240 8109 	bls.w	8004fbe <put_fat+0x22a>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	f080 8103 	bcs.w	8004fbe <put_fat+0x22a>
		switch (fs->fs_type) {
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	f000 80b6 	beq.w	8004f2e <put_fat+0x19a>
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	f300 80fb 	bgt.w	8004fbe <put_fat+0x22a>
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d003      	beq.n	8004dd4 <put_fat+0x40>
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f000 8083 	beq.w	8004ed8 <put_fat+0x144>
 8004dd2:	e0f4      	b.n	8004fbe <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4413      	add	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	899b      	ldrh	r3, [r3, #12]
 8004dea:	4619      	mov	r1, r3
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df2:	4413      	add	r3, r2
 8004df4:	4619      	mov	r1, r3
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff fe3c 	bl	8004a74 <move_window>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e00:	7ffb      	ldrb	r3, [r7, #31]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f040 80d4 	bne.w	8004fb0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	61ba      	str	r2, [r7, #24]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	8992      	ldrh	r2, [r2, #12]
 8004e18:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e1c:	fb00 f202 	mul.w	r2, r0, r2
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	440b      	add	r3, r1
 8004e24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <put_fat+0xb8>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	b25a      	sxtb	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	4313      	orrs	r3, r2
 8004e46:	b25b      	sxtb	r3, r3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	e001      	b.n	8004e50 <put_fat+0xbc>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	899b      	ldrh	r3, [r3, #12]
 8004e62:	4619      	mov	r1, r3
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff fe00 	bl	8004a74 <move_window>
 8004e74:	4603      	mov	r3, r0
 8004e76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e78:	7ffb      	ldrb	r3, [r7, #31]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 809a 	bne.w	8004fb4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	899b      	ldrh	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e92:	fb00 f202 	mul.w	r2, r0, r2
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	440b      	add	r3, r1
 8004e9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <put_fat+0x11a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	091b      	lsrs	r3, r3, #4
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	e00e      	b.n	8004ecc <put_fat+0x138>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b25b      	sxtb	r3, r3
 8004eb4:	f023 030f 	bic.w	r3, r3, #15
 8004eb8:	b25a      	sxtb	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	b25b      	sxtb	r3, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	70da      	strb	r2, [r3, #3]
			break;
 8004ed6:	e072      	b.n	8004fbe <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	899b      	ldrh	r3, [r3, #12]
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eec:	4413      	add	r3, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fdbf 	bl	8004a74 <move_window>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d15b      	bne.n	8004fb8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	8992      	ldrh	r2, [r2, #12]
 8004f0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f12:	fb00 f202 	mul.w	r2, r0, r2
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	440b      	add	r3, r1
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	4611      	mov	r1, r2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff fb32 	bl	800458a <st_word>
			fs->wflag = 1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	70da      	strb	r2, [r3, #3]
			break;
 8004f2c:	e047      	b.n	8004fbe <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	899b      	ldrh	r3, [r3, #12]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f42:	4413      	add	r3, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff fd94 	bl	8004a74 <move_window>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f50:	7ffb      	ldrb	r3, [r7, #31]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d132      	bne.n	8004fbc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	8992      	ldrh	r2, [r2, #12]
 8004f6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f6e:	fb00 f202 	mul.w	r2, r0, r2
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	440b      	add	r3, r1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fae4 	bl	8004544 <ld_dword>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f82:	4323      	orrs	r3, r4
 8004f84:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	8992      	ldrh	r2, [r2, #12]
 8004f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f98:	fb00 f202 	mul.w	r2, r0, r2
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fb0c 	bl	80045c0 <st_dword>
			fs->wflag = 1;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	70da      	strb	r2, [r3, #3]
			break;
 8004fae:	e006      	b.n	8004fbe <put_fat+0x22a>
			if (res != FR_OK) break;
 8004fb0:	bf00      	nop
 8004fb2:	e004      	b.n	8004fbe <put_fat+0x22a>
			if (res != FR_OK) break;
 8004fb4:	bf00      	nop
 8004fb6:	e002      	b.n	8004fbe <put_fat+0x22a>
			if (res != FR_OK) break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <put_fat+0x22a>
			if (res != FR_OK) break;
 8004fbc:	bf00      	nop
		}
	}
	return res;
 8004fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3724      	adds	r7, #36	@ 0x24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd90      	pop	{r4, r7, pc}

08004fc8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d904      	bls.n	8004fee <remove_chain+0x26>
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d301      	bcc.n	8004ff2 <remove_chain+0x2a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e04b      	b.n	800508a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	69b8      	ldr	r0, [r7, #24]
 8005000:	f7ff fec8 	bl	8004d94 <put_fat>
 8005004:	4603      	mov	r3, r0
 8005006:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <remove_chain+0x4a>
 800500e:	7ffb      	ldrb	r3, [r7, #31]
 8005010:	e03b      	b.n	800508a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff fdea 	bl	8004bee <get_fat>
 800501a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d031      	beq.n	8005086 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <remove_chain+0x64>
 8005028:	2302      	movs	r3, #2
 800502a:	e02e      	b.n	800508a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d101      	bne.n	8005038 <remove_chain+0x70>
 8005034:	2301      	movs	r3, #1
 8005036:	e028      	b.n	800508a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005038:	2200      	movs	r2, #0
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	69b8      	ldr	r0, [r7, #24]
 800503e:	f7ff fea9 	bl	8004d94 <put_fat>
 8005042:	4603      	mov	r3, r0
 8005044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005046:	7ffb      	ldrb	r3, [r7, #31]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <remove_chain+0x88>
 800504c:	7ffb      	ldrb	r3, [r7, #31]
 800504e:	e01c      	b.n	800508a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	3b02      	subs	r3, #2
 800505a:	429a      	cmp	r2, r3
 800505c:	d20b      	bcs.n	8005076 <remove_chain+0xae>
			fs->free_clst++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	791b      	ldrb	r3, [r3, #4]
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	b2da      	uxtb	r2, r3
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d3c6      	bcc.n	8005012 <remove_chain+0x4a>
 8005084:	e000      	b.n	8005088 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005086:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b088      	sub	sp, #32
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d004      	beq.n	80050be <create_chain+0x2c>
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d31b      	bcc.n	80050f6 <create_chain+0x64>
 80050be:	2301      	movs	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e018      	b.n	80050f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80050c4:	6839      	ldr	r1, [r7, #0]
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fd91 	bl	8004bee <get_fat>
 80050cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d801      	bhi.n	80050d8 <create_chain+0x46>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e070      	b.n	80051ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d101      	bne.n	80050e4 <create_chain+0x52>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	e06a      	b.n	80051ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d201      	bcs.n	80050f2 <create_chain+0x60>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	e063      	b.n	80051ba <create_chain+0x128>
		scl = clst;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	429a      	cmp	r2, r3
 8005108:	d307      	bcc.n	800511a <create_chain+0x88>
				ncl = 2;
 800510a:	2302      	movs	r3, #2
 800510c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	429a      	cmp	r2, r3
 8005114:	d901      	bls.n	800511a <create_chain+0x88>
 8005116:	2300      	movs	r3, #0
 8005118:	e04f      	b.n	80051ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800511a:	69f9      	ldr	r1, [r7, #28]
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fd66 	bl	8004bee <get_fat>
 8005122:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d003      	beq.n	8005138 <create_chain+0xa6>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d101      	bne.n	800513c <create_chain+0xaa>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	e03e      	b.n	80051ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	429a      	cmp	r2, r3
 8005142:	d1da      	bne.n	80050fa <create_chain+0x68>
 8005144:	2300      	movs	r3, #0
 8005146:	e038      	b.n	80051ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005148:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	69f9      	ldr	r1, [r7, #28]
 8005150:	6938      	ldr	r0, [r7, #16]
 8005152:	f7ff fe1f 	bl	8004d94 <put_fat>
 8005156:	4603      	mov	r3, r0
 8005158:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800515a:	7dfb      	ldrb	r3, [r7, #23]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d109      	bne.n	8005174 <create_chain+0xe2>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	6938      	ldr	r0, [r7, #16]
 800516c:	f7ff fe12 	bl	8004d94 <put_fat>
 8005170:	4603      	mov	r3, r0
 8005172:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d116      	bne.n	80051a8 <create_chain+0x116>
		fs->last_clst = ncl;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	3b02      	subs	r3, #2
 800518a:	429a      	cmp	r2, r3
 800518c:	d804      	bhi.n	8005198 <create_chain+0x106>
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	791b      	ldrb	r3, [r3, #4]
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	711a      	strb	r2, [r3, #4]
 80051a6:	e007      	b.n	80051b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <create_chain+0x122>
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e000      	b.n	80051b6 <create_chain+0x124>
 80051b4:	2301      	movs	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80051b8:	69fb      	ldr	r3, [r7, #28]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b087      	sub	sp, #28
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	3304      	adds	r3, #4
 80051d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	899b      	ldrh	r3, [r3, #12]
 80051de:	461a      	mov	r2, r3
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	8952      	ldrh	r2, [r2, #10]
 80051ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	613a      	str	r2, [r7, #16]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <clmt_clust+0x42>
 8005200:	2300      	movs	r3, #0
 8005202:	e010      	b.n	8005226 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d307      	bcc.n	800521c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	3304      	adds	r3, #4
 8005218:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800521a:	e7e9      	b.n	80051f0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800521c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4413      	add	r3, r2
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005248:	d204      	bcs.n	8005254 <dir_sdi+0x22>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005254:	2302      	movs	r3, #2
 8005256:	e071      	b.n	800533c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <dir_sdi+0x46>
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d902      	bls.n	8005278 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10c      	bne.n	8005298 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	8912      	ldrh	r2, [r2, #8]
 8005286:	4293      	cmp	r3, r2
 8005288:	d301      	bcc.n	800528e <dir_sdi+0x5c>
 800528a:	2302      	movs	r3, #2
 800528c:	e056      	b.n	800533c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	61da      	str	r2, [r3, #28]
 8005296:	e02d      	b.n	80052f4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	895b      	ldrh	r3, [r3, #10]
 800529c:	461a      	mov	r2, r3
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	899b      	ldrh	r3, [r3, #12]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80052a8:	e019      	b.n	80052de <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff fc9d 	bl	8004bee <get_fat>
 80052b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d101      	bne.n	80052c2 <dir_sdi+0x90>
 80052be:	2301      	movs	r3, #1
 80052c0:	e03c      	b.n	800533c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d904      	bls.n	80052d2 <dir_sdi+0xa0>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d301      	bcc.n	80052d6 <dir_sdi+0xa4>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e032      	b.n	800533c <dir_sdi+0x10a>
			ofs -= csz;
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d2e1      	bcs.n	80052aa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	6938      	ldr	r0, [r7, #16]
 80052ea:	f7ff fc61 	bl	8004bb0 <clust2sect>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <dir_sdi+0xd4>
 8005302:	2302      	movs	r3, #2
 8005304:	e01a      	b.n	800533c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	899b      	ldrh	r3, [r3, #12]
 800530e:	4619      	mov	r1, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	fbb3 f3f1 	udiv	r3, r3, r1
 8005316:	441a      	add	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	899b      	ldrh	r3, [r3, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	fbb3 f0f2 	udiv	r0, r3, r2
 800532e:	fb00 f202 	mul.w	r2, r0, r2
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	18ca      	adds	r2, r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	3320      	adds	r3, #32
 800535a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <dir_next+0x28>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800536a:	d301      	bcc.n	8005370 <dir_next+0x2c>
 800536c:	2304      	movs	r3, #4
 800536e:	e0bb      	b.n	80054e8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	899b      	ldrh	r3, [r3, #12]
 8005374:	461a      	mov	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	fbb3 f1f2 	udiv	r1, r3, r2
 800537c:	fb01 f202 	mul.w	r2, r1, r2
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	f040 809d 	bne.w	80054c2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	8912      	ldrh	r2, [r2, #8]
 80053a2:	4293      	cmp	r3, r2
 80053a4:	f0c0 808d 	bcc.w	80054c2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	61da      	str	r2, [r3, #28]
 80053ae:	2304      	movs	r3, #4
 80053b0:	e09a      	b.n	80054e8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	899b      	ldrh	r3, [r3, #12]
 80053b6:	461a      	mov	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	8952      	ldrh	r2, [r2, #10]
 80053c2:	3a01      	subs	r2, #1
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d17b      	bne.n	80054c2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7ff fc0b 	bl	8004bee <get_fat>
 80053d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d801      	bhi.n	80053e4 <dir_next+0xa0>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e081      	b.n	80054e8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d101      	bne.n	80053f0 <dir_next+0xac>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e07b      	b.n	80054e8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d359      	bcc.n	80054ae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	61da      	str	r2, [r3, #28]
 8005406:	2304      	movs	r3, #4
 8005408:	e06e      	b.n	80054e8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7ff fe3d 	bl	8005092 <create_chain>
 8005418:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <dir_next+0xe0>
 8005420:	2307      	movs	r3, #7
 8005422:	e061      	b.n	80054e8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <dir_next+0xea>
 800542a:	2302      	movs	r3, #2
 800542c:	e05c      	b.n	80054e8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d101      	bne.n	800543a <dir_next+0xf6>
 8005436:	2301      	movs	r3, #1
 8005438:	e056      	b.n	80054e8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fad6 	bl	80049ec <sync_window>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <dir_next+0x106>
 8005446:	2301      	movs	r3, #1
 8005448:	e04e      	b.n	80054e8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	899b      	ldrh	r3, [r3, #12]
 8005454:	461a      	mov	r2, r3
 8005456:	2100      	movs	r1, #0
 8005458:	f7ff f8ff 	bl	800465a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800545c:	2300      	movs	r3, #0
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	6979      	ldr	r1, [r7, #20]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fba4 	bl	8004bb0 <clust2sect>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	635a      	str	r2, [r3, #52]	@ 0x34
 800546e:	e012      	b.n	8005496 <dir_next+0x152>
						fs->wflag = 1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f7ff fab8 	bl	80049ec <sync_window>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <dir_next+0x142>
 8005482:	2301      	movs	r3, #1
 8005484:	e030      	b.n	80054e8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	635a      	str	r2, [r3, #52]	@ 0x34
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	895b      	ldrh	r3, [r3, #10]
 800549a:	461a      	mov	r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4293      	cmp	r3, r2
 80054a0:	d3e6      	bcc.n	8005470 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff fb7a 	bl	8004bb0 <clust2sect>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	899b      	ldrh	r3, [r3, #12]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80054da:	fb00 f202 	mul.w	r2, r0, r2
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	18ca      	adds	r2, r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005500:	2100      	movs	r1, #0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fe95 	bl	8005232 <dir_sdi>
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d12b      	bne.n	800556a <dir_alloc+0x7a>
		n = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	4619      	mov	r1, r3
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff faa9 	bl	8004a74 <move_window>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d11d      	bne.n	8005568 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2be5      	cmp	r3, #229	@ 0xe5
 8005534:	d004      	beq.n	8005540 <dir_alloc+0x50>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	3301      	adds	r3, #1
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d102      	bne.n	8005554 <dir_alloc+0x64>
 800554e:	e00c      	b.n	800556a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005554:	2101      	movs	r1, #1
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fef4 	bl	8005344 <dir_next>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0d7      	beq.n	8005516 <dir_alloc+0x26>
 8005566:	e000      	b.n	800556a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005568:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d101      	bne.n	8005574 <dir_alloc+0x84>
 8005570:	2307      	movs	r3, #7
 8005572:	75fb      	strb	r3, [r7, #23]
	return res;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	331a      	adds	r3, #26
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe ffc1 	bl	8004514 <ld_word>
 8005592:	4603      	mov	r3, r0
 8005594:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b03      	cmp	r3, #3
 800559c:	d109      	bne.n	80055b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	3314      	adds	r3, #20
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe ffb6 	bl	8004514 <ld_word>
 80055a8:	4603      	mov	r3, r0
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	331a      	adds	r3, #26
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	b292      	uxth	r2, r2
 80055d0:	4611      	mov	r1, r2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe ffd9 	bl	800458a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d109      	bne.n	80055f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f103 0214 	add.w	r2, r3, #20
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f7fe ffcb 	bl	800458a <st_word>
	}
}
 80055f4:	bf00      	nop
 80055f6:	3710      	adds	r7, #16
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80055fc:	b590      	push	{r4, r7, lr}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	331a      	adds	r3, #26
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe ff82 	bl	8004514 <ld_word>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <cmp_lfn+0x1e>
 8005616:	2300      	movs	r3, #0
 8005618:	e059      	b.n	80056ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005622:	1e5a      	subs	r2, r3, #1
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005630:	2301      	movs	r3, #1
 8005632:	81fb      	strh	r3, [r7, #14]
 8005634:	2300      	movs	r3, #0
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	e033      	b.n	80056a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800563a:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <cmp_lfn+0xdc>)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4413      	add	r3, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe ff63 	bl	8004514 <ld_word>
 800564e:	4603      	mov	r3, r0
 8005650:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005652:	89fb      	ldrh	r3, [r7, #14]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01a      	beq.n	800568e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2bfe      	cmp	r3, #254	@ 0xfe
 800565c:	d812      	bhi.n	8005684 <cmp_lfn+0x88>
 800565e:	89bb      	ldrh	r3, [r7, #12]
 8005660:	4618      	mov	r0, r3
 8005662:	f002 f839 	bl	80076d8 <ff_wtoupper>
 8005666:	4603      	mov	r3, r0
 8005668:	461c      	mov	r4, r3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	617a      	str	r2, [r7, #20]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4413      	add	r3, r2
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f002 f82d 	bl	80076d8 <ff_wtoupper>
 800567e:	4603      	mov	r3, r0
 8005680:	429c      	cmp	r4, r3
 8005682:	d001      	beq.n	8005688 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005684:	2300      	movs	r3, #0
 8005686:	e022      	b.n	80056ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8005688:	89bb      	ldrh	r3, [r7, #12]
 800568a:	81fb      	strh	r3, [r7, #14]
 800568c:	e006      	b.n	800569c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800568e:	89bb      	ldrh	r3, [r7, #12]
 8005690:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005694:	4293      	cmp	r3, r2
 8005696:	d001      	beq.n	800569c <cmp_lfn+0xa0>
 8005698:	2300      	movs	r3, #0
 800569a:	e018      	b.n	80056ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	3301      	adds	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	2b0c      	cmp	r3, #12
 80056a6:	d9c8      	bls.n	800563a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00b      	beq.n	80056cc <cmp_lfn+0xd0>
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <cmp_lfn+0xd0>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <cmp_lfn+0xd0>
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80056cc:	2301      	movs	r3, #1
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08007be4 	.word	0x08007be4

080056dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	331a      	adds	r3, #26
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe ff12 	bl	8004514 <ld_word>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <pick_lfn+0x1e>
 80056f6:	2300      	movs	r3, #0
 80056f8:	e04d      	b.n	8005796 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005702:	1e5a      	subs	r2, r3, #1
 8005704:	4613      	mov	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005710:	2301      	movs	r3, #1
 8005712:	81fb      	strh	r3, [r7, #14]
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	e028      	b.n	800576c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800571a:	4a21      	ldr	r2, [pc, #132]	@ (80057a0 <pick_lfn+0xc4>)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	4413      	add	r3, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe fef3 	bl	8004514 <ld_word>
 800572e:	4603      	mov	r3, r0
 8005730:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005732:	89fb      	ldrh	r3, [r7, #14]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00f      	beq.n	8005758 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2bfe      	cmp	r3, #254	@ 0xfe
 800573c:	d901      	bls.n	8005742 <pick_lfn+0x66>
 800573e:	2300      	movs	r3, #0
 8005740:	e029      	b.n	8005796 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005742:	89bb      	ldrh	r3, [r7, #12]
 8005744:	81fb      	strh	r3, [r7, #14]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	617a      	str	r2, [r7, #20]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	89fa      	ldrh	r2, [r7, #14]
 8005754:	801a      	strh	r2, [r3, #0]
 8005756:	e006      	b.n	8005766 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005758:	89bb      	ldrh	r3, [r7, #12]
 800575a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800575e:	4293      	cmp	r3, r2
 8005760:	d001      	beq.n	8005766 <pick_lfn+0x8a>
 8005762:	2300      	movs	r3, #0
 8005764:	e017      	b.n	8005796 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3301      	adds	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b0c      	cmp	r3, #12
 8005770:	d9d3      	bls.n	800571a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2bfe      	cmp	r3, #254	@ 0xfe
 8005782:	d901      	bls.n	8005788 <pick_lfn+0xac>
 8005784:	2300      	movs	r3, #0
 8005786:	e006      	b.n	8005796 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4413      	add	r3, r2
 8005790:	2200      	movs	r2, #0
 8005792:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005794:	2301      	movs	r3, #1
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	08007be4 	.word	0x08007be4

080057a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4611      	mov	r1, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	460b      	mov	r3, r1
 80057b4:	71fb      	strb	r3, [r7, #7]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	330d      	adds	r3, #13
 80057be:	79ba      	ldrb	r2, [r7, #6]
 80057c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	330b      	adds	r3, #11
 80057c6:	220f      	movs	r2, #15
 80057c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	330c      	adds	r3, #12
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	331a      	adds	r3, #26
 80057d6:	2100      	movs	r1, #0
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe fed6 	bl	800458a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	1e5a      	subs	r2, r3, #1
 80057e2:	4613      	mov	r3, r2
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	82fb      	strh	r3, [r7, #22]
 80057f2:	2300      	movs	r3, #0
 80057f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80057f6:	8afb      	ldrh	r3, [r7, #22]
 80057f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d007      	beq.n	8005810 <put_lfn+0x6c>
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	61fa      	str	r2, [r7, #28]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005810:	4a17      	ldr	r2, [pc, #92]	@ (8005870 <put_lfn+0xcc>)
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	4413      	add	r3, r2
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4413      	add	r3, r2
 800581e:	8afa      	ldrh	r2, [r7, #22]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe feb1 	bl	800458a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005828:	8afb      	ldrh	r3, [r7, #22]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <put_lfn+0x90>
 800582e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005832:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3301      	adds	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b0c      	cmp	r3, #12
 800583e:	d9da      	bls.n	80057f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005840:	8afb      	ldrh	r3, [r7, #22]
 8005842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005846:	4293      	cmp	r3, r2
 8005848:	d006      	beq.n	8005858 <put_lfn+0xb4>
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <put_lfn+0xbc>
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	79fa      	ldrb	r2, [r7, #7]
 8005864:	701a      	strb	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	08007be4 	.word	0x08007be4

08005874 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	@ 0x30
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005882:	220b      	movs	r2, #11
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7fe fec6 	bl	8004618 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b05      	cmp	r3, #5
 8005890:	d92b      	bls.n	80058ea <gen_numname+0x76>
		sr = seq;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005896:	e022      	b.n	80058de <gen_numname+0x6a>
			wc = *lfn++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80058a2:	2300      	movs	r3, #0
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a6:	e017      	b.n	80058d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	005a      	lsls	r2, r3, #1
 80058ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	4413      	add	r3, r2
 80058b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80058b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <gen_numname+0x5e>
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80058cc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80058d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80058d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d4:	3301      	adds	r3, #1
 80058d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d9e4      	bls.n	80058a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d8      	bne.n	8005898 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80058ea:	2307      	movs	r3, #7
 80058ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3330      	adds	r3, #48	@ 0x30
 80058fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80058fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005902:	2b39      	cmp	r3, #57	@ 0x39
 8005904:	d904      	bls.n	8005910 <gen_numname+0x9c>
 8005906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800590a:	3307      	adds	r3, #7
 800590c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005916:	3330      	adds	r3, #48	@ 0x30
 8005918:	443b      	add	r3, r7
 800591a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800591e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1df      	bne.n	80058ee <gen_numname+0x7a>
	ns[i] = '~';
 800592e:	f107 0214 	add.w	r2, r7, #20
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	4413      	add	r3, r2
 8005936:	227e      	movs	r2, #126	@ 0x7e
 8005938:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
 800593e:	e002      	b.n	8005946 <gen_numname+0xd2>
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	3301      	adds	r3, #1
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
 8005946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	429a      	cmp	r2, r3
 800594c:	d205      	bcs.n	800595a <gen_numname+0xe6>
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	4413      	add	r3, r2
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	2b20      	cmp	r3, #32
 8005958:	d1f2      	bne.n	8005940 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	2b07      	cmp	r3, #7
 800595e:	d807      	bhi.n	8005970 <gen_numname+0xfc>
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005966:	3330      	adds	r3, #48	@ 0x30
 8005968:	443b      	add	r3, r7
 800596a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800596e:	e000      	b.n	8005972 <gen_numname+0xfe>
 8005970:	2120      	movs	r1, #32
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	627a      	str	r2, [r7, #36]	@ 0x24
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	460a      	mov	r2, r1
 800597e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	2b07      	cmp	r3, #7
 8005984:	d9e9      	bls.n	800595a <gen_numname+0xe6>
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	3730      	adds	r7, #48	@ 0x30
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800599c:	230b      	movs	r3, #11
 800599e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	0852      	lsrs	r2, r2, #1
 80059a6:	01db      	lsls	r3, r3, #7
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	6079      	str	r1, [r7, #4]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	4413      	add	r3, r2
 80059b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1ed      	bne.n	80059a0 <sum_sfn+0x10>
	return sum;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b086      	sub	sp, #24
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80059dc:	2304      	movs	r3, #4
 80059de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80059e6:	23ff      	movs	r3, #255	@ 0xff
 80059e8:	757b      	strb	r3, [r7, #21]
 80059ea:	23ff      	movs	r3, #255	@ 0xff
 80059ec:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80059ee:	e081      	b.n	8005af4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	4619      	mov	r1, r3
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f7ff f83c 	bl	8004a74 <move_window>
 80059fc:	4603      	mov	r3, r0
 80059fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d17c      	bne.n	8005b00 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005a0e:	7dbb      	ldrb	r3, [r7, #22]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005a14:	2304      	movs	r3, #4
 8005a16:	75fb      	strb	r3, [r7, #23]
 8005a18:	e077      	b.n	8005b0a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	330b      	adds	r3, #11
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005a2e:	7dbb      	ldrb	r3, [r7, #22]
 8005a30:	2be5      	cmp	r3, #229	@ 0xe5
 8005a32:	d00e      	beq.n	8005a52 <dir_read+0x80>
 8005a34:	7dbb      	ldrb	r3, [r7, #22]
 8005a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a38:	d00b      	beq.n	8005a52 <dir_read+0x80>
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	f023 0320 	bic.w	r3, r3, #32
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d002      	beq.n	8005a58 <dir_read+0x86>
				ord = 0xFF;
 8005a52:	23ff      	movs	r3, #255	@ 0xff
 8005a54:	757b      	strb	r3, [r7, #21]
 8005a56:	e044      	b.n	8005ae2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d12f      	bne.n	8005abe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005a5e:	7dbb      	ldrb	r3, [r7, #22]
 8005a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	7b5b      	ldrb	r3, [r3, #13]
 8005a6e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005a70:	7dbb      	ldrb	r3, [r7, #22]
 8005a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a76:	75bb      	strb	r3, [r7, #22]
 8005a78:	7dbb      	ldrb	r3, [r7, #22]
 8005a7a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005a84:	7dba      	ldrb	r2, [r7, #22]
 8005a86:	7d7b      	ldrb	r3, [r7, #21]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d115      	bne.n	8005ab8 <dir_read+0xe6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	330d      	adds	r3, #13
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	7d3a      	ldrb	r2, [r7, #20]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d10e      	bne.n	8005ab8 <dir_read+0xe6>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7ff fe19 	bl	80056dc <pick_lfn>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <dir_read+0xe6>
 8005ab0:	7d7b      	ldrb	r3, [r7, #21]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e000      	b.n	8005aba <dir_read+0xe8>
 8005ab8:	23ff      	movs	r3, #255	@ 0xff
 8005aba:	757b      	strb	r3, [r7, #21]
 8005abc:	e011      	b.n	8005ae2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005abe:	7d7b      	ldrb	r3, [r7, #21]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <dir_read+0x106>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ff61 	bl	8005990 <sum_sfn>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	7d3b      	ldrb	r3, [r7, #20]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d015      	beq.n	8005b04 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295
 8005ade:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8005ae0:	e010      	b.n	8005b04 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fc2d 	bl	8005344 <dir_next>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <dir_read+0x136>
	while (dp->sect) {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f af79 	bne.w	80059f0 <dir_read+0x1e>
 8005afe:	e004      	b.n	8005b0a <dir_read+0x138>
		if (res != FR_OK) break;
 8005b00:	bf00      	nop
 8005b02:	e002      	b.n	8005b0a <dir_read+0x138>
					break;
 8005b04:	bf00      	nop
 8005b06:	e000      	b.n	8005b0a <dir_read+0x138>
		if (res != FR_OK) break;
 8005b08:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <dir_read+0x144>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	61da      	str	r2, [r3, #28]
	return res;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005b2e:	2100      	movs	r1, #0
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fb7e 	bl	8005232 <dir_sdi>
 8005b36:	4603      	mov	r3, r0
 8005b38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <dir_find+0x24>
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	e0a9      	b.n	8005c98 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005b44:	23ff      	movs	r3, #255	@ 0xff
 8005b46:	753b      	strb	r3, [r7, #20]
 8005b48:	7d3b      	ldrb	r3, [r7, #20]
 8005b4a:	757b      	strb	r3, [r7, #21]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f7fe ff8a 	bl	8004a74 <move_window>
 8005b60:	4603      	mov	r3, r0
 8005b62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 8090 	bne.w	8005c8c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005b74:	7dbb      	ldrb	r3, [r7, #22]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <dir_find+0x60>
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	75fb      	strb	r3, [r7, #23]
 8005b7e:	e08a      	b.n	8005c96 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	330b      	adds	r3, #11
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b8c:	73fb      	strb	r3, [r7, #15]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005b94:	7dbb      	ldrb	r3, [r7, #22]
 8005b96:	2be5      	cmp	r3, #229	@ 0xe5
 8005b98:	d007      	beq.n	8005baa <dir_find+0x8a>
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <dir_find+0x98>
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b0f      	cmp	r3, #15
 8005ba8:	d006      	beq.n	8005bb8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005baa:	23ff      	movs	r3, #255	@ 0xff
 8005bac:	757b      	strb	r3, [r7, #21]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bb6:	e05e      	b.n	8005c76 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	d136      	bne.n	8005c2c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d154      	bne.n	8005c76 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005bcc:	7dbb      	ldrb	r3, [r7, #22]
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	7b5b      	ldrb	r3, [r3, #13]
 8005bdc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005bde:	7dbb      	ldrb	r3, [r7, #22]
 8005be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be4:	75bb      	strb	r3, [r7, #22]
 8005be6:	7dbb      	ldrb	r3, [r7, #22]
 8005be8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695a      	ldr	r2, [r3, #20]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005bf2:	7dba      	ldrb	r2, [r7, #22]
 8005bf4:	7d7b      	ldrb	r3, [r7, #21]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d115      	bne.n	8005c26 <dir_find+0x106>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	330d      	adds	r3, #13
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	7d3a      	ldrb	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d10e      	bne.n	8005c26 <dir_find+0x106>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4619      	mov	r1, r3
 8005c12:	4610      	mov	r0, r2
 8005c14:	f7ff fcf2 	bl	80055fc <cmp_lfn>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <dir_find+0x106>
 8005c1e:	7d7b      	ldrb	r3, [r7, #21]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	e000      	b.n	8005c28 <dir_find+0x108>
 8005c26:	23ff      	movs	r3, #255	@ 0xff
 8005c28:	757b      	strb	r3, [r7, #21]
 8005c2a:	e024      	b.n	8005c76 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c2c:	7d7b      	ldrb	r3, [r7, #21]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <dir_find+0x126>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff feaa 	bl	8005990 <sum_sfn>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	461a      	mov	r2, r3
 8005c40:	7d3b      	ldrb	r3, [r7, #20]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d024      	beq.n	8005c90 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <dir_find+0x14a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a18      	ldr	r0, [r3, #32]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3324      	adds	r3, #36	@ 0x24
 8005c5c:	220b      	movs	r2, #11
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f7fe fd16 	bl	8004690 <mem_cmp>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c6a:	23ff      	movs	r3, #255	@ 0xff
 8005c6c:	757b      	strb	r3, [r7, #21]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005c76:	2100      	movs	r1, #0
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff fb63 	bl	8005344 <dir_next>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f43f af65 	beq.w	8005b54 <dir_find+0x34>
 8005c8a:	e004      	b.n	8005c96 <dir_find+0x176>
		if (res != FR_OK) break;
 8005c8c:	bf00      	nop
 8005c8e:	e002      	b.n	8005c96 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005c90:	bf00      	nop
 8005c92:	e000      	b.n	8005c96 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005c94:	bf00      	nop

	return res;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08c      	sub	sp, #48	@ 0x30
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005cb4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <dir_register+0x20>
 8005cbc:	2306      	movs	r3, #6
 8005cbe:	e0e0      	b.n	8005e82 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc4:	e002      	b.n	8005ccc <dir_register+0x2c>
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f4      	bne.n	8005cc6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	220c      	movs	r2, #12
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe fc95 	bl	8004618 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005cee:	7dfb      	ldrb	r3, [r7, #23]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d032      	beq.n	8005d5e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	@ 0x40
 8005cfc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005d00:	2301      	movs	r3, #1
 8005d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d04:	e016      	b.n	8005d34 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	f107 010c 	add.w	r1, r7, #12
 8005d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d16:	f7ff fdad 	bl	8005874 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff ff00 	bl	8005b20 <dir_find>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d30:	3301      	adds	r3, #1
 8005d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	2b63      	cmp	r3, #99	@ 0x63
 8005d38:	d9e5      	bls.n	8005d06 <dir_register+0x66>
 8005d3a:	e000      	b.n	8005d3e <dir_register+0x9e>
			if (res != FR_OK) break;
 8005d3c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d40:	2b64      	cmp	r3, #100	@ 0x64
 8005d42:	d101      	bne.n	8005d48 <dir_register+0xa8>
 8005d44:	2307      	movs	r3, #7
 8005d46:	e09c      	b.n	8005e82 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d002      	beq.n	8005d56 <dir_register+0xb6>
 8005d50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d54:	e095      	b.n	8005e82 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005d56:	7dfa      	ldrb	r2, [r7, #23]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <dir_register+0xd8>
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	330c      	adds	r3, #12
 8005d6c:	4a47      	ldr	r2, [pc, #284]	@ (8005e8c <dir_register+0x1ec>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	3301      	adds	r3, #1
 8005d76:	e000      	b.n	8005d7a <dir_register+0xda>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005d7c:	6a39      	ldr	r1, [r7, #32]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff fbb6 	bl	80054f0 <dir_alloc>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d148      	bne.n	8005e24 <dir_register+0x184>
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d042      	beq.n	8005e24 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	015b      	lsls	r3, r3, #5
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fa41 	bl	8005232 <dir_sdi>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005db6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d132      	bne.n	8005e24 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	3324      	adds	r3, #36	@ 0x24
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff fde4 	bl	8005990 <sum_sfn>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	69f8      	ldr	r0, [r7, #28]
 8005dd4:	f7fe fe4e 	bl	8004a74 <move_window>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005dde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11d      	bne.n	8005e22 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	6918      	ldr	r0, [r3, #16]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a19      	ldr	r1, [r3, #32]
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	7efb      	ldrb	r3, [r7, #27]
 8005df4:	f7ff fcd6 	bl	80057a4 <put_lfn>
				fs->wflag = 1;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005dfe:	2100      	movs	r1, #0
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fa9f 	bl	8005344 <dir_next>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <dir_register+0x184>
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1d5      	bne.n	8005dcc <dir_register+0x12c>
 8005e20:	e000      	b.n	8005e24 <dir_register+0x184>
				if (res != FR_OK) break;
 8005e22:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d128      	bne.n	8005e7e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4619      	mov	r1, r3
 8005e32:	69f8      	ldr	r0, [r7, #28]
 8005e34:	f7fe fe1e 	bl	8004a74 <move_window>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11b      	bne.n	8005e7e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fc03 	bl	800465a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a18      	ldr	r0, [r3, #32]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3324      	adds	r3, #36	@ 0x24
 8005e5c:	220b      	movs	r2, #11
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f7fe fbda 	bl	8004618 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	f002 0218 	and.w	r2, r2, #24
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3730      	adds	r7, #48	@ 0x30
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	4ec4ec4f 	.word	0x4ec4ec4f

08005e90 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80ca 	beq.w	8006044 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d032      	beq.n	8005f20 <get_fileinfo+0x90>
			i = j = 0;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005ec2:	e01b      	b.n	8005efc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005ec4:	89fb      	ldrh	r3, [r7, #14]
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fbc9 	bl	8007660 <ff_convert>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005ed2:	89fb      	ldrh	r3, [r7, #14]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <get_fileinfo+0x4e>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e01a      	b.n	8005f14 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ee2:	d902      	bls.n	8005eea <get_fileinfo+0x5a>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e014      	b.n	8005f14 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	61fa      	str	r2, [r7, #28]
 8005ef0:	89fa      	ldrh	r2, [r7, #14]
 8005ef2:	b2d1      	uxtb	r1, r2
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	460a      	mov	r2, r1
 8005efa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	61b9      	str	r1, [r7, #24]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	81fb      	strh	r3, [r7, #14]
 8005f0e:	89fb      	ldrh	r3, [r7, #14]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1d7      	bne.n	8005ec4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	3316      	adds	r3, #22
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3316      	adds	r3, #22
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8005f34:	e04d      	b.n	8005fd2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1a      	ldr	r2, [r3, #32]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	61f9      	str	r1, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	2b20      	cmp	r3, #32
 8005f4a:	d041      	beq.n	8005fd0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d101      	bne.n	8005f56 <get_fileinfo+0xc6>
 8005f52:	23e5      	movs	r3, #229	@ 0xe5
 8005f54:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d10f      	bne.n	8005f7c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8005f5c:	89bb      	ldrh	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d105      	bne.n	8005f6e <get_fileinfo+0xde>
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	4413      	add	r3, r2
 8005f68:	3316      	adds	r3, #22
 8005f6a:	222e      	movs	r2, #46	@ 0x2e
 8005f6c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	61ba      	str	r2, [r7, #24]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	4413      	add	r3, r2
 8005f78:	222e      	movs	r2, #46	@ 0x2e
 8005f7a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	4413      	add	r3, r2
 8005f82:	3309      	adds	r3, #9
 8005f84:	7dfa      	ldrb	r2, [r7, #23]
 8005f86:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8005f88:	89bb      	ldrh	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d11c      	bne.n	8005fc8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d913      	bls.n	8005fbc <get_fileinfo+0x12c>
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	2b5a      	cmp	r3, #90	@ 0x5a
 8005f98:	d810      	bhi.n	8005fbc <get_fileinfo+0x12c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d901      	bls.n	8005fae <get_fileinfo+0x11e>
 8005faa:	2310      	movs	r3, #16
 8005fac:	e000      	b.n	8005fb0 <get_fileinfo+0x120>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	3320      	adds	r3, #32
 8005fba:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3316      	adds	r3, #22
 8005fc4:	7dfa      	ldrb	r2, [r7, #23]
 8005fc6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e000      	b.n	8005fd2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8005fd0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2b0a      	cmp	r3, #10
 8005fd6:	d9ae      	bls.n	8005f36 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8005fd8:	89bb      	ldrh	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10d      	bne.n	8005ffa <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3316      	adds	r3, #22
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <get_fileinfo+0x16a>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	4413      	add	r3, r2
 8006000:	3309      	adds	r3, #9
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	7ada      	ldrb	r2, [r3, #11]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	331c      	adds	r3, #28
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fa94 	bl	8004544 <ld_dword>
 800601c:	4602      	mov	r2, r0
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	3316      	adds	r3, #22
 8006028:	4618      	mov	r0, r3
 800602a:	f7fe fa8b 	bl	8004544 <ld_dword>
 800602e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	b29a      	uxth	r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	80da      	strh	r2, [r3, #6]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	0c1b      	lsrs	r3, r3, #16
 800603c:	b29a      	uxth	r2, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	809a      	strh	r2, [r3, #4]
 8006042:	e000      	b.n	8006046 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006044:	bf00      	nop
}
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	@ 0x28
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	2300      	movs	r3, #0
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	61ba      	str	r2, [r7, #24]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4413      	add	r3, r2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800607a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800607c:	2b1f      	cmp	r3, #31
 800607e:	d940      	bls.n	8006102 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006082:	2b2f      	cmp	r3, #47	@ 0x2f
 8006084:	d006      	beq.n	8006094 <create_name+0x48>
 8006086:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006088:	2b5c      	cmp	r3, #92	@ 0x5c
 800608a:	d110      	bne.n	80060ae <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800608c:	e002      	b.n	8006094 <create_name+0x48>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	3301      	adds	r3, #1
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	4413      	add	r3, r2
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b2f      	cmp	r3, #47	@ 0x2f
 800609e:	d0f6      	beq.n	800608e <create_name+0x42>
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	4413      	add	r3, r2
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80060aa:	d0f0      	beq.n	800608e <create_name+0x42>
			break;
 80060ac:	e02a      	b.n	8006104 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80060b2:	d901      	bls.n	80060b8 <create_name+0x6c>
 80060b4:	2306      	movs	r3, #6
 80060b6:	e17d      	b.n	80063b4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80060b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80060be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060c0:	2101      	movs	r1, #1
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 facc 	bl	8007660 <ff_convert>
 80060c8:	4603      	mov	r3, r0
 80060ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80060cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <create_name+0x8a>
 80060d2:	2306      	movs	r3, #6
 80060d4:	e16e      	b.n	80063b4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80060d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060da:	d809      	bhi.n	80060f0 <create_name+0xa4>
 80060dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060de:	4619      	mov	r1, r3
 80060e0:	488d      	ldr	r0, [pc, #564]	@ (8006318 <create_name+0x2cc>)
 80060e2:	f7fe fafc 	bl	80046de <chk_chr>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <create_name+0xa4>
 80060ec:	2306      	movs	r3, #6
 80060ee:	e161      	b.n	80063b4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	617a      	str	r2, [r7, #20]
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060fe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006100:	e7b4      	b.n	800606c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006102:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	441a      	add	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800610e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006110:	2b1f      	cmp	r3, #31
 8006112:	d801      	bhi.n	8006118 <create_name+0xcc>
 8006114:	2304      	movs	r3, #4
 8006116:	e000      	b.n	800611a <create_name+0xce>
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800611e:	e011      	b.n	8006144 <create_name+0xf8>
		w = lfn[di - 1];
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006126:	3b01      	subs	r3, #1
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006134:	2b20      	cmp	r3, #32
 8006136:	d002      	beq.n	800613e <create_name+0xf2>
 8006138:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800613a:	2b2e      	cmp	r3, #46	@ 0x2e
 800613c:	d106      	bne.n	800614c <create_name+0x100>
		di--;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	3b01      	subs	r3, #1
 8006142:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1ea      	bne.n	8006120 <create_name+0xd4>
 800614a:	e000      	b.n	800614e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800614c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	2200      	movs	r2, #0
 8006158:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <create_name+0x118>
 8006160:	2306      	movs	r3, #6
 8006162:	e127      	b.n	80063b4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3324      	adds	r3, #36	@ 0x24
 8006168:	220b      	movs	r2, #11
 800616a:	2120      	movs	r1, #32
 800616c:	4618      	mov	r0, r3
 800616e:	f7fe fa74 	bl	800465a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006172:	2300      	movs	r3, #0
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e002      	b.n	800617e <create_name+0x132>
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	3301      	adds	r3, #1
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	2b20      	cmp	r3, #32
 800618a:	d0f5      	beq.n	8006178 <create_name+0x12c>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	2b2e      	cmp	r3, #46	@ 0x2e
 8006198:	d0ee      	beq.n	8006178 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <create_name+0x168>
 80061a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061a4:	f043 0303 	orr.w	r3, r3, #3
 80061a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80061ac:	e002      	b.n	80061b4 <create_name+0x168>
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <create_name+0x182>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80061c0:	3b01      	subs	r3, #1
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80061cc:	d1ef      	bne.n	80061ae <create_name+0x162>

	i = b = 0; ni = 8;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80061d4:	2300      	movs	r3, #0
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	2308      	movs	r3, #8
 80061da:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	61ba      	str	r2, [r7, #24]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80061ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8090 	beq.w	8006314 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d006      	beq.n	8006208 <create_name+0x1bc>
 80061fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80061fe:	d10a      	bne.n	8006216 <create_name+0x1ca>
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	429a      	cmp	r2, r3
 8006206:	d006      	beq.n	8006216 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800620c:	f043 0303 	orr.w	r3, r3, #3
 8006210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006214:	e07d      	b.n	8006312 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	429a      	cmp	r2, r3
 800621c:	d203      	bcs.n	8006226 <create_name+0x1da>
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	429a      	cmp	r2, r3
 8006224:	d123      	bne.n	800626e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b0b      	cmp	r3, #11
 800622a:	d106      	bne.n	800623a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800622c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006230:	f043 0303 	orr.w	r3, r3, #3
 8006234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006238:	e075      	b.n	8006326 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	429a      	cmp	r2, r3
 8006240:	d005      	beq.n	800624e <create_name+0x202>
 8006242:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006246:	f043 0303 	orr.w	r3, r3, #3
 800624a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	429a      	cmp	r2, r3
 8006254:	d866      	bhi.n	8006324 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	2308      	movs	r3, #8
 800625c:	623b      	str	r3, [r7, #32]
 800625e:	230b      	movs	r3, #11
 8006260:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006262:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800626c:	e051      	b.n	8006312 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800626e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006270:	2b7f      	cmp	r3, #127	@ 0x7f
 8006272:	d914      	bls.n	800629e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006276:	2100      	movs	r1, #0
 8006278:	4618      	mov	r0, r3
 800627a:	f001 f9f1 	bl	8007660 <ff_convert>
 800627e:	4603      	mov	r3, r0
 8006280:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <create_name+0x246>
 8006288:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800628a:	3b80      	subs	r3, #128	@ 0x80
 800628c:	4a23      	ldr	r2, [pc, #140]	@ (800631c <create_name+0x2d0>)
 800628e:	5cd3      	ldrb	r3, [r2, r3]
 8006290:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006296:	f043 0302 	orr.w	r3, r3, #2
 800629a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800629e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <create_name+0x268>
 80062a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062a6:	4619      	mov	r1, r3
 80062a8:	481d      	ldr	r0, [pc, #116]	@ (8006320 <create_name+0x2d4>)
 80062aa:	f7fe fa18 	bl	80046de <chk_chr>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80062b4:	235f      	movs	r3, #95	@ 0x5f
 80062b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062bc:	f043 0303 	orr.w	r3, r3, #3
 80062c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062c4:	e01b      	b.n	80062fe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80062c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062c8:	2b40      	cmp	r3, #64	@ 0x40
 80062ca:	d909      	bls.n	80062e0 <create_name+0x294>
 80062cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ce:	2b5a      	cmp	r3, #90	@ 0x5a
 80062d0:	d806      	bhi.n	80062e0 <create_name+0x294>
					b |= 2;
 80062d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062d6:	f043 0302 	orr.w	r3, r3, #2
 80062da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80062de:	e00e      	b.n	80062fe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80062e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062e2:	2b60      	cmp	r3, #96	@ 0x60
 80062e4:	d90b      	bls.n	80062fe <create_name+0x2b2>
 80062e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062e8:	2b7a      	cmp	r3, #122	@ 0x7a
 80062ea:	d808      	bhi.n	80062fe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80062ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80062f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062fa:	3b20      	subs	r3, #32
 80062fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	623a      	str	r2, [r7, #32]
 8006304:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006306:	b2d1      	uxtb	r1, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	460a      	mov	r2, r1
 800630e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006312:	e763      	b.n	80061dc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006314:	bf00      	nop
 8006316:	e006      	b.n	8006326 <create_name+0x2da>
 8006318:	08007b04 	.word	0x08007b04
 800631c:	08007b64 	.word	0x08007b64
 8006320:	08007b10 	.word	0x08007b10
			if (si > di) break;			/* No extension */
 8006324:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800632c:	2be5      	cmp	r3, #229	@ 0xe5
 800632e:	d103      	bne.n	8006338 <create_name+0x2ec>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2205      	movs	r2, #5
 8006334:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b08      	cmp	r3, #8
 800633c:	d104      	bne.n	8006348 <create_name+0x2fc>
 800633e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b0c      	cmp	r3, #12
 8006352:	d005      	beq.n	8006360 <create_name+0x314>
 8006354:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b03      	cmp	r3, #3
 800635e:	d105      	bne.n	800636c <create_name+0x320>
 8006360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006364:	f043 0302 	orr.w	r3, r3, #2
 8006368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800636c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d117      	bne.n	80063a8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d105      	bne.n	8006390 <create_name+0x344>
 8006384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006388:	f043 0310 	orr.w	r3, r3, #16
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006390:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006394:	f003 030c 	and.w	r3, r3, #12
 8006398:	2b04      	cmp	r3, #4
 800639a:	d105      	bne.n	80063a8 <create_name+0x35c>
 800639c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a0:	f043 0308 	orr.w	r3, r3, #8
 80063a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80063ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80063b2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3728      	adds	r7, #40	@ 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80063d0:	e002      	b.n	80063d8 <follow_path+0x1c>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	3301      	adds	r3, #1
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80063de:	d0f8      	beq.n	80063d2 <follow_path+0x16>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80063e6:	d0f4      	beq.n	80063d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2200      	movs	r2, #0
 80063ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b1f      	cmp	r3, #31
 80063f4:	d80a      	bhi.n	800640c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2280      	movs	r2, #128	@ 0x80
 80063fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80063fe:	2100      	movs	r1, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7fe ff16 	bl	8005232 <dir_sdi>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]
 800640a:	e048      	b.n	800649e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800640c:	463b      	mov	r3, r7
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fe1b 	bl	800604c <create_name>
 8006416:	4603      	mov	r3, r0
 8006418:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d139      	bne.n	8006494 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fb7d 	bl	8005b20 <dir_find>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006430:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d12c      	bne.n	8006498 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d127      	bne.n	8006498 <follow_path+0xdc>
 8006448:	2305      	movs	r3, #5
 800644a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800644c:	e024      	b.n	8006498 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d121      	bne.n	800649c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	799b      	ldrb	r3, [r3, #6]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006464:	2305      	movs	r3, #5
 8006466:	75fb      	strb	r3, [r7, #23]
 8006468:	e019      	b.n	800649e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	8992      	ldrh	r2, [r2, #12]
 8006478:	fbb3 f0f2 	udiv	r0, r3, r2
 800647c:	fb00 f202 	mul.w	r2, r0, r2
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	440b      	add	r3, r1
 8006484:	4619      	mov	r1, r3
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff f879 	bl	800557e <ld_clust>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006492:	e7bb      	b.n	800640c <follow_path+0x50>
			if (res != FR_OK) break;
 8006494:	bf00      	nop
 8006496:	e002      	b.n	800649e <follow_path+0xe2>
				break;
 8006498:	bf00      	nop
 800649a:	e000      	b.n	800649e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800649c:	bf00      	nop
			}
		}
	}

	return res;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80064b0:	f04f 33ff 	mov.w	r3, #4294967295
 80064b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d031      	beq.n	8006522 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e002      	b.n	80064cc <get_ldnumber+0x24>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	3301      	adds	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b1f      	cmp	r3, #31
 80064d2:	d903      	bls.n	80064dc <get_ldnumber+0x34>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80064da:	d1f4      	bne.n	80064c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80064e2:	d11c      	bne.n	800651e <get_ldnumber+0x76>
			tp = *path;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	60fa      	str	r2, [r7, #12]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	3b30      	subs	r3, #48	@ 0x30
 80064f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b09      	cmp	r3, #9
 80064fa:	d80e      	bhi.n	800651a <get_ldnumber+0x72>
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	429a      	cmp	r2, r3
 8006502:	d10a      	bne.n	800651a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d107      	bne.n	800651a <get_ldnumber+0x72>
					vol = (int)i;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	3301      	adds	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	e002      	b.n	8006524 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006522:	693b      	ldr	r3, [r7, #16]
}
 8006524:	4618      	mov	r0, r3
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	70da      	strb	r2, [r3, #3]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fe fa92 	bl	8004a74 <move_window>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <check_fs+0x2a>
 8006556:	2304      	movs	r3, #4
 8006558:	e038      	b.n	80065cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3338      	adds	r3, #56	@ 0x38
 800655e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006562:	4618      	mov	r0, r3
 8006564:	f7fd ffd6 	bl	8004514 <ld_word>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <check_fs+0x48>
 8006574:	2303      	movs	r3, #3
 8006576:	e029      	b.n	80065cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800657e:	2be9      	cmp	r3, #233	@ 0xe9
 8006580:	d009      	beq.n	8006596 <check_fs+0x66>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006588:	2beb      	cmp	r3, #235	@ 0xeb
 800658a:	d11e      	bne.n	80065ca <check_fs+0x9a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006592:	2b90      	cmp	r3, #144	@ 0x90
 8006594:	d119      	bne.n	80065ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3338      	adds	r3, #56	@ 0x38
 800659a:	3336      	adds	r3, #54	@ 0x36
 800659c:	4618      	mov	r0, r3
 800659e:	f7fd ffd1 	bl	8004544 <ld_dword>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80065a8:	4a0a      	ldr	r2, [pc, #40]	@ (80065d4 <check_fs+0xa4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <check_fs+0x82>
 80065ae:	2300      	movs	r3, #0
 80065b0:	e00c      	b.n	80065cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3338      	adds	r3, #56	@ 0x38
 80065b6:	3352      	adds	r3, #82	@ 0x52
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd ffc3 	bl	8004544 <ld_dword>
 80065be:	4603      	mov	r3, r0
 80065c0:	4a05      	ldr	r2, [pc, #20]	@ (80065d8 <check_fs+0xa8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d101      	bne.n	80065ca <check_fs+0x9a>
 80065c6:	2300      	movs	r3, #0
 80065c8:	e000      	b.n	80065cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80065ca:	2302      	movs	r3, #2
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	00544146 	.word	0x00544146
 80065d8:	33544146 	.word	0x33544146

080065dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b096      	sub	sp, #88	@ 0x58
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	4613      	mov	r3, r2
 80065e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff ff59 	bl	80064a8 <get_ldnumber>
 80065f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da01      	bge.n	8006602 <find_volume+0x26>
 80065fe:	230b      	movs	r3, #11
 8006600:	e265      	b.n	8006ace <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006602:	4a9f      	ldr	r2, [pc, #636]	@ (8006880 <find_volume+0x2a4>)
 8006604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800660a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800660c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <find_volume+0x3a>
 8006612:	230c      	movs	r3, #12
 8006614:	e25b      	b.n	8006ace <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800661a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01a      	beq.n	8006662 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	4618      	mov	r0, r3
 8006632:	f7fd fecf 	bl	80043d4 <disk_status>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800663c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10c      	bne.n	8006662 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <find_volume+0x82>
 800664e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800665a:	230a      	movs	r3, #10
 800665c:	e237      	b.n	8006ace <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800665e:	2300      	movs	r3, #0
 8006660:	e235      	b.n	8006ace <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	4618      	mov	r0, r3
 8006676:	f7fd fec7 	bl	8004408 <disk_initialize>
 800667a:	4603      	mov	r3, r0
 800667c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800668c:	2303      	movs	r3, #3
 800668e:	e21e      	b.n	8006ace <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <find_volume+0xca>
 8006696:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80066a2:	230a      	movs	r3, #10
 80066a4:	e213      	b.n	8006ace <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	7858      	ldrb	r0, [r3, #1]
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	330c      	adds	r3, #12
 80066ae:	461a      	mov	r2, r3
 80066b0:	2102      	movs	r1, #2
 80066b2:	f7fd ff11 	bl	80044d8 <disk_ioctl>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <find_volume+0xe4>
 80066bc:	2301      	movs	r3, #1
 80066be:	e206      	b.n	8006ace <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	899b      	ldrh	r3, [r3, #12]
 80066c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c8:	d80d      	bhi.n	80066e6 <find_volume+0x10a>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	899b      	ldrh	r3, [r3, #12]
 80066ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d2:	d308      	bcc.n	80066e6 <find_volume+0x10a>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	899b      	ldrh	r3, [r3, #12]
 80066d8:	461a      	mov	r2, r3
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	899b      	ldrh	r3, [r3, #12]
 80066de:	3b01      	subs	r3, #1
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <find_volume+0x10e>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e1f1      	b.n	8006ace <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80066ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066f2:	f7ff ff1d 	bl	8006530 <check_fs>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80066fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006700:	2b02      	cmp	r3, #2
 8006702:	d149      	bne.n	8006798 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006704:	2300      	movs	r3, #0
 8006706:	643b      	str	r3, [r7, #64]	@ 0x40
 8006708:	e01e      	b.n	8006748 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006710:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006718:	4413      	add	r3, r2
 800671a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800671c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671e:	3304      	adds	r3, #4
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d006      	beq.n	8006734 <find_volume+0x158>
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	3308      	adds	r3, #8
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd ff0a 	bl	8004544 <ld_dword>
 8006730:	4602      	mov	r2, r0
 8006732:	e000      	b.n	8006736 <find_volume+0x15a>
 8006734:	2200      	movs	r2, #0
 8006736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	3358      	adds	r3, #88	@ 0x58
 800673c:	443b      	add	r3, r7
 800673e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006744:	3301      	adds	r3, #1
 8006746:	643b      	str	r3, [r7, #64]	@ 0x40
 8006748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674a:	2b03      	cmp	r3, #3
 800674c:	d9dd      	bls.n	800670a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800674e:	2300      	movs	r3, #0
 8006750:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <find_volume+0x182>
 8006758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800675a:	3b01      	subs	r3, #1
 800675c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800675e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	3358      	adds	r3, #88	@ 0x58
 8006764:	443b      	add	r3, r7
 8006766:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800676a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800676c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <find_volume+0x1a2>
 8006772:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006774:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006776:	f7ff fedb 	bl	8006530 <check_fs>
 800677a:	4603      	mov	r3, r0
 800677c:	e000      	b.n	8006780 <find_volume+0x1a4>
 800677e:	2303      	movs	r3, #3
 8006780:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006784:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006788:	2b01      	cmp	r3, #1
 800678a:	d905      	bls.n	8006798 <find_volume+0x1bc>
 800678c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800678e:	3301      	adds	r3, #1
 8006790:	643b      	str	r3, [r7, #64]	@ 0x40
 8006792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006794:	2b03      	cmp	r3, #3
 8006796:	d9e2      	bls.n	800675e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006798:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800679c:	2b04      	cmp	r3, #4
 800679e:	d101      	bne.n	80067a4 <find_volume+0x1c8>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e194      	b.n	8006ace <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80067a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d901      	bls.n	80067b0 <find_volume+0x1d4>
 80067ac:	230d      	movs	r3, #13
 80067ae:	e18e      	b.n	8006ace <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	3338      	adds	r3, #56	@ 0x38
 80067b4:	330b      	adds	r3, #11
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fd feac 	bl	8004514 <ld_word>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c2:	899b      	ldrh	r3, [r3, #12]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d001      	beq.n	80067cc <find_volume+0x1f0>
 80067c8:	230d      	movs	r3, #13
 80067ca:	e180      	b.n	8006ace <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ce:	3338      	adds	r3, #56	@ 0x38
 80067d0:	3316      	adds	r3, #22
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fd fe9e 	bl	8004514 <ld_word>
 80067d8:	4603      	mov	r3, r0
 80067da:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80067dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <find_volume+0x214>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	3338      	adds	r3, #56	@ 0x38
 80067e6:	3324      	adds	r3, #36	@ 0x24
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fd feab 	bl	8004544 <ld_dword>
 80067ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067f4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006802:	789b      	ldrb	r3, [r3, #2]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d005      	beq.n	8006814 <find_volume+0x238>
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	789b      	ldrb	r3, [r3, #2]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d001      	beq.n	8006814 <find_volume+0x238>
 8006810:	230d      	movs	r3, #13
 8006812:	e15c      	b.n	8006ace <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	789b      	ldrb	r3, [r3, #2]
 8006818:	461a      	mov	r2, r3
 800681a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800681c:	fb02 f303 	mul.w	r3, r2, r3
 8006820:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006828:	461a      	mov	r2, r3
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	895b      	ldrh	r3, [r3, #10]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d008      	beq.n	8006848 <find_volume+0x26c>
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	895b      	ldrh	r3, [r3, #10]
 800683a:	461a      	mov	r2, r3
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	895b      	ldrh	r3, [r3, #10]
 8006840:	3b01      	subs	r3, #1
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <find_volume+0x270>
 8006848:	230d      	movs	r3, #13
 800684a:	e140      	b.n	8006ace <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	3338      	adds	r3, #56	@ 0x38
 8006850:	3311      	adds	r3, #17
 8006852:	4618      	mov	r0, r3
 8006854:	f7fd fe5e 	bl	8004514 <ld_word>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006862:	891b      	ldrh	r3, [r3, #8]
 8006864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006866:	8992      	ldrh	r2, [r2, #12]
 8006868:	0952      	lsrs	r2, r2, #5
 800686a:	b292      	uxth	r2, r2
 800686c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006870:	fb01 f202 	mul.w	r2, r1, r2
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <find_volume+0x2a8>
 800687c:	230d      	movs	r3, #13
 800687e:	e126      	b.n	8006ace <find_volume+0x4f2>
 8006880:	2000137c 	.word	0x2000137c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006886:	3338      	adds	r3, #56	@ 0x38
 8006888:	3313      	adds	r3, #19
 800688a:	4618      	mov	r0, r3
 800688c:	f7fd fe42 	bl	8004514 <ld_word>
 8006890:	4603      	mov	r3, r0
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <find_volume+0x2cc>
 800689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689c:	3338      	adds	r3, #56	@ 0x38
 800689e:	3320      	adds	r3, #32
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fd fe4f 	bl	8004544 <ld_dword>
 80068a6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	3338      	adds	r3, #56	@ 0x38
 80068ac:	330e      	adds	r3, #14
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fd fe30 	bl	8004514 <ld_word>
 80068b4:	4603      	mov	r3, r0
 80068b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80068b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <find_volume+0x2e6>
 80068be:	230d      	movs	r3, #13
 80068c0:	e105      	b.n	8006ace <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80068c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80068c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068c6:	4413      	add	r3, r2
 80068c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ca:	8911      	ldrh	r1, [r2, #8]
 80068cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ce:	8992      	ldrh	r2, [r2, #12]
 80068d0:	0952      	lsrs	r2, r2, #5
 80068d2:	b292      	uxth	r2, r2
 80068d4:	fbb1 f2f2 	udiv	r2, r1, r2
 80068d8:	b292      	uxth	r2, r2
 80068da:	4413      	add	r3, r2
 80068dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80068de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d201      	bcs.n	80068ea <find_volume+0x30e>
 80068e6:	230d      	movs	r3, #13
 80068e8:	e0f1      	b.n	8006ace <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80068ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068f2:	8952      	ldrh	r2, [r2, #10]
 80068f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <find_volume+0x328>
 8006900:	230d      	movs	r3, #13
 8006902:	e0e4      	b.n	8006ace <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006904:	2303      	movs	r3, #3
 8006906:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006910:	4293      	cmp	r3, r2
 8006912:	d802      	bhi.n	800691a <find_volume+0x33e>
 8006914:	2302      	movs	r3, #2
 8006916:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006920:	4293      	cmp	r3, r2
 8006922:	d802      	bhi.n	800692a <find_volume+0x34e>
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	1c9a      	adds	r2, r3, #2
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006936:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006938:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800693a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693c:	441a      	add	r2, r3
 800693e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006940:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006942:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	441a      	add	r2, r3
 8006948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800694c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006950:	2b03      	cmp	r3, #3
 8006952:	d11e      	bne.n	8006992 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	3338      	adds	r3, #56	@ 0x38
 8006958:	332a      	adds	r3, #42	@ 0x2a
 800695a:	4618      	mov	r0, r3
 800695c:	f7fd fdda 	bl	8004514 <ld_word>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <find_volume+0x38e>
 8006966:	230d      	movs	r3, #13
 8006968:	e0b1      	b.n	8006ace <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	891b      	ldrh	r3, [r3, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <find_volume+0x39a>
 8006972:	230d      	movs	r3, #13
 8006974:	e0ab      	b.n	8006ace <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	3338      	adds	r3, #56	@ 0x38
 800697a:	332c      	adds	r3, #44	@ 0x2c
 800697c:	4618      	mov	r0, r3
 800697e:	f7fd fde1 	bl	8004544 <ld_dword>
 8006982:	4602      	mov	r2, r0
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006990:	e01f      	b.n	80069d2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	891b      	ldrh	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <find_volume+0x3c2>
 800699a:	230d      	movs	r3, #13
 800699c:	e097      	b.n	8006ace <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a4:	441a      	add	r2, r3
 80069a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80069aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d103      	bne.n	80069ba <find_volume+0x3de>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	e00a      	b.n	80069d0 <find_volume+0x3f4>
 80069ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	085a      	lsrs	r2, r3, #1
 80069c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80069d0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80069d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d4:	6a1a      	ldr	r2, [r3, #32]
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	899b      	ldrh	r3, [r3, #12]
 80069da:	4619      	mov	r1, r3
 80069dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069de:	440b      	add	r3, r1
 80069e0:	3b01      	subs	r3, #1
 80069e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069e4:	8989      	ldrh	r1, [r1, #12]
 80069e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d201      	bcs.n	80069f2 <find_volume+0x416>
 80069ee:	230d      	movs	r3, #13
 80069f0:	e06d      	b.n	8006ace <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f4:	f04f 32ff 	mov.w	r2, #4294967295
 80069f8:	619a      	str	r2, [r3, #24]
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	2280      	movs	r2, #128	@ 0x80
 8006a06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006a08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d149      	bne.n	8006aa4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a12:	3338      	adds	r3, #56	@ 0x38
 8006a14:	3330      	adds	r3, #48	@ 0x30
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fd fd7c 	bl	8004514 <ld_word>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d140      	bne.n	8006aa4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a24:	3301      	adds	r3, #1
 8006a26:	4619      	mov	r1, r3
 8006a28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a2a:	f7fe f823 	bl	8004a74 <move_window>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d137      	bne.n	8006aa4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	2200      	movs	r2, #0
 8006a38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	3338      	adds	r3, #56	@ 0x38
 8006a3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd fd66 	bl	8004514 <ld_word>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d127      	bne.n	8006aa4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a56:	3338      	adds	r3, #56	@ 0x38
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fd fd73 	bl	8004544 <ld_dword>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad8 <find_volume+0x4fc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d11e      	bne.n	8006aa4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a68:	3338      	adds	r3, #56	@ 0x38
 8006a6a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fd fd68 	bl	8004544 <ld_dword>
 8006a74:	4603      	mov	r3, r0
 8006a76:	4a19      	ldr	r2, [pc, #100]	@ (8006adc <find_volume+0x500>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d113      	bne.n	8006aa4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	3338      	adds	r3, #56	@ 0x38
 8006a80:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fd fd5d 	bl	8004544 <ld_dword>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	3338      	adds	r3, #56	@ 0x38
 8006a94:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fd fd53 	bl	8004544 <ld_dword>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006aaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006aac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae0 <find_volume+0x504>)
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <find_volume+0x504>)
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	4b09      	ldr	r3, [pc, #36]	@ (8006ae0 <find_volume+0x504>)
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	4a08      	ldr	r2, [pc, #32]	@ (8006ae4 <find_volume+0x508>)
 8006ac4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ac6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ac8:	f7fd ff6c 	bl	80049a4 <clear_lock>
#endif
	return FR_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3758      	adds	r7, #88	@ 0x58
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	41615252 	.word	0x41615252
 8006adc:	61417272 	.word	0x61417272
 8006ae0:	20001380 	.word	0x20001380
 8006ae4:	200013a4 	.word	0x200013a4

08006ae8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006af2:	2309      	movs	r3, #9
 8006af4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01c      	beq.n	8006b36 <validate+0x4e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d018      	beq.n	8006b36 <validate+0x4e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d013      	beq.n	8006b36 <validate+0x4e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	889a      	ldrh	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	88db      	ldrh	r3, [r3, #6]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10c      	bne.n	8006b36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd fc56 	bl	80043d4 <disk_status>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <validate+0x4e>
			res = FR_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <validate+0x5a>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	e000      	b.n	8006b44 <validate+0x5c>
 8006b42:	2300      	movs	r3, #0
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	6013      	str	r3, [r2, #0]
	return res;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b66:	f107 0310 	add.w	r3, r7, #16
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fc9c 	bl	80064a8 <get_ldnumber>
 8006b70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	da01      	bge.n	8006b7c <f_mount+0x28>
 8006b78:	230b      	movs	r3, #11
 8006b7a:	e02b      	b.n	8006bd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b7c:	4a17      	ldr	r2, [pc, #92]	@ (8006bdc <f_mount+0x88>)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b8c:	69b8      	ldr	r0, [r7, #24]
 8006b8e:	f7fd ff09 	bl	80049a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	490d      	ldr	r1, [pc, #52]	@ (8006bdc <f_mount+0x88>)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <f_mount+0x66>
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d001      	beq.n	8006bbe <f_mount+0x6a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e00a      	b.n	8006bd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006bbe:	f107 010c 	add.w	r1, r7, #12
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fd07 	bl	80065dc <find_volume>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	2000137c 	.word	0x2000137c

08006be0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b09a      	sub	sp, #104	@ 0x68
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <f_open+0x18>
 8006bf4:	2309      	movs	r3, #9
 8006bf6:	e1b7      	b.n	8006f68 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006c00:	79fa      	ldrb	r2, [r7, #7]
 8006c02:	f107 0114 	add.w	r1, r7, #20
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fce6 	bl	80065dc <find_volume>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006c16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 819b 	bne.w	8006f56 <f_open+0x376>
		dj.obj.fs = fs;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	f107 0318 	add.w	r3, r7, #24
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff fbc5 	bl	80063bc <follow_path>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006c38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d118      	bne.n	8006c72 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006c40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da03      	bge.n	8006c52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006c4a:	2306      	movs	r3, #6
 8006c4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006c50:	e00f      	b.n	8006c72 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	bf8c      	ite	hi
 8006c58:	2301      	movhi	r3, #1
 8006c5a:	2300      	movls	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f107 0318 	add.w	r3, r7, #24
 8006c64:	4611      	mov	r1, r2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fd fd54 	bl	8004714 <chk_lock>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	f003 031c 	and.w	r3, r3, #28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d07f      	beq.n	8006d7c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006c7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d017      	beq.n	8006cb4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006c84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d10e      	bne.n	8006caa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006c8c:	f7fd fd9e 	bl	80047cc <enq_lock>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <f_open+0xc4>
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff f800 	bl	8005ca0 <dir_register>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	e000      	b.n	8006ca6 <f_open+0xc6>
 8006ca4:	2312      	movs	r3, #18
 8006ca6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	f043 0308 	orr.w	r3, r3, #8
 8006cb0:	71fb      	strb	r3, [r7, #7]
 8006cb2:	e010      	b.n	8006cd6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006cb4:	7fbb      	ldrb	r3, [r7, #30]
 8006cb6:	f003 0311 	and.w	r3, r3, #17
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <f_open+0xe6>
					res = FR_DENIED;
 8006cbe:	2307      	movs	r3, #7
 8006cc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006cc4:	e007      	b.n	8006cd6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <f_open+0xf6>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006cd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d168      	bne.n	8006db0 <f_open+0x1d0>
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d063      	beq.n	8006db0 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006ce8:	f7fd fb16 	bl	8004318 <get_fattime>
 8006cec:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf0:	330e      	adds	r3, #14
 8006cf2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd fc63 	bl	80045c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfc:	3316      	adds	r3, #22
 8006cfe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd fc5d 	bl	80045c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	330b      	adds	r3, #11
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fc32 	bl	800557e <ld_clust>
 8006d1a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d20:	2200      	movs	r2, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fc4a 	bl	80055bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	331c      	adds	r3, #28
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fd fc46 	bl	80045c0 <st_dword>
					fs->wflag = 1;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2201      	movs	r2, #1
 8006d38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d037      	beq.n	8006db0 <f_open+0x1d0>
						dw = fs->winsect;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d44:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006d46:	f107 0318 	add.w	r3, r7, #24
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe f93a 	bl	8004fc8 <remove_chain>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d126      	bne.n	8006db0 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fd fe84 	bl	8004a74 <move_window>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d76:	3a01      	subs	r2, #1
 8006d78:	615a      	str	r2, [r3, #20]
 8006d7a:	e019      	b.n	8006db0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006d7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d115      	bne.n	8006db0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006d84:	7fbb      	ldrb	r3, [r7, #30]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006d8e:	2304      	movs	r3, #4
 8006d90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d94:	e00c      	b.n	8006db0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <f_open+0x1d0>
 8006da0:	7fbb      	ldrb	r3, [r7, #30]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <f_open+0x1d0>
						res = FR_DENIED;
 8006daa:	2307      	movs	r3, #7
 8006dac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006db0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d126      	bne.n	8006e06 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	f003 0308 	and.w	r3, r3, #8
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006dd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	bf8c      	ite	hi
 8006dde:	2301      	movhi	r3, #1
 8006de0:	2300      	movls	r3, #0
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	f107 0318 	add.w	r3, r7, #24
 8006dea:	4611      	mov	r1, r2
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fd fd0f 	bl	8004810 <inc_lock>
 8006df2:	4602      	mov	r2, r0
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d102      	bne.n	8006e06 <f_open+0x226>
 8006e00:	2302      	movs	r3, #2
 8006e02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006e06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 80a3 	bne.w	8006f56 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fbb1 	bl	800557e <ld_clust>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	331c      	adds	r3, #28
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd fb8c 	bl	8004544 <ld_dword>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	88da      	ldrh	r2, [r3, #6]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	79fa      	ldrb	r2, [r7, #7]
 8006e4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3330      	adds	r3, #48	@ 0x30
 8006e62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fd fbf6 	bl	800465a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d06e      	beq.n	8006f56 <f_open+0x376>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d06a      	beq.n	8006f56 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	895b      	ldrh	r3, [r3, #10]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	899b      	ldrh	r3, [r3, #12]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ea4:	e016      	b.n	8006ed4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fd fe9f 	bl	8004bee <get_fat>
 8006eb0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d802      	bhi.n	8006ebe <f_open+0x2de>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec4:	d102      	bne.n	8006ecc <f_open+0x2ec>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ecc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ed4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <f_open+0x304>
 8006edc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d8e0      	bhi.n	8006ea6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006ee8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006eea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d131      	bne.n	8006f56 <f_open+0x376>
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	899b      	ldrh	r3, [r3, #12]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006efa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006efe:	fb01 f202 	mul.w	r2, r1, r2
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d026      	beq.n	8006f56 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fd fe4f 	bl	8004bb0 <clust2sect>
 8006f12:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <f_open+0x342>
						res = FR_INT_ERR;
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006f20:	e019      	b.n	8006f56 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	899b      	ldrh	r3, [r3, #12]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	7858      	ldrb	r0, [r3, #1]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1a      	ldr	r2, [r3, #32]
 8006f44:	2301      	movs	r3, #1
 8006f46:	f7fd fa87 	bl	8004458 <disk_read>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <f_open+0x376>
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <f_open+0x384>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006f64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3768      	adds	r7, #104	@ 0x68
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08e      	sub	sp, #56	@ 0x38
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f107 0214 	add.w	r2, r7, #20
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fda9 	bl	8006ae8 <validate>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d107      	bne.n	8006fb4 <f_read+0x44>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	7d5b      	ldrb	r3, [r3, #21]
 8006fa8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006fac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <f_read+0x4a>
 8006fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006fb8:	e135      	b.n	8007226 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	7d1b      	ldrb	r3, [r3, #20]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <f_read+0x5a>
 8006fc6:	2307      	movs	r3, #7
 8006fc8:	e12d      	b.n	8007226 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	f240 811e 	bls.w	800721c <f_read+0x2ac>
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006fe4:	e11a      	b.n	800721c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	8992      	ldrh	r2, [r2, #12]
 8006fee:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ff2:	fb01 f202 	mul.w	r2, r1, r2
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 80d5 	bne.w	80071a8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	8992      	ldrh	r2, [r2, #12]
 8007006:	fbb3 f3f2 	udiv	r3, r3, r2
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	8952      	ldrh	r2, [r2, #10]
 800700e:	3a01      	subs	r2, #1
 8007010:	4013      	ands	r3, r2
 8007012:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d12f      	bne.n	800707a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	633b      	str	r3, [r7, #48]	@ 0x30
 8007028:	e013      	b.n	8007052 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d007      	beq.n	8007042 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	4619      	mov	r1, r3
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7fe f8c2 	bl	80051c2 <clmt_clust>
 800703e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007040:	e007      	b.n	8007052 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fd fdcf 	bl	8004bee <get_fat>
 8007050:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	d804      	bhi.n	8007062 <f_read+0xf2>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2202      	movs	r2, #2
 800705c:	755a      	strb	r2, [r3, #21]
 800705e:	2302      	movs	r3, #2
 8007060:	e0e1      	b.n	8007226 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d104      	bne.n	8007074 <f_read+0x104>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	755a      	strb	r2, [r3, #21]
 8007070:	2301      	movs	r3, #1
 8007072:	e0d8      	b.n	8007226 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007078:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4619      	mov	r1, r3
 8007082:	4610      	mov	r0, r2
 8007084:	f7fd fd94 	bl	8004bb0 <clust2sect>
 8007088:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <f_read+0x12a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2202      	movs	r2, #2
 8007094:	755a      	strb	r2, [r3, #21]
 8007096:	2302      	movs	r3, #2
 8007098:	e0c5      	b.n	8007226 <f_read+0x2b6>
			sect += csect;
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	899b      	ldrh	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d041      	beq.n	800713a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	4413      	add	r3, r2
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	8952      	ldrh	r2, [r2, #10]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d905      	bls.n	80070d0 <f_read+0x160>
					cc = fs->csize - csect;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	895b      	ldrh	r3, [r3, #10]
 80070c8:	461a      	mov	r2, r3
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	7858      	ldrb	r0, [r3, #1]
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070da:	f7fd f9bd 	bl	8004458 <disk_read>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <f_read+0x17e>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	755a      	strb	r2, [r3, #21]
 80070ea:	2301      	movs	r3, #1
 80070ec:	e09b      	b.n	8007226 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	7d1b      	ldrb	r3, [r3, #20]
 80070f2:	b25b      	sxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da18      	bge.n	800712a <f_read+0x1ba>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1a      	ldr	r2, [r3, #32]
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007102:	429a      	cmp	r2, r3
 8007104:	d911      	bls.n	800712a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	8992      	ldrh	r2, [r2, #12]
 8007112:	fb02 f303 	mul.w	r3, r2, r3
 8007116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007118:	18d0      	adds	r0, r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	899b      	ldrh	r3, [r3, #12]
 8007124:	461a      	mov	r2, r3
 8007126:	f7fd fa77 	bl	8004618 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	899b      	ldrh	r3, [r3, #12]
 800712e:	461a      	mov	r2, r3
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007138:	e05c      	b.n	80071f4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	429a      	cmp	r2, r3
 8007142:	d02e      	beq.n	80071a2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	7d1b      	ldrb	r3, [r3, #20]
 8007148:	b25b      	sxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	da18      	bge.n	8007180 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	7858      	ldrb	r0, [r3, #1]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a1a      	ldr	r2, [r3, #32]
 800715c:	2301      	movs	r3, #1
 800715e:	f7fd f99b 	bl	8004498 <disk_write>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d004      	beq.n	8007172 <f_read+0x202>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	755a      	strb	r2, [r3, #21]
 800716e:	2301      	movs	r3, #1
 8007170:	e059      	b.n	8007226 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	7d1b      	ldrb	r3, [r3, #20]
 8007176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800717a:	b2da      	uxtb	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	7858      	ldrb	r0, [r3, #1]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800718a:	2301      	movs	r3, #1
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	f7fd f963 	bl	8004458 <disk_read>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d004      	beq.n	80071a2 <f_read+0x232>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2201      	movs	r2, #1
 800719c:	755a      	strb	r2, [r3, #21]
 800719e:	2301      	movs	r3, #1
 80071a0:	e041      	b.n	8007226 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	899b      	ldrh	r3, [r3, #12]
 80071ac:	4618      	mov	r0, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	8992      	ldrh	r2, [r2, #12]
 80071b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80071ba:	fb01 f202 	mul.w	r2, r1, r2
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	1ac3      	subs	r3, r0, r3
 80071c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80071c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d901      	bls.n	80071d0 <f_read+0x260>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	8992      	ldrh	r2, [r2, #12]
 80071de:	fbb3 f0f2 	udiv	r0, r3, r2
 80071e2:	fb00 f202 	mul.w	r2, r0, r2
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	440b      	add	r3, r1
 80071ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ec:	4619      	mov	r1, r3
 80071ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071f0:	f7fd fa12 	bl	8004618 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80071f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	4413      	add	r3, r2
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007202:	441a      	add	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	619a      	str	r2, [r3, #24]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720e:	441a      	add	r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	f47f aee1 	bne.w	8006fe6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3738      	adds	r7, #56	@ 0x38
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fc52 	bl	8006ae8 <validate>
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d168      	bne.n	8007320 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7d1b      	ldrb	r3, [r3, #20]
 8007252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d062      	beq.n	8007320 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7d1b      	ldrb	r3, [r3, #20]
 800725e:	b25b      	sxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	da15      	bge.n	8007290 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	7858      	ldrb	r0, [r3, #1]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	2301      	movs	r3, #1
 8007274:	f7fd f910 	bl	8004498 <disk_write>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <f_sync+0x54>
 800727e:	2301      	movs	r3, #1
 8007280:	e04f      	b.n	8007322 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	7d1b      	ldrb	r3, [r3, #20]
 8007286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728a:	b2da      	uxtb	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007290:	f7fd f842 	bl	8004318 <get_fattime>
 8007294:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f7fd fbe8 	bl	8004a74 <move_window>
 80072a4:	4603      	mov	r3, r0
 80072a6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80072a8:	7dfb      	ldrb	r3, [r7, #23]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d138      	bne.n	8007320 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	330b      	adds	r3, #11
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	330b      	adds	r3, #11
 80072be:	f042 0220 	orr.w	r2, r2, #32
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	461a      	mov	r2, r3
 80072d0:	68f9      	ldr	r1, [r7, #12]
 80072d2:	f7fe f973 	bl	80055bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f103 021c 	add.w	r2, r3, #28
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fd f96c 	bl	80045c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3316      	adds	r3, #22
 80072ec:	6939      	ldr	r1, [r7, #16]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fd f966 	bl	80045c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3312      	adds	r3, #18
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd f945 	bl	800458a <st_word>
					fs->wflag = 1;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2201      	movs	r2, #1
 8007304:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	4618      	mov	r0, r3
 800730a:	f7fd fbe1 	bl	8004ad0 <sync_fs>
 800730e:	4603      	mov	r3, r0
 8007310:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	7d1b      	ldrb	r3, [r3, #20]
 8007316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800731a:	b2da      	uxtb	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007320:	7dfb      	ldrb	r3, [r7, #23]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff ff7b 	bl	800722e <f_sync>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d118      	bne.n	8007374 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f107 0208 	add.w	r2, r7, #8
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff fbcc 	bl	8006ae8 <validate>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10c      	bne.n	8007374 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	4618      	mov	r0, r3
 8007360:	f7fd fae4 	bl	800492c <dec_lock>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007374:	7bfb      	ldrb	r3, [r7, #15]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b086      	sub	sp, #24
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <f_opendir+0x14>
 800738e:	2309      	movs	r3, #9
 8007390:	e064      	b.n	800745c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007396:	f107 010c 	add.w	r1, r7, #12
 800739a:	463b      	mov	r3, r7
 800739c:	2200      	movs	r2, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff f91c 	bl	80065dc <find_volume>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d14f      	bne.n	800744e <f_opendir+0xd0>
		obj->fs = fs;
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fe ffff 	bl	80063bc <follow_path>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d13d      	bne.n	8007444 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80073ce:	b25b      	sxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	db12      	blt.n	80073fa <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	799b      	ldrb	r3, [r3, #6]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4619      	mov	r1, r3
 80073e8:	4610      	mov	r0, r2
 80073ea:	f7fe f8c8 	bl	800557e <ld_clust>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	609a      	str	r2, [r3, #8]
 80073f4:	e001      	b.n	80073fa <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80073f6:	2305      	movs	r3, #5
 80073f8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d121      	bne.n	8007444 <f_opendir+0xc6>
				obj->id = fs->id;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	88da      	ldrh	r2, [r3, #6]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007408:	2100      	movs	r1, #0
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fd ff11 	bl	8005232 <dir_sdi>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d114      	bne.n	8007444 <f_opendir+0xc6>
					if (obj->sclust) {
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00d      	beq.n	800743e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007422:	2100      	movs	r1, #0
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fd f9f3 	bl	8004810 <inc_lock>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <f_opendir+0xc6>
 8007438:	2312      	movs	r3, #18
 800743a:	75fb      	strb	r3, [r7, #23]
 800743c:	e002      	b.n	8007444 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2200      	movs	r2, #0
 8007442:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	2b04      	cmp	r3, #4
 8007448:	d101      	bne.n	800744e <f_opendir+0xd0>
 800744a:	2305      	movs	r3, #5
 800744c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <f_opendir+0xdc>
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800745a:	7dfb      	ldrb	r3, [r7, #23]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f107 0208 	add.w	r2, r7, #8
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff fb37 	bl	8006ae8 <validate>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d110      	bne.n	80074a6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd fa4b 	bl	800492c <dec_lock>
 8007496:	4603      	mov	r3, r0
 8007498:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f107 0208 	add.w	r2, r7, #8
 80074c0:	4611      	mov	r1, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fb10 	bl	8006ae8 <validate>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d126      	bne.n	8007520 <f_readdir+0x70>
		if (!fno) {
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80074d8:	2100      	movs	r1, #0
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fd fea9 	bl	8005232 <dir_sdi>
 80074e0:	4603      	mov	r3, r0
 80074e2:	73fb      	strb	r3, [r7, #15]
 80074e4:	e01c      	b.n	8007520 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80074e6:	2100      	movs	r1, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe fa72 	bl	80059d2 <dir_read>
 80074ee:	4603      	mov	r3, r0
 80074f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d101      	bne.n	80074fc <f_readdir+0x4c>
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10e      	bne.n	8007520 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f7fe fcc3 	bl	8005e90 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fd ff19 	bl	8005344 <dir_next>
 8007512:	4603      	mov	r3, r0
 8007514:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b04      	cmp	r3, #4
 800751a:	d101      	bne.n	8007520 <f_readdir+0x70>
 800751c:	2300      	movs	r3, #0
 800751e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007520:	7bfb      	ldrb	r3, [r7, #15]
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b088      	sub	sp, #32
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800753e:	e01c      	b.n	800757a <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007540:	f107 0310 	add.w	r3, r7, #16
 8007544:	f107 0114 	add.w	r1, r7, #20
 8007548:	2201      	movs	r2, #1
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fd10 	bl	8006f70 <f_read>
		if (rc != 1) break;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d117      	bne.n	8007586 <f_gets+0x5c>
		c = s[0];
 8007556:	7d3b      	ldrb	r3, [r7, #20]
 8007558:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b0d      	cmp	r3, #13
 800755e:	d00b      	beq.n	8007578 <f_gets+0x4e>
		*p++ = c;
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	61ba      	str	r2, [r7, #24]
 8007566:	7dfa      	ldrb	r2, [r7, #23]
 8007568:	701a      	strb	r2, [r3, #0]
		n++;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	3301      	adds	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b0a      	cmp	r3, #10
 8007574:	d009      	beq.n	800758a <f_gets+0x60>
 8007576:	e000      	b.n	800757a <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007578:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3b01      	subs	r3, #1
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	429a      	cmp	r2, r3
 8007582:	dbdd      	blt.n	8007540 <f_gets+0x16>
 8007584:	e002      	b.n	800758c <f_gets+0x62>
		if (rc != 1) break;
 8007586:	bf00      	nop
 8007588:	e000      	b.n	800758c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800758a:	bf00      	nop
	}
	*p = 0;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	2200      	movs	r2, #0
 8007590:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <f_gets+0x72>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	e000      	b.n	800759e <f_gets+0x74>
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075be:	4b1f      	ldr	r3, [pc, #124]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075c0:	7a5b      	ldrb	r3, [r3, #9]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d131      	bne.n	800762c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075ca:	7a5b      	ldrb	r3, [r3, #9]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b1a      	ldr	r3, [pc, #104]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075d2:	2100      	movs	r1, #0
 80075d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075d6:	4b19      	ldr	r3, [pc, #100]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075d8:	7a5b      	ldrb	r3, [r3, #9]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4a17      	ldr	r2, [pc, #92]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075e6:	4b15      	ldr	r3, [pc, #84]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075e8:	7a5b      	ldrb	r3, [r3, #9]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b13      	ldr	r3, [pc, #76]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075f0:	4413      	add	r3, r2
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075f6:	4b11      	ldr	r3, [pc, #68]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 80075f8:	7a5b      	ldrb	r3, [r3, #9]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	b2d1      	uxtb	r1, r2
 8007600:	4a0e      	ldr	r2, [pc, #56]	@ (800763c <FATFS_LinkDriverEx+0x94>)
 8007602:	7251      	strb	r1, [r2, #9]
 8007604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007606:	7dbb      	ldrb	r3, [r7, #22]
 8007608:	3330      	adds	r3, #48	@ 0x30
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3301      	adds	r3, #1
 8007614:	223a      	movs	r2, #58	@ 0x3a
 8007616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3302      	adds	r3, #2
 800761c:	222f      	movs	r2, #47	@ 0x2f
 800761e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3303      	adds	r3, #3
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	200015a4 	.word	0x200015a4

08007640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800764a:	2200      	movs	r2, #0
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff ffaa 	bl	80075a8 <FATFS_LinkDriverEx>
 8007654:	4603      	mov	r3, r0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	6039      	str	r1, [r7, #0]
 800766a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007670:	d802      	bhi.n	8007678 <ff_convert+0x18>
		c = chr;
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	81fb      	strh	r3, [r7, #14]
 8007676:	e025      	b.n	80076c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	2bff      	cmp	r3, #255	@ 0xff
 8007682:	d805      	bhi.n	8007690 <ff_convert+0x30>
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	3b80      	subs	r3, #128	@ 0x80
 8007688:	4a12      	ldr	r2, [pc, #72]	@ (80076d4 <ff_convert+0x74>)
 800768a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800768e:	e000      	b.n	8007692 <ff_convert+0x32>
 8007690:	2300      	movs	r3, #0
 8007692:	81fb      	strh	r3, [r7, #14]
 8007694:	e016      	b.n	80076c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007696:	2300      	movs	r3, #0
 8007698:	81fb      	strh	r3, [r7, #14]
 800769a:	e009      	b.n	80076b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800769c:	89fb      	ldrh	r3, [r7, #14]
 800769e:	4a0d      	ldr	r2, [pc, #52]	@ (80076d4 <ff_convert+0x74>)
 80076a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d006      	beq.n	80076b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80076aa:	89fb      	ldrh	r3, [r7, #14]
 80076ac:	3301      	adds	r3, #1
 80076ae:	81fb      	strh	r3, [r7, #14]
 80076b0:	89fb      	ldrh	r3, [r7, #14]
 80076b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80076b4:	d9f2      	bls.n	800769c <ff_convert+0x3c>
 80076b6:	e000      	b.n	80076ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80076b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80076ba:	89fb      	ldrh	r3, [r7, #14]
 80076bc:	3380      	adds	r3, #128	@ 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80076c4:	89fb      	ldrh	r3, [r7, #14]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	08007bf4 	.word	0x08007bf4

080076d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e8:	d201      	bcs.n	80076ee <ff_wtoupper+0x16>
 80076ea:	4b3e      	ldr	r3, [pc, #248]	@ (80077e4 <ff_wtoupper+0x10c>)
 80076ec:	e000      	b.n	80076f0 <ff_wtoupper+0x18>
 80076ee:	4b3e      	ldr	r3, [pc, #248]	@ (80077e8 <ff_wtoupper+0x110>)
 80076f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	617a      	str	r2, [r7, #20]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80076fc:	8a7b      	ldrh	r3, [r7, #18]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d068      	beq.n	80077d4 <ff_wtoupper+0xfc>
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	8a7b      	ldrh	r3, [r7, #18]
 8007706:	429a      	cmp	r2, r3
 8007708:	d364      	bcc.n	80077d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	1c9a      	adds	r2, r3, #2
 800770e:	617a      	str	r2, [r7, #20]
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	823b      	strh	r3, [r7, #16]
 8007714:	8a3b      	ldrh	r3, [r7, #16]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	81fb      	strh	r3, [r7, #14]
 800771a:	8a3b      	ldrh	r3, [r7, #16]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	8a79      	ldrh	r1, [r7, #18]
 8007724:	8a3b      	ldrh	r3, [r7, #16]
 8007726:	440b      	add	r3, r1
 8007728:	429a      	cmp	r2, r3
 800772a:	da49      	bge.n	80077c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800772c:	89fb      	ldrh	r3, [r7, #14]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d84f      	bhi.n	80077d2 <ff_wtoupper+0xfa>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <ff_wtoupper+0x60>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800775d 	.word	0x0800775d
 800773c:	0800776f 	.word	0x0800776f
 8007740:	08007785 	.word	0x08007785
 8007744:	0800778d 	.word	0x0800778d
 8007748:	08007795 	.word	0x08007795
 800774c:	0800779d 	.word	0x0800779d
 8007750:	080077a5 	.word	0x080077a5
 8007754:	080077ad 	.word	0x080077ad
 8007758:	080077b5 	.word	0x080077b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	8a7b      	ldrh	r3, [r7, #18]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	80fb      	strh	r3, [r7, #6]
 800776c:	e027      	b.n	80077be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800776e:	88fa      	ldrh	r2, [r7, #6]
 8007770:	8a7b      	ldrh	r3, [r7, #18]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	b29b      	uxth	r3, r3
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	88fa      	ldrh	r2, [r7, #6]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	80fb      	strh	r3, [r7, #6]
 8007782:	e01c      	b.n	80077be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	3b10      	subs	r3, #16
 8007788:	80fb      	strh	r3, [r7, #6]
 800778a:	e018      	b.n	80077be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	3b20      	subs	r3, #32
 8007790:	80fb      	strh	r3, [r7, #6]
 8007792:	e014      	b.n	80077be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	3b30      	subs	r3, #48	@ 0x30
 8007798:	80fb      	strh	r3, [r7, #6]
 800779a:	e010      	b.n	80077be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	3b1a      	subs	r3, #26
 80077a0:	80fb      	strh	r3, [r7, #6]
 80077a2:	e00c      	b.n	80077be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	3308      	adds	r3, #8
 80077a8:	80fb      	strh	r3, [r7, #6]
 80077aa:	e008      	b.n	80077be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	3b50      	subs	r3, #80	@ 0x50
 80077b0:	80fb      	strh	r3, [r7, #6]
 80077b2:	e004      	b.n	80077be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80077ba:	80fb      	strh	r3, [r7, #6]
 80077bc:	bf00      	nop
			}
			break;
 80077be:	e008      	b.n	80077d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80077c0:	89fb      	ldrh	r3, [r7, #14]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d195      	bne.n	80076f2 <ff_wtoupper+0x1a>
 80077c6:	8a3b      	ldrh	r3, [r7, #16]
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4413      	add	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80077d0:	e78f      	b.n	80076f2 <ff_wtoupper+0x1a>
			break;
 80077d2:	bf00      	nop
	}

	return chr;
 80077d4:	88fb      	ldrh	r3, [r7, #6]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	08007cf4 	.word	0x08007cf4
 80077e8:	08007ee8 	.word	0x08007ee8

080077ec <atoi>:
 80077ec:	220a      	movs	r2, #10
 80077ee:	2100      	movs	r1, #0
 80077f0:	f000 b87a 	b.w	80078e8 <strtol>

080077f4 <_strtol_l.constprop.0>:
 80077f4:	2b24      	cmp	r3, #36	@ 0x24
 80077f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077fa:	4686      	mov	lr, r0
 80077fc:	4690      	mov	r8, r2
 80077fe:	d801      	bhi.n	8007804 <_strtol_l.constprop.0+0x10>
 8007800:	2b01      	cmp	r3, #1
 8007802:	d106      	bne.n	8007812 <_strtol_l.constprop.0+0x1e>
 8007804:	f000 f882 	bl	800790c <__errno>
 8007808:	2316      	movs	r3, #22
 800780a:	6003      	str	r3, [r0, #0]
 800780c:	2000      	movs	r0, #0
 800780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007812:	4834      	ldr	r0, [pc, #208]	@ (80078e4 <_strtol_l.constprop.0+0xf0>)
 8007814:	460d      	mov	r5, r1
 8007816:	462a      	mov	r2, r5
 8007818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800781c:	5d06      	ldrb	r6, [r0, r4]
 800781e:	f016 0608 	ands.w	r6, r6, #8
 8007822:	d1f8      	bne.n	8007816 <_strtol_l.constprop.0+0x22>
 8007824:	2c2d      	cmp	r4, #45	@ 0x2d
 8007826:	d12d      	bne.n	8007884 <_strtol_l.constprop.0+0x90>
 8007828:	782c      	ldrb	r4, [r5, #0]
 800782a:	2601      	movs	r6, #1
 800782c:	1c95      	adds	r5, r2, #2
 800782e:	f033 0210 	bics.w	r2, r3, #16
 8007832:	d109      	bne.n	8007848 <_strtol_l.constprop.0+0x54>
 8007834:	2c30      	cmp	r4, #48	@ 0x30
 8007836:	d12a      	bne.n	800788e <_strtol_l.constprop.0+0x9a>
 8007838:	782a      	ldrb	r2, [r5, #0]
 800783a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800783e:	2a58      	cmp	r2, #88	@ 0x58
 8007840:	d125      	bne.n	800788e <_strtol_l.constprop.0+0x9a>
 8007842:	786c      	ldrb	r4, [r5, #1]
 8007844:	2310      	movs	r3, #16
 8007846:	3502      	adds	r5, #2
 8007848:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800784c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007850:	2200      	movs	r2, #0
 8007852:	fbbc f9f3 	udiv	r9, ip, r3
 8007856:	4610      	mov	r0, r2
 8007858:	fb03 ca19 	mls	sl, r3, r9, ip
 800785c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007860:	2f09      	cmp	r7, #9
 8007862:	d81b      	bhi.n	800789c <_strtol_l.constprop.0+0xa8>
 8007864:	463c      	mov	r4, r7
 8007866:	42a3      	cmp	r3, r4
 8007868:	dd27      	ble.n	80078ba <_strtol_l.constprop.0+0xc6>
 800786a:	1c57      	adds	r7, r2, #1
 800786c:	d007      	beq.n	800787e <_strtol_l.constprop.0+0x8a>
 800786e:	4581      	cmp	r9, r0
 8007870:	d320      	bcc.n	80078b4 <_strtol_l.constprop.0+0xc0>
 8007872:	d101      	bne.n	8007878 <_strtol_l.constprop.0+0x84>
 8007874:	45a2      	cmp	sl, r4
 8007876:	db1d      	blt.n	80078b4 <_strtol_l.constprop.0+0xc0>
 8007878:	fb00 4003 	mla	r0, r0, r3, r4
 800787c:	2201      	movs	r2, #1
 800787e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007882:	e7eb      	b.n	800785c <_strtol_l.constprop.0+0x68>
 8007884:	2c2b      	cmp	r4, #43	@ 0x2b
 8007886:	bf04      	itt	eq
 8007888:	782c      	ldrbeq	r4, [r5, #0]
 800788a:	1c95      	addeq	r5, r2, #2
 800788c:	e7cf      	b.n	800782e <_strtol_l.constprop.0+0x3a>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1da      	bne.n	8007848 <_strtol_l.constprop.0+0x54>
 8007892:	2c30      	cmp	r4, #48	@ 0x30
 8007894:	bf0c      	ite	eq
 8007896:	2308      	moveq	r3, #8
 8007898:	230a      	movne	r3, #10
 800789a:	e7d5      	b.n	8007848 <_strtol_l.constprop.0+0x54>
 800789c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80078a0:	2f19      	cmp	r7, #25
 80078a2:	d801      	bhi.n	80078a8 <_strtol_l.constprop.0+0xb4>
 80078a4:	3c37      	subs	r4, #55	@ 0x37
 80078a6:	e7de      	b.n	8007866 <_strtol_l.constprop.0+0x72>
 80078a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80078ac:	2f19      	cmp	r7, #25
 80078ae:	d804      	bhi.n	80078ba <_strtol_l.constprop.0+0xc6>
 80078b0:	3c57      	subs	r4, #87	@ 0x57
 80078b2:	e7d8      	b.n	8007866 <_strtol_l.constprop.0+0x72>
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	e7e1      	b.n	800787e <_strtol_l.constprop.0+0x8a>
 80078ba:	1c53      	adds	r3, r2, #1
 80078bc:	d108      	bne.n	80078d0 <_strtol_l.constprop.0+0xdc>
 80078be:	2322      	movs	r3, #34	@ 0x22
 80078c0:	f8ce 3000 	str.w	r3, [lr]
 80078c4:	4660      	mov	r0, ip
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	d0a0      	beq.n	800780e <_strtol_l.constprop.0+0x1a>
 80078cc:	1e69      	subs	r1, r5, #1
 80078ce:	e006      	b.n	80078de <_strtol_l.constprop.0+0xea>
 80078d0:	b106      	cbz	r6, 80078d4 <_strtol_l.constprop.0+0xe0>
 80078d2:	4240      	negs	r0, r0
 80078d4:	f1b8 0f00 	cmp.w	r8, #0
 80078d8:	d099      	beq.n	800780e <_strtol_l.constprop.0+0x1a>
 80078da:	2a00      	cmp	r2, #0
 80078dc:	d1f6      	bne.n	80078cc <_strtol_l.constprop.0+0xd8>
 80078de:	f8c8 1000 	str.w	r1, [r8]
 80078e2:	e794      	b.n	800780e <_strtol_l.constprop.0+0x1a>
 80078e4:	08007fa5 	.word	0x08007fa5

080078e8 <strtol>:
 80078e8:	4613      	mov	r3, r2
 80078ea:	460a      	mov	r2, r1
 80078ec:	4601      	mov	r1, r0
 80078ee:	4802      	ldr	r0, [pc, #8]	@ (80078f8 <strtol+0x10>)
 80078f0:	6800      	ldr	r0, [r0, #0]
 80078f2:	f7ff bf7f 	b.w	80077f4 <_strtol_l.constprop.0>
 80078f6:	bf00      	nop
 80078f8:	20000024 	.word	0x20000024

080078fc <memset>:
 80078fc:	4402      	add	r2, r0
 80078fe:	4603      	mov	r3, r0
 8007900:	4293      	cmp	r3, r2
 8007902:	d100      	bne.n	8007906 <memset+0xa>
 8007904:	4770      	bx	lr
 8007906:	f803 1b01 	strb.w	r1, [r3], #1
 800790a:	e7f9      	b.n	8007900 <memset+0x4>

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	@ (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000024 	.word	0x20000024

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	@ (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	@ (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	@ (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	@ (800795c <__libc_init_array+0x44>)
 800792c:	f000 f820 	bl	8007970 <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	080080b0 	.word	0x080080b0
 8007954:	080080b0 	.word	0x080080b0
 8007958:	080080b0 	.word	0x080080b0
 800795c:	080080b4 	.word	0x080080b4

08007960 <strcpy>:
 8007960:	4603      	mov	r3, r0
 8007962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007966:	f803 2b01 	strb.w	r2, [r3], #1
 800796a:	2a00      	cmp	r2, #0
 800796c:	d1f9      	bne.n	8007962 <strcpy+0x2>
 800796e:	4770      	bx	lr

08007970 <_init>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr

0800797c <_fini>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr
